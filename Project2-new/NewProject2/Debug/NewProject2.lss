
NewProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  000012ea  0000137e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c48  0080020e  0080020e  0000138c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001464  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000782  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d4c  00000000  00000000  00003146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00003e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000856  00000000  00000000  00004204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b00  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  0000555a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c1       	rjmp	.+770    	; 0x348 <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c6       	rjmp	.+3094   	; 0xc7c <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ee       	ldi	r30, 0xEA	; 234
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 30       	cpi	r26, 0x0E	; 14
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	ae e0       	ldi	r26, 0x0E	; 14
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 35       	cpi	r26, 0x56	; 86
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	01 d5       	rcall	.+2562   	; 0xb22 <main>
     120:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_Z12odd_periodicv>:
volatile uint8_t count1 = 1;
volatile uint8_t count2 = 1;

void odd_periodic() {
	for(;;) {
		if ((count1 % 2) == 1)
     126:	80 91 01 02 	lds	r24, 0x0201
     12a:	80 ff       	sbrs	r24, 0
     12c:	04 c0       	rjmp	.+8      	; 0x136 <_Z12odd_periodicv+0x10>
		{
			add_to_trace(count1);
     12e:	80 91 01 02 	lds	r24, 0x0201
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	56 d5       	rcall	.+2732   	; 0xbe2 <_Z12add_to_tracej>
		}
		
		Task_Next();
     136:	00 d2       	rcall	.+1024   	; 0x538 <Task_Next>
		
		count1++;
     138:	80 91 01 02 	lds	r24, 0x0201
     13c:	8f 5f       	subi	r24, 0xFF	; 255
     13e:	80 93 01 02 	sts	0x0201, r24
#include <util/delay.h>

volatile uint8_t count1 = 1;
volatile uint8_t count2 = 1;

void odd_periodic() {
     142:	f1 cf       	rjmp	.-30     	; 0x126 <_Z12odd_periodicv>

00000144 <_Z13even_periodicv>:
	}
}

void even_periodic() {
	for(;;) {
		if ((count2 % 2) == 0)
     144:	80 91 00 02 	lds	r24, 0x0200
     148:	80 fd       	sbrc	r24, 0
     14a:	04 c0       	rjmp	.+8      	; 0x154 <_Z13even_periodicv+0x10>
		{
			add_to_trace(count2);
     14c:	80 91 00 02 	lds	r24, 0x0200
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	47 d5       	rcall	.+2702   	; 0xbe2 <_Z12add_to_tracej>
		}
		
		if (count2 == 10)
     154:	80 91 00 02 	lds	r24, 0x0200
     158:	8a 30       	cpi	r24, 0x0A	; 10
     15a:	11 f4       	brne	.+4      	; 0x160 <_Z13even_periodicv+0x1c>
		{
			print_trace();
     15c:	e3 c4       	rjmp	.+2502   	; 0xb24 <_Z11print_tracev>
     15e:	08 95       	ret
			break;
		}
		
		Task_Next();
     160:	eb d1       	rcall	.+982    	; 0x538 <Task_Next>
		
		count2++;
     162:	80 91 00 02 	lds	r24, 0x0200
     166:	8f 5f       	subi	r24, 0xFF	; 255
     168:	80 93 00 02 	sts	0x0200, r24
		
		count1++;
	}
}

void even_periodic() {
     16c:	eb cf       	rjmp	.-42     	; 0x144 <_Z13even_periodicv>

0000016e <_Z6r_mainv>:
		
		count2++;
	}
}

int r_main() {
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
    uart_init();
     172:	72 d5       	rcall	.+2788   	; 0xc58 <_Z9uart_initv>
    set_trace_test(8);
     174:	88 e0       	ldi	r24, 0x08	; 8
     176:	51 d5       	rcall	.+2722   	; 0xc1a <_Z14set_trace_testh>
	
    Task_Create_Periodic(odd_periodic, 0, 20, 100, 10); // run on 10th tick
     178:	0a e0       	ldi	r16, 0x0A	; 10
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	24 e6       	ldi	r18, 0x64	; 100
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	44 e1       	ldi	r20, 0x14	; 20
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	83 e9       	ldi	r24, 0x93	; 147
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	ad d1       	rcall	.+858    	; 0x4e8 <Task_Create_Periodic>
	Task_Create_Periodic(even_periodic, 0, 20, 100, 20); // run on 20th tick
     18e:	04 e1       	ldi	r16, 0x14	; 20
     190:	10 e0       	ldi	r17, 0x00	; 0
     192:	24 e6       	ldi	r18, 0x64	; 100
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	44 e1       	ldi	r20, 0x14	; 20
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	82 ea       	ldi	r24, 0xA2	; 162
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a2 d1       	rcall	.+836    	; 0x4e8 <Task_Create_Periodic>

	return 0;
}
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	08 95       	ret

000001ae <_ZL4idlev>:
    arg = cur_task->arg;

    SREG = sreg;

    return arg;
}
     1ae:	ff cf       	rjmp	.-2      	; 0x1ae <_ZL4idlev>

000001b0 <_ZL11exit_kernelv>:
     1b0:	ff 93       	push	r31
     1b2:	fc b7       	in	r31, 0x3c	; 60
     1b4:	ff 93       	push	r31
     1b6:	ff b7       	in	r31, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	ff 93       	push	r31
     1bc:	ef 93       	push	r30
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	bf 93       	push	r27
     1c4:	af 93       	push	r26
     1c6:	9f 93       	push	r25
     1c8:	8f 93       	push	r24
     1ca:	7f 93       	push	r23
     1cc:	6f 93       	push	r22
     1ce:	5f 93       	push	r21
     1d0:	4f 93       	push	r20
     1d2:	3f 93       	push	r19
     1d4:	2f 93       	push	r18
     1d6:	1f 93       	push	r17
     1d8:	0f 93       	push	r16
     1da:	ff 92       	push	r15
     1dc:	ef 92       	push	r14
     1de:	df 92       	push	r13
     1e0:	cf 92       	push	r12
     1e2:	bf 92       	push	r11
     1e4:	af 92       	push	r10
     1e6:	9f 92       	push	r9
     1e8:	8f 92       	push	r8
     1ea:	7f 92       	push	r7
     1ec:	6f 92       	push	r6
     1ee:	5f 92       	push	r5
     1f0:	4f 92       	push	r4
     1f2:	3f 92       	push	r3
     1f4:	2f 92       	push	r2
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	8d b7       	in	r24, 0x3d	; 61
     1fc:	9e b7       	in	r25, 0x3e	; 62
     1fe:	90 93 c6 0b 	sts	0x0BC6, r25
     202:	80 93 c5 0b 	sts	0x0BC5, r24
     206:	e0 91 c7 0b 	lds	r30, 0x0BC7
     20a:	f0 91 c8 0b 	lds	r31, 0x0BC8
     20e:	f3 95       	inc	r31
     210:	80 81       	ld	r24, Z
     212:	91 81       	ldd	r25, Z+1	; 0x01
     214:	9e bf       	out	0x3e, r25	; 62
     216:	8d bf       	out	0x3d, r24	; 61
     218:	0f 90       	pop	r0
     21a:	1f 90       	pop	r1
     21c:	2f 90       	pop	r2
     21e:	3f 90       	pop	r3
     220:	4f 90       	pop	r4
     222:	5f 90       	pop	r5
     224:	6f 90       	pop	r6
     226:	7f 90       	pop	r7
     228:	8f 90       	pop	r8
     22a:	9f 90       	pop	r9
     22c:	af 90       	pop	r10
     22e:	bf 90       	pop	r11
     230:	cf 90       	pop	r12
     232:	df 90       	pop	r13
     234:	ef 90       	pop	r14
     236:	ff 90       	pop	r15
     238:	0f 91       	pop	r16
     23a:	1f 91       	pop	r17
     23c:	2f 91       	pop	r18
     23e:	3f 91       	pop	r19
     240:	4f 91       	pop	r20
     242:	5f 91       	pop	r21
     244:	6f 91       	pop	r22
     246:	7f 91       	pop	r23
     248:	8f 91       	pop	r24
     24a:	9f 91       	pop	r25
     24c:	af 91       	pop	r26
     24e:	bf 91       	pop	r27
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	ef 91       	pop	r30
     256:	ff 91       	pop	r31
     258:	ff bf       	out	0x3f, r31	; 63
     25a:	ff 91       	pop	r31
     25c:	fc bf       	out	0x3c, r31	; 60
     25e:	ff 91       	pop	r31
     260:	08 95       	ret

00000262 <_ZL12enter_kernelv>:
     262:	ff 93       	push	r31
     264:	fc b7       	in	r31, 0x3c	; 60
     266:	ff 93       	push	r31
     268:	ff b7       	in	r31, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	ff 93       	push	r31
     26e:	ef 93       	push	r30
     270:	df 93       	push	r29
     272:	cf 93       	push	r28
     274:	bf 93       	push	r27
     276:	af 93       	push	r26
     278:	9f 93       	push	r25
     27a:	8f 93       	push	r24
     27c:	7f 93       	push	r23
     27e:	6f 93       	push	r22
     280:	5f 93       	push	r21
     282:	4f 93       	push	r20
     284:	3f 93       	push	r19
     286:	2f 93       	push	r18
     288:	1f 93       	push	r17
     28a:	0f 93       	push	r16
     28c:	ff 92       	push	r15
     28e:	ef 92       	push	r14
     290:	df 92       	push	r13
     292:	cf 92       	push	r12
     294:	bf 92       	push	r11
     296:	af 92       	push	r10
     298:	9f 92       	push	r9
     29a:	8f 92       	push	r8
     29c:	7f 92       	push	r7
     29e:	6f 92       	push	r6
     2a0:	5f 92       	push	r5
     2a2:	4f 92       	push	r4
     2a4:	3f 92       	push	r3
     2a6:	2f 92       	push	r2
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	e0 91 c7 0b 	lds	r30, 0x0BC7
     2b0:	f0 91 c8 0b 	lds	r31, 0x0BC8
     2b4:	8d b7       	in	r24, 0x3d	; 61
     2b6:	9e b7       	in	r25, 0x3e	; 62
     2b8:	f3 95       	inc	r31
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
     2be:	80 91 c5 0b 	lds	r24, 0x0BC5
     2c2:	90 91 c6 0b 	lds	r25, 0x0BC6
     2c6:	9e bf       	out	0x3e, r25	; 62
     2c8:	8d bf       	out	0x3d, r24	; 61
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	2f 90       	pop	r2
     2d0:	3f 90       	pop	r3
     2d2:	4f 90       	pop	r4
     2d4:	5f 90       	pop	r5
     2d6:	6f 90       	pop	r6
     2d8:	7f 90       	pop	r7
     2da:	8f 90       	pop	r8
     2dc:	9f 90       	pop	r9
     2de:	af 90       	pop	r10
     2e0:	bf 90       	pop	r11
     2e2:	cf 90       	pop	r12
     2e4:	df 90       	pop	r13
     2e6:	ef 90       	pop	r14
     2e8:	ff 90       	pop	r15
     2ea:	0f 91       	pop	r16
     2ec:	1f 91       	pop	r17
     2ee:	2f 91       	pop	r18
     2f0:	3f 91       	pop	r19
     2f2:	4f 91       	pop	r20
     2f4:	5f 91       	pop	r21
     2f6:	6f 91       	pop	r22
     2f8:	7f 91       	pop	r23
     2fa:	8f 91       	pop	r24
     2fc:	9f 91       	pop	r25
     2fe:	af 91       	pop	r26
     300:	bf 91       	pop	r27
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	ef 91       	pop	r30
     308:	ff 91       	pop	r31
     30a:	ff bf       	out	0x3f, r31	; 63
     30c:	ff 91       	pop	r31
     30e:	fc bf       	out	0x3c, r31	; 60
     310:	ff 91       	pop	r31
     312:	08 95       	ret

00000314 <_ZL7dequeueP7queue_t>:
     314:	fc 01       	movw	r30, r24
     316:	80 81       	ld	r24, Z
     318:	91 81       	ldd	r25, Z+1	; 0x01
     31a:	00 97       	sbiw	r24, 0x00	; 0
     31c:	51 f0       	breq	.+20     	; 0x332 <_ZL7dequeueP7queue_t+0x1e>
     31e:	dc 01       	movw	r26, r24
     320:	a1 5f       	subi	r26, 0xF1	; 241
     322:	be 4f       	sbci	r27, 0xFE	; 254
     324:	2d 91       	ld	r18, X+
     326:	3c 91       	ld	r19, X
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	31 83       	std	Z+1, r19	; 0x01
     32c:	20 83       	st	Z, r18
     32e:	1d 92       	st	X+, r1
     330:	1c 92       	st	X, r1
     332:	08 95       	ret

00000334 <Task_Terminate>:
     334:	cf 93       	push	r28
     336:	cf b7       	in	r28, 0x3f	; 63
     338:	f8 94       	cli
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	80 93 2b 02 	sts	0x022B, r24
     340:	90 df       	rcall	.-224    	; 0x262 <_ZL12enter_kernelv>
     342:	cf bf       	out	0x3f, r28	; 63
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <__vector_17>:
     348:	ff 93       	push	r31
     34a:	fc b7       	in	r31, 0x3c	; 60
     34c:	ff 93       	push	r31
     34e:	ff b7       	in	r31, 0x3f	; 63
     350:	f8 94       	cli
     352:	f0 68       	ori	r31, 0x80	; 128
     354:	ff 93       	push	r31
     356:	ef 93       	push	r30
     358:	df 93       	push	r29
     35a:	cf 93       	push	r28
     35c:	bf 93       	push	r27
     35e:	af 93       	push	r26
     360:	9f 93       	push	r25
     362:	8f 93       	push	r24
     364:	7f 93       	push	r23
     366:	6f 93       	push	r22
     368:	5f 93       	push	r21
     36a:	4f 93       	push	r20
     36c:	3f 93       	push	r19
     36e:	2f 93       	push	r18
     370:	1f 93       	push	r17
     372:	0f 93       	push	r16
     374:	ff 92       	push	r15
     376:	ef 92       	push	r14
     378:	df 92       	push	r13
     37a:	cf 92       	push	r12
     37c:	bf 92       	push	r11
     37e:	af 92       	push	r10
     380:	9f 92       	push	r9
     382:	8f 92       	push	r8
     384:	7f 92       	push	r7
     386:	6f 92       	push	r6
     388:	5f 92       	push	r5
     38a:	4f 92       	push	r4
     38c:	3f 92       	push	r3
     38e:	2f 92       	push	r2
     390:	1f 92       	push	r1
     392:	0f 92       	push	r0
     394:	e0 91 c7 0b 	lds	r30, 0x0BC7
     398:	f0 91 c8 0b 	lds	r31, 0x0BC8
     39c:	8d b7       	in	r24, 0x3d	; 61
     39e:	9e b7       	in	r25, 0x3e	; 62
     3a0:	f3 95       	inc	r31
     3a2:	91 83       	std	Z+1, r25	; 0x01
     3a4:	80 83       	st	Z, r24
     3a6:	80 91 c5 0b 	lds	r24, 0x0BC5
     3aa:	90 91 c6 0b 	lds	r25, 0x0BC6
     3ae:	9e bf       	out	0x3e, r25	; 62
     3b0:	8d bf       	out	0x3d, r24	; 61
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	80 93 2b 02 	sts	0x022B, r24
     3b8:	80 91 c9 0b 	lds	r24, 0x0BC9
     3bc:	90 91 ca 0b 	lds	r25, 0x0BCA
     3c0:	05 96       	adiw	r24, 0x05	; 5
     3c2:	90 93 ca 0b 	sts	0x0BCA, r25
     3c6:	80 93 c9 0b 	sts	0x0BC9, r24
     3ca:	e8 e8       	ldi	r30, 0x88	; 136
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	91 81       	ldd	r25, Z+1	; 0x01
     3d2:	80 5f       	subi	r24, 0xF0	; 240
     3d4:	98 4d       	sbci	r25, 0xD8	; 216
     3d6:	91 83       	std	Z+1, r25	; 0x01
     3d8:	80 83       	st	Z, r24
     3da:	80 91 c5 0b 	lds	r24, 0x0BC5
     3de:	90 91 c6 0b 	lds	r25, 0x0BC6
     3e2:	9e bf       	out	0x3e, r25	; 62
     3e4:	8d bf       	out	0x3d, r24	; 61
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	2f 90       	pop	r2
     3ec:	3f 90       	pop	r3
     3ee:	4f 90       	pop	r4
     3f0:	5f 90       	pop	r5
     3f2:	6f 90       	pop	r6
     3f4:	7f 90       	pop	r7
     3f6:	8f 90       	pop	r8
     3f8:	9f 90       	pop	r9
     3fa:	af 90       	pop	r10
     3fc:	bf 90       	pop	r11
     3fe:	cf 90       	pop	r12
     400:	df 90       	pop	r13
     402:	ef 90       	pop	r14
     404:	ff 90       	pop	r15
     406:	0f 91       	pop	r16
     408:	1f 91       	pop	r17
     40a:	2f 91       	pop	r18
     40c:	3f 91       	pop	r19
     40e:	4f 91       	pop	r20
     410:	5f 91       	pop	r21
     412:	6f 91       	pop	r22
     414:	7f 91       	pop	r23
     416:	8f 91       	pop	r24
     418:	9f 91       	pop	r25
     41a:	af 91       	pop	r26
     41c:	bf 91       	pop	r27
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	ef 91       	pop	r30
     424:	ff 91       	pop	r31
     426:	ff bf       	out	0x3f, r31	; 63
     428:	ff 91       	pop	r31
     42a:	fc bf       	out	0x3c, r31	; 60
     42c:	ff 91       	pop	r31
     42e:	08 95       	ret

00000430 <OS_Abort>:
     430:	f8 94       	cli
     432:	80 ef       	ldi	r24, 0xF0	; 240
     434:	84 b9       	out	0x04, r24	; 4
     436:	80 91 02 02 	lds	r24, 0x0202
     43a:	81 11       	cpse	r24, r1
     43c:	05 c0       	rjmp	.+10     	; 0x448 <OS_Abort+0x18>
     43e:	30 91 02 02 	lds	r19, 0x0202
     442:	3f 5f       	subi	r19, 0xFF	; 255
     444:	40 e6       	ldi	r20, 0x60	; 96
     446:	03 c0       	rjmp	.+6      	; 0x44e <OS_Abort+0x1e>
     448:	30 91 02 02 	lds	r19, 0x0202
     44c:	40 e9       	ldi	r20, 0x90	; 144
     44e:	70 ef       	ldi	r23, 0xF0	; 240
     450:	64 e6       	ldi	r22, 0x64	; 100
     452:	2a e0       	ldi	r18, 0x0A	; 10
     454:	54 e1       	ldi	r21, 0x14	; 20
     456:	75 b9       	out	0x05, r23	; 5
     458:	86 2f       	mov	r24, r22
     45a:	9f e7       	ldi	r25, 0x7F	; 127
     45c:	a8 e3       	ldi	r26, 0x38	; 56
     45e:	e1 e0       	ldi	r30, 0x01	; 1
     460:	91 50       	subi	r25, 0x01	; 1
     462:	a0 40       	sbci	r26, 0x00	; 0
     464:	e0 40       	sbci	r30, 0x00	; 0
     466:	e1 f7       	brne	.-8      	; 0x460 <OS_Abort+0x30>
     468:	00 c0       	rjmp	.+0      	; 0x46a <OS_Abort+0x3a>
     46a:	00 00       	nop
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	a9 f7       	brne	.-22     	; 0x45a <OS_Abort+0x2a>
     470:	15 b8       	out	0x05, r1	; 5
     472:	88 e2       	ldi	r24, 0x28	; 40
     474:	ff e7       	ldi	r31, 0x7F	; 127
     476:	98 e3       	ldi	r25, 0x38	; 56
     478:	a1 e0       	ldi	r26, 0x01	; 1
     47a:	f1 50       	subi	r31, 0x01	; 1
     47c:	90 40       	sbci	r25, 0x00	; 0
     47e:	a0 40       	sbci	r26, 0x00	; 0
     480:	e1 f7       	brne	.-8      	; 0x47a <OS_Abort+0x4a>
     482:	00 c0       	rjmp	.+0      	; 0x484 <OS_Abort+0x54>
     484:	00 00       	nop
     486:	81 50       	subi	r24, 0x01	; 1
     488:	a9 f7       	brne	.-22     	; 0x474 <OS_Abort+0x44>
     48a:	33 23       	and	r19, r19
     48c:	59 f1       	breq	.+86     	; 0x4e4 <OS_Abort+0xb4>
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	45 b9       	out	0x05, r20	; 5
     492:	82 2f       	mov	r24, r18
     494:	ef e7       	ldi	r30, 0x7F	; 127
     496:	f8 e3       	ldi	r31, 0x38	; 56
     498:	a1 e0       	ldi	r26, 0x01	; 1
     49a:	e1 50       	subi	r30, 0x01	; 1
     49c:	f0 40       	sbci	r31, 0x00	; 0
     49e:	a0 40       	sbci	r26, 0x00	; 0
     4a0:	e1 f7       	brne	.-8      	; 0x49a <OS_Abort+0x6a>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <OS_Abort+0x74>
     4a4:	00 00       	nop
     4a6:	81 50       	subi	r24, 0x01	; 1
     4a8:	a9 f7       	brne	.-22     	; 0x494 <OS_Abort+0x64>
     4aa:	15 b8       	out	0x05, r1	; 5
     4ac:	82 2f       	mov	r24, r18
     4ae:	ef e7       	ldi	r30, 0x7F	; 127
     4b0:	f8 e3       	ldi	r31, 0x38	; 56
     4b2:	a1 e0       	ldi	r26, 0x01	; 1
     4b4:	e1 50       	subi	r30, 0x01	; 1
     4b6:	f0 40       	sbci	r31, 0x00	; 0
     4b8:	a0 40       	sbci	r26, 0x00	; 0
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <OS_Abort+0x84>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <OS_Abort+0x8e>
     4be:	00 00       	nop
     4c0:	81 50       	subi	r24, 0x01	; 1
     4c2:	a9 f7       	brne	.-22     	; 0x4ae <OS_Abort+0x7e>
     4c4:	9f 5f       	subi	r25, 0xFF	; 255
     4c6:	93 13       	cpse	r25, r19
     4c8:	e3 cf       	rjmp	.-58     	; 0x490 <OS_Abort+0x60>
     4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <OS_Abort+0xb4>
     4cc:	ef e7       	ldi	r30, 0x7F	; 127
     4ce:	f8 e3       	ldi	r31, 0x38	; 56
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	e1 50       	subi	r30, 0x01	; 1
     4d4:	f0 40       	sbci	r31, 0x00	; 0
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <OS_Abort+0xa2>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <OS_Abort+0xac>
     4dc:	00 00       	nop
     4de:	81 50       	subi	r24, 0x01	; 1
     4e0:	a9 f7       	brne	.-22     	; 0x4cc <OS_Abort+0x9c>
     4e2:	b9 cf       	rjmp	.-142    	; 0x456 <OS_Abort+0x26>
     4e4:	85 2f       	mov	r24, r21
     4e6:	f2 cf       	rjmp	.-28     	; 0x4cc <OS_Abort+0x9c>

000004e8 <Task_Create_Periodic>:
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	cf b7       	in	r28, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	90 93 21 02 	sts	0x0221, r25
     4f6:	80 93 20 02 	sts	0x0220, r24
     4fa:	70 93 23 02 	sts	0x0223, r23
     4fe:	60 93 22 02 	sts	0x0222, r22
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	80 93 24 02 	sts	0x0224, r24
     508:	50 93 26 02 	sts	0x0226, r21
     50c:	40 93 25 02 	sts	0x0225, r20
     510:	10 93 2a 02 	sts	0x022A, r17
     514:	00 93 29 02 	sts	0x0229, r16
     518:	30 93 28 02 	sts	0x0228, r19
     51c:	20 93 27 02 	sts	0x0227, r18
     520:	80 93 2b 02 	sts	0x022B, r24
     524:	9e de       	rcall	.-708    	; 0x262 <_ZL12enter_kernelv>
     526:	80 91 1e 02 	lds	r24, 0x021E
     52a:	90 91 1f 02 	lds	r25, 0x021F
     52e:	cf bf       	out	0x3f, r28	; 63
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	08 95       	ret

00000538 <Task_Next>:
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	1f 92       	push	r1
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	8f b7       	in	r24, 0x3f	; 63
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	f8 94       	cli
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	80 93 2b 02 	sts	0x022B, r24
     54e:	89 de       	rcall	.-750    	; 0x262 <_ZL12enter_kernelv>
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	8f bf       	out	0x3f, r24	; 63
     554:	0f 90       	pop	r0
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <Now>:

#define CYCLES_IN_MS (TICK_CYCLES/TICK)

uint16_t Now() {
	return ms_counter + ((10000 - (OCR1A - TCNT1))/CYCLES_IN_MS);
     55c:	20 91 84 00 	lds	r18, 0x0084
     560:	30 91 85 00 	lds	r19, 0x0085
     564:	80 91 88 00 	lds	r24, 0x0088
     568:	90 91 89 00 	lds	r25, 0x0089
     56c:	20 5f       	subi	r18, 0xF0	; 240
     56e:	38 4d       	sbci	r19, 0xD8	; 216
     570:	28 1b       	sub	r18, r24
     572:	39 0b       	sbc	r19, r25
     574:	32 95       	swap	r19
     576:	22 95       	swap	r18
     578:	2f 70       	andi	r18, 0x0F	; 15
     57a:	23 27       	eor	r18, r19
     57c:	3f 70       	andi	r19, 0x0F	; 15
     57e:	23 27       	eor	r18, r19
     580:	a3 e6       	ldi	r26, 0x63	; 99
     582:	b0 e1       	ldi	r27, 0x10	; 16
     584:	cb d3       	rcall	.+1942   	; 0xd1c <__umulhisi3>
     586:	96 95       	lsr	r25
     588:	87 95       	ror	r24
     58a:	96 95       	lsr	r25
     58c:	87 95       	ror	r24
     58e:	96 95       	lsr	r25
     590:	87 95       	ror	r24
     592:	20 91 c9 0b 	lds	r18, 0x0BC9
     596:	30 91 ca 0b 	lds	r19, 0x0BCA
}
     59a:	82 0f       	add	r24, r18
     59c:	93 1f       	adc	r25, r19
     59e:	08 95       	ret

000005a0 <_ZL7enqueueP7queue_tP9td_struct>:
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	8c 01       	movw	r16, r24
     5aa:	eb 01       	movw	r28, r22
	task_to_add->next = NULL;
     5ac:	fb 01       	movw	r30, r22
     5ae:	e1 5f       	subi	r30, 0xF1	; 241
     5b0:	fe 4f       	sbci	r31, 0xFE	; 254
     5b2:	11 82       	std	Z+1, r1	; 0x01
     5b4:	10 82       	st	Z, r1
	
	if(queue_ptr->head == NULL)
     5b6:	dc 01       	movw	r26, r24
     5b8:	8d 91       	ld	r24, X+
     5ba:	9c 91       	ld	r25, X
     5bc:	11 97       	sbiw	r26, 0x01	; 1
     5be:	89 2b       	or	r24, r25
     5c0:	41 f4       	brne	.+16     	; 0x5d2 <_ZL7enqueueP7queue_tP9td_struct+0x32>
	{
		/* empty queue */
		queue_ptr->head = task_to_add;
     5c2:	11 96       	adiw	r26, 0x01	; 1
     5c4:	7c 93       	st	X, r23
     5c6:	6e 93       	st	-X, r22
		queue_ptr->tail = task_to_add;
     5c8:	13 96       	adiw	r26, 0x03	; 3
     5ca:	7c 93       	st	X, r23
     5cc:	6e 93       	st	-X, r22
     5ce:	12 97       	sbiw	r26, 0x02	; 2
		return;
     5d0:	73 c0       	rjmp	.+230    	; 0x6b8 <_ZL7enqueueP7queue_tP9td_struct+0x118>
	}
	
	if(task_to_add->level == PERIODIC) 
     5d2:	fb 01       	movw	r30, r22
     5d4:	eb 5f       	subi	r30, 0xFB	; 251
     5d6:	fe 4f       	sbci	r31, 0xFE	; 254
     5d8:	80 81       	ld	r24, Z
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <_ZL7enqueueP7queue_tP9td_struct+0x40>
     5de:	5f c0       	rjmp	.+190    	; 0x69e <_ZL7enqueueP7queue_tP9td_struct+0xfe>
	{
		uint16_t now = Now();
     5e0:	bd df       	rcall	.-134    	; 0x55c <Now>
		task_descriptor_t* head_ptr = queue_ptr->head;
     5e2:	f8 01       	movw	r30, r16
     5e4:	20 81       	ld	r18, Z
     5e6:	31 81       	ldd	r19, Z+1	; 0x01
		while(head_ptr != NULL)
     5e8:	21 15       	cp	r18, r1
     5ea:	31 05       	cpc	r19, r1
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <_ZL7enqueueP7queue_tP9td_struct+0x50>
     5ee:	57 c0       	rjmp	.+174    	; 0x69e <_ZL7enqueueP7queue_tP9td_struct+0xfe>
		{
			if (((task_to_add->offset + task_to_add->period) - (now - task_to_add->last)) < ((head_ptr->offset + head_ptr->period) - (now - head_ptr->last)))
     5f0:	fe 01       	movw	r30, r28
     5f2:	ea 5f       	subi	r30, 0xFA	; 250
     5f4:	fe 4f       	sbci	r31, 0xFE	; 254
     5f6:	01 90       	ld	r0, Z+
     5f8:	f0 81       	ld	r31, Z
     5fa:	e0 2d       	mov	r30, r0
     5fc:	de 01       	movw	r26, r28
     5fe:	a6 5f       	subi	r26, 0xF6	; 246
     600:	be 4f       	sbci	r27, 0xFE	; 254
     602:	4d 91       	ld	r20, X+
     604:	5c 91       	ld	r21, X
     606:	11 97       	sbiw	r26, 0x01	; 1
     608:	e4 0f       	add	r30, r20
     60a:	f5 1f       	adc	r31, r21
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	4d 91       	ld	r20, X+
     610:	5c 91       	ld	r21, X
     612:	e4 0f       	add	r30, r20
     614:	f5 1f       	adc	r31, r21
     616:	e8 1b       	sub	r30, r24
     618:	f9 0b       	sbc	r31, r25
     61a:	d9 01       	movw	r26, r18
     61c:	aa 5f       	subi	r26, 0xFA	; 250
     61e:	be 4f       	sbci	r27, 0xFE	; 254
     620:	6d 91       	ld	r22, X+
     622:	7c 91       	ld	r23, X
     624:	11 97       	sbiw	r26, 0x01	; 1
     626:	14 96       	adiw	r26, 0x04	; 4
     628:	4d 91       	ld	r20, X+
     62a:	5c 91       	ld	r21, X
     62c:	11 97       	sbiw	r26, 0x01	; 1
     62e:	46 0f       	add	r20, r22
     630:	57 1f       	adc	r21, r23
     632:	12 96       	adiw	r26, 0x02	; 2
     634:	6d 91       	ld	r22, X+
     636:	7c 91       	ld	r23, X
     638:	46 0f       	add	r20, r22
     63a:	57 1f       	adc	r21, r23
     63c:	48 1b       	sub	r20, r24
     63e:	59 0b       	sbc	r21, r25
     640:	e4 17       	cp	r30, r20
     642:	f5 07       	cpc	r31, r21
     644:	20 f5       	brcc	.+72     	; 0x68e <_ZL7enqueueP7queue_tP9td_struct+0xee>
     646:	16 c0       	rjmp	.+44     	; 0x674 <_ZL7enqueueP7queue_tP9td_struct+0xd4>
     648:	d9 01       	movw	r26, r18
     64a:	aa 5f       	subi	r26, 0xFA	; 250
     64c:	be 4f       	sbci	r27, 0xFE	; 254
     64e:	6d 91       	ld	r22, X+
     650:	7c 91       	ld	r23, X
     652:	11 97       	sbiw	r26, 0x01	; 1
     654:	14 96       	adiw	r26, 0x04	; 4
     656:	4d 91       	ld	r20, X+
     658:	5c 91       	ld	r21, X
     65a:	11 97       	sbiw	r26, 0x01	; 1
     65c:	46 0f       	add	r20, r22
     65e:	57 1f       	adc	r21, r23
     660:	12 96       	adiw	r26, 0x02	; 2
     662:	6d 91       	ld	r22, X+
     664:	7c 91       	ld	r23, X
     666:	46 0f       	add	r20, r22
     668:	57 1f       	adc	r21, r23
     66a:	48 1b       	sub	r20, r24
     66c:	59 0b       	sbc	r21, r25
     66e:	e4 17       	cp	r30, r20
     670:	f5 07       	cpc	r31, r21
     672:	68 f4       	brcc	.+26     	; 0x68e <_ZL7enqueueP7queue_tP9td_struct+0xee>
			{
				task_to_add->next = head_ptr->next;
     674:	f9 01       	movw	r30, r18
     676:	e1 5f       	subi	r30, 0xF1	; 241
     678:	fe 4f       	sbci	r31, 0xFE	; 254
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	de 01       	movw	r26, r28
     680:	a1 5f       	subi	r26, 0xF1	; 241
     682:	be 4f       	sbci	r27, 0xFE	; 254
     684:	8d 93       	st	X+, r24
     686:	9c 93       	st	X, r25
				head_ptr->next = task_to_add;
     688:	d1 83       	std	Z+1, r29	; 0x01
     68a:	c0 83       	st	Z, r28
				return;
     68c:	15 c0       	rjmp	.+42     	; 0x6b8 <_ZL7enqueueP7queue_tP9td_struct+0x118>
			}
			
			head_ptr = head_ptr->next;
     68e:	d9 01       	movw	r26, r18
     690:	a1 5f       	subi	r26, 0xF1	; 241
     692:	be 4f       	sbci	r27, 0xFE	; 254
     694:	2d 91       	ld	r18, X+
     696:	3c 91       	ld	r19, X
	
	if(task_to_add->level == PERIODIC) 
	{
		uint16_t now = Now();
		task_descriptor_t* head_ptr = queue_ptr->head;
		while(head_ptr != NULL)
     698:	21 15       	cp	r18, r1
     69a:	31 05       	cpc	r19, r1
     69c:	a9 f6       	brne	.-86     	; 0x648 <_ZL7enqueueP7queue_tP9td_struct+0xa8>
			head_ptr = head_ptr->next;
		}
	}

	/* put task at the back of the queue */
	queue_ptr->tail->next = task_to_add;
     69e:	d8 01       	movw	r26, r16
     6a0:	12 96       	adiw	r26, 0x02	; 2
     6a2:	ed 91       	ld	r30, X+
     6a4:	fc 91       	ld	r31, X
     6a6:	13 97       	sbiw	r26, 0x03	; 3
     6a8:	e1 5f       	subi	r30, 0xF1	; 241
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	d1 83       	std	Z+1, r29	; 0x01
     6ae:	c0 83       	st	Z, r28
	queue_ptr->tail = task_to_add;
     6b0:	13 96       	adiw	r26, 0x03	; 3
     6b2:	dc 93       	st	X, r29
     6b4:	ce 93       	st	-X, r28
     6b6:	12 97       	sbiw	r26, 0x02	; 2
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <_ZL18kernel_create_taskv>:
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;


    if (dead_pool_queue.head == NULL)
     6c2:	80 91 1a 02 	lds	r24, 0x021A
     6c6:	90 91 1b 02 	lds	r25, 0x021B
     6ca:	89 2b       	or	r24, r25
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <_ZL18kernel_create_taskv+0xe>
     6ce:	7e c0       	rjmp	.+252    	; 0x7cc <_ZL18kernel_create_taskv+0x10a>
        /* Too many tasks! */
        return 0;
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == 0)//NULL)
     6d0:	80 91 24 02 	lds	r24, 0x0224
     6d4:	88 23       	and	r24, r24
     6d6:	29 f0       	breq	.+10     	; 0x6e2 <_ZL18kernel_create_taskv+0x20>
		p = &task_desc[MAXPROCESS];
	}
	/* Find an unused descriptor. */
	else
	{
	    p = dequeue(&dead_pool_queue);
     6d8:	8a e1       	ldi	r24, 0x1A	; 26
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	1b de       	rcall	.-970    	; 0x314 <_ZL7dequeueP7queue_t>
     6de:	bc 01       	movw	r22, r24
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <_ZL18kernel_create_taskv+0x24>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == 0)//NULL)
	{
		p = &task_desc[MAXPROCESS];
     6e2:	64 eb       	ldi	r22, 0xB4	; 180
     6e4:	7a e0       	ldi	r23, 0x0A	; 10
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
     6e6:	fb 01       	movw	r30, r22
     6e8:	e7 52       	subi	r30, 0x27	; 39
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	10 82       	st	Z, r1
    /* stack_top[31] is r30. */
	stack_top[32] = 0xEE;
     6ee:	8e ee       	ldi	r24, 0xEE	; 238
     6f0:	7e 96       	adiw	r30, 0x1e	; 30
     6f2:	80 83       	st	Z, r24
    stack_top[33] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
     6f4:	80 e8       	ldi	r24, 0x80	; 128
     6f6:	31 96       	adiw	r30, 0x01	; 1
     6f8:	80 83       	st	Z, r24
     * onto the stack in reverse byte order (least significant first, followed
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
	stack_top[35] = (uint8_t)(0);
     6fa:	32 96       	adiw	r30, 0x02	; 2
     6fc:	10 82       	st	Z, r1
    stack_top[36] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
     6fe:	e0 e2       	ldi	r30, 0x20	; 32
     700:	f2 e0       	ldi	r31, 0x02	; 2
     702:	80 81       	ld	r24, Z
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	db 01       	movw	r26, r22
     708:	a5 50       	subi	r26, 0x05	; 5
     70a:	bf 4f       	sbci	r27, 0xFF	; 255
     70c:	9c 93       	st	X, r25
    stack_top[37] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
     70e:	80 81       	ld	r24, Z
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	fb 01       	movw	r30, r22
     714:	e4 50       	subi	r30, 0x04	; 4
     716:	ff 4f       	sbci	r31, 0xFF	; 255
     718:	80 83       	st	Z, r24
    stack_top[38] = (uint8_t)(0);
     71a:	31 96       	adiw	r30, 0x01	; 1
     71c:	10 82       	st	Z, r1
	stack_top[39] = (uint8_t)((uint16_t)Task_Terminate >> 8);
     71e:	8a e9       	ldi	r24, 0x9A	; 154
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	31 96       	adiw	r30, 0x01	; 1
     724:	90 83       	st	Z, r25
    stack_top[40] = (uint8_t)(uint16_t)Task_Terminate;
     726:	31 96       	adiw	r30, 0x01	; 1
     728:	80 83       	st	Z, r24

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
     72a:	31 96       	adiw	r30, 0x01	; 1
     72c:	cb 01       	movw	r24, r22
     72e:	89 52       	subi	r24, 0x29	; 41
     730:	9f 4f       	sbci	r25, 0xFF	; 255
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	80 83       	st	Z, r24

    p->state = READY;
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	32 96       	adiw	r30, 0x02	; 2
     73a:	80 83       	st	Z, r24
    p->arg = kernel_request_create_args.arg;
     73c:	80 91 22 02 	lds	r24, 0x0222
     740:	90 91 23 02 	lds	r25, 0x0223
     744:	31 96       	adiw	r30, 0x01	; 1
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
    p->level = kernel_request_create_args.level;
     74a:	80 91 24 02 	lds	r24, 0x0224
     74e:	32 96       	adiw	r30, 0x02	; 2
     750:	80 83       	st	Z, r24
	if (p->level == PERIODIC) 
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	01 f5       	brne	.+64     	; 0x796 <_ZL18kernel_create_taskv+0xd4>
	{
		p->offset = kernel_request_create_args.start - kernel_request_create_args.period;
     756:	80 91 29 02 	lds	r24, 0x0229
     75a:	90 91 2a 02 	lds	r25, 0x022A
     75e:	e5 e2       	ldi	r30, 0x25	; 37
     760:	f2 e0       	ldi	r31, 0x02	; 2
     762:	20 81       	ld	r18, Z
     764:	31 81       	ldd	r19, Z+1	; 0x01
     766:	1f 96       	adiw	r26, 0x0f	; 15
     768:	82 1b       	sub	r24, r18
     76a:	93 0b       	sbc	r25, r19
     76c:	8d 93       	st	X+, r24
     76e:	9c 93       	st	X, r25
		p->period = kernel_request_create_args.period;
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	fb 01       	movw	r30, r22
     776:	ea 5f       	subi	r30, 0xFA	; 250
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	91 83       	std	Z+1, r25	; 0x01
     77c:	80 83       	st	Z, r24
		p->wcet = kernel_request_create_args.wcet;
     77e:	80 91 27 02 	lds	r24, 0x0227
     782:	90 91 28 02 	lds	r25, 0x0228
     786:	32 96       	adiw	r30, 0x02	; 2
     788:	91 83       	std	Z+1, r25	; 0x01
     78a:	80 83       	st	Z, r24
		p->last = (uint16_t) 0;
     78c:	34 96       	adiw	r30, 0x04	; 4
     78e:	11 82       	std	Z+1, r1	; 0x01
     790:	10 82       	st	Z, r1
		p->ran_once = false;
     792:	32 96       	adiw	r30, 0x02	; 2
     794:	10 82       	st	Z, r1
	}
	switch(kernel_request_create_args.level)
     796:	80 91 24 02 	lds	r24, 0x0224
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	29 f0       	breq	.+10     	; 0x7a8 <_ZL18kernel_create_taskv+0xe6>
     79e:	83 30       	cpi	r24, 0x03	; 3
     7a0:	49 f0       	breq	.+18     	; 0x7b4 <_ZL18kernel_create_taskv+0xf2>
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	b1 f4       	brne	.+44     	; 0x7d2 <_ZL18kernel_create_taskv+0x110>
     7a6:	0c c0       	rjmp	.+24     	; 0x7c0 <_ZL18kernel_create_taskv+0xfe>
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic_queue */
		enqueue(&periodic_queue, p);
     7a8:	8e e0       	ldi	r24, 0x0E	; 14
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	f9 de       	rcall	.-526    	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
	switch(kernel_request_create_args.level)
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic_queue */
		enqueue(&periodic_queue, p);
		break;
     7b2:	08 95       	ret

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
     7b4:	82 e1       	ldi	r24, 0x12	; 18
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	f3 de       	rcall	.-538    	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
		break;
     7be:	08 95       	ret

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
     7c0:	86 e1       	ldi	r24, 0x16	; 22
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	ed de       	rcall	.-550    	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
		break;
     7ca:	08 95       	ret


    if (dead_pool_queue.head == NULL)
    {
        /* Too many tasks! */
        return 0;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	08 95       	ret
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
}
     7d6:	08 95       	ret

000007d8 <_Z7OS_Initv>:
{	
    int i;

    /* Set up the clocks */

    TCCR1B |= (_BV(CS11));
     7d8:	e1 e8       	ldi	r30, 0x81	; 129
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	82 60       	ori	r24, 0x02	; 2
     7e0:	80 83       	st	Z, r24
     7e2:	ee e2       	ldi	r30, 0x2E	; 46
     7e4:	f3 e0       	ldi	r31, 0x03	; 3
     7e6:	25 ea       	ldi	r18, 0xA5	; 165
     7e8:	3a e0       	ldi	r19, 0x0A	; 10
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    {
        task_desc[i].state = DEAD;
     7ea:	10 82       	st	Z, r1
     7ec:	cf 01       	movw	r24, r30
     7ee:	0f 96       	adiw	r24, 0x0f	; 15
/*        name_to_task_ptr[i] = NULL;*/
        task_desc[i].next = &task_desc[i + 1];
     7f0:	96 87       	std	Z+14, r25	; 0x0e
     7f2:	85 87       	std	Z+13, r24	; 0x0d
     7f4:	ef 5e       	subi	r30, 0xEF	; 239
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
    /*
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
     7f8:	e2 17       	cp	r30, r18
     7fa:	f3 07       	cpc	r31, r19
     7fc:	b1 f7       	brne	.-20     	; 0x7ea <_Z7OS_Initv+0x12>
    {
        task_desc[i].state = DEAD;
/*        name_to_task_ptr[i] = NULL;*/
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[MAXPROCESS - 1].next = NULL;
     7fe:	10 92 b3 0a 	sts	0x0AB3, r1
     802:	10 92 b2 0a 	sts	0x0AB2, r1
    dead_pool_queue.head = &task_desc[0];
     806:	0f 2e       	mov	r0, r31
     808:	fc e2       	ldi	r31, 0x2C	; 44
     80a:	ef 2e       	mov	r14, r31
     80c:	f2 e0       	ldi	r31, 0x02	; 2
     80e:	ff 2e       	mov	r15, r31
     810:	f0 2d       	mov	r31, r0
     812:	f0 92 1b 02 	sts	0x021B, r15
     816:	e0 92 1a 02 	sts	0x021A, r14
    dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
     81a:	83 ea       	ldi	r24, 0xA3	; 163
     81c:	99 e0       	ldi	r25, 0x09	; 9
     81e:	90 93 1d 02 	sts	0x021D, r25
     822:	80 93 1c 02 	sts	0x021C, r24

	/* Create idle "task" */
    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
     826:	00 e2       	ldi	r16, 0x20	; 32
     828:	12 e0       	ldi	r17, 0x02	; 2
     82a:	87 ed       	ldi	r24, 0xD7	; 215
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	f8 01       	movw	r30, r16
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
    kernel_request_create_args.level = IDLE;
     834:	c4 e2       	ldi	r28, 0x24	; 36
     836:	d2 e0       	ldi	r29, 0x02	; 2
     838:	18 82       	st	Y, r1
    kernel_create_task();
     83a:	43 df       	rcall	.-378    	; 0x6c2 <_ZL18kernel_create_taskv>

    /* Create "main" task as SYSTEM level. */
    kernel_request_create_args.f = (voidfuncvoid_ptr)r_main;
     83c:	87 eb       	ldi	r24, 0xB7	; 183
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	f8 01       	movw	r30, r16
     842:	91 83       	std	Z+1, r25	; 0x01
     844:	80 83       	st	Z, r24
    kernel_request_create_args.level = SYSTEM;
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	88 83       	st	Y, r24
    kernel_create_task();
     84a:	3b df       	rcall	.-394    	; 0x6c2 <_ZL18kernel_create_taskv>

    /* First time through. Select "main" task to run first. */
    cur_task = task_desc;
     84c:	f0 92 c8 0b 	sts	0x0BC8, r15
     850:	e0 92 c7 0b 	sts	0x0BC7, r14
    cur_task->state = RUNNING;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 2e 03 	sts	0x032E, r24
    dequeue(&system_queue);
     85a:	82 e1       	ldi	r24, 0x12	; 18
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	5a dd       	rcall	.-1356   	; 0x314 <_ZL7dequeueP7queue_t>

    /* Set up Timer 1 Output Compare interrupt,the TICK clock. */
    TIMSK1 |= _BV(OCIE1A);
     860:	ef e6       	ldi	r30, 0x6F	; 111
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	82 60       	ori	r24, 0x02	; 2
     868:	80 83       	st	Z, r24
    OCR1A = TCNT1 + TICK_CYCLES;
     86a:	80 91 84 00 	lds	r24, 0x0084
     86e:	90 91 85 00 	lds	r25, 0x0085
     872:	80 5f       	subi	r24, 0xF0	; 240
     874:	98 4d       	sbci	r25, 0xD8	; 216
     876:	90 93 89 00 	sts	0x0089, r25
     87a:	80 93 88 00 	sts	0x0088, r24
    /* Clear flag. */
    TIFR1 = _BV(OCF1A);
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	86 bb       	out	0x16, r24	; 22
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    {
		if(system_queue.head != NULL)
     882:	c2 e1       	ldi	r28, 0x12	; 18
     884:	d2 e0       	ldi	r29, 0x02	; 2
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }

        cur_task->state = RUNNING;
     886:	77 24       	eor	r7, r7
     888:	73 94       	inc	r7
    {
		if(system_queue.head != NULL)
        {
            cur_task = dequeue(&system_queue);
        }
        else if (periodic_queue.head != NULL && ((Now() - periodic_queue.head->last) >= periodic_queue.head->offset + periodic_queue.head->period))
     88a:	0e e0       	ldi	r16, 0x0E	; 14
     88c:	12 e0       	ldi	r17, 0x02	; 2
        {
			/* Keep running the current PERIODIC task. */
			cur_task = dequeue(&periodic_queue);
			cur_task->last = Now();
        }
        else if(rr_queue.head != NULL)
     88e:	0f 2e       	mov	r0, r31
     890:	f6 e1       	ldi	r31, 0x16	; 22
     892:	ef 2e       	mov	r14, r31
     894:	f2 e0       	ldi	r31, 0x02	; 2
     896:	ff 2e       	mov	r15, r31
     898:	f0 2d       	mov	r31, r0
            cur_task = dequeue(&rr_queue);
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     89a:	0f 2e       	mov	r0, r31
     89c:	f4 eb       	ldi	r31, 0xB4	; 180
     89e:	af 2e       	mov	r10, r31
     8a0:	fa e0       	ldi	r31, 0x0A	; 10
     8a2:	bf 2e       	mov	r11, r31
     8a4:	f0 2d       	mov	r31, r0
         * making the request.
         */
        if(kernel_request_retval)
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
     8a6:	0f 2e       	mov	r0, r31
     8a8:	f4 e2       	ldi	r31, 0x24	; 36
     8aa:	cf 2e       	mov	r12, r31
     8ac:	f2 e0       	ldi	r31, 0x02	; 2
     8ae:	df 2e       	mov	r13, r31
     8b0:	f0 2d       	mov	r31, r0

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
               kernel_request_create_args.level == PERIODIC)
            {
                cur_task->state = READY;
     8b2:	68 94       	set
     8b4:	66 24       	eor	r6, r6
     8b6:	61 f8       	bld	r6, 1
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
     8b8:	80 91 c7 0b 	lds	r24, 0x0BC7
     8bc:	90 91 c8 0b 	lds	r25, 0x0BC8
     8c0:	fc 01       	movw	r30, r24
     8c2:	ee 5f       	subi	r30, 0xFE	; 254
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	20 81       	ld	r18, Z
     8c8:	21 30       	cpi	r18, 0x01	; 1
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <_Z7OS_Initv+0xfc>
     8cc:	84 5b       	subi	r24, 0xB4	; 180
     8ce:	9a 40       	sbci	r25, 0x0A	; 10
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <_Z7OS_Initv+0xfc>
     8d2:	4d c0       	rjmp	.+154    	; 0x96e <_Z7OS_Initv+0x196>
    {
		if(system_queue.head != NULL)
     8d4:	88 81       	ld	r24, Y
     8d6:	99 81       	ldd	r25, Y+1	; 0x01
     8d8:	89 2b       	or	r24, r25
     8da:	39 f0       	breq	.+14     	; 0x8ea <_Z7OS_Initv+0x112>
        {
            cur_task = dequeue(&system_queue);
     8dc:	ce 01       	movw	r24, r28
     8de:	1a dd       	rcall	.-1484   	; 0x314 <_ZL7dequeueP7queue_t>
     8e0:	90 93 c8 0b 	sts	0x0BC8, r25
     8e4:	80 93 c7 0b 	sts	0x0BC7, r24
     8e8:	3b c0       	rjmp	.+118    	; 0x960 <_Z7OS_Initv+0x188>
        }
        else if (periodic_queue.head != NULL && ((Now() - periodic_queue.head->last) >= periodic_queue.head->offset + periodic_queue.head->period))
     8ea:	f8 01       	movw	r30, r16
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	89 2b       	or	r24, r25
     8f2:	31 f1       	breq	.+76     	; 0x940 <_Z7OS_Initv+0x168>
     8f4:	33 de       	rcall	.-922    	; 0x55c <Now>
     8f6:	f8 01       	movw	r30, r16
     8f8:	20 81       	ld	r18, Z
     8fa:	31 81       	ldd	r19, Z+1	; 0x01
     8fc:	f9 01       	movw	r30, r18
     8fe:	e4 5f       	subi	r30, 0xF4	; 244
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	40 81       	ld	r20, Z
     904:	51 81       	ldd	r21, Z+1	; 0x01
     906:	84 1b       	sub	r24, r20
     908:	95 0b       	sbc	r25, r21
     90a:	36 97       	sbiw	r30, 0x06	; 6
     90c:	d9 01       	movw	r26, r18
     90e:	a6 5f       	subi	r26, 0xF6	; 246
     910:	be 4f       	sbci	r27, 0xFE	; 254
     912:	40 81       	ld	r20, Z
     914:	51 81       	ldd	r21, Z+1	; 0x01
     916:	2d 91       	ld	r18, X+
     918:	3c 91       	ld	r19, X
     91a:	24 0f       	add	r18, r20
     91c:	35 1f       	adc	r19, r21
     91e:	82 17       	cp	r24, r18
     920:	93 07       	cpc	r25, r19
     922:	70 f0       	brcs	.+28     	; 0x940 <_Z7OS_Initv+0x168>
        {
			/* Keep running the current PERIODIC task. */
			cur_task = dequeue(&periodic_queue);
     924:	c8 01       	movw	r24, r16
     926:	f6 dc       	rcall	.-1556   	; 0x314 <_ZL7dequeueP7queue_t>
     928:	4c 01       	movw	r8, r24
     92a:	90 93 c8 0b 	sts	0x0BC8, r25
     92e:	80 93 c7 0b 	sts	0x0BC7, r24
			cur_task->last = Now();
     932:	14 de       	rcall	.-984    	; 0x55c <Now>
     934:	f4 01       	movw	r30, r8
     936:	e4 5f       	subi	r30, 0xF4	; 244
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	91 83       	std	Z+1, r25	; 0x01
     93c:	80 83       	st	Z, r24
     93e:	10 c0       	rjmp	.+32     	; 0x960 <_Z7OS_Initv+0x188>
        }
        else if(rr_queue.head != NULL)
     940:	f7 01       	movw	r30, r14
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	89 2b       	or	r24, r25
     948:	39 f0       	breq	.+14     	; 0x958 <_Z7OS_Initv+0x180>
        {
            cur_task = dequeue(&rr_queue);
     94a:	c7 01       	movw	r24, r14
     94c:	e3 dc       	rcall	.-1594   	; 0x314 <_ZL7dequeueP7queue_t>
     94e:	90 93 c8 0b 	sts	0x0BC8, r25
     952:	80 93 c7 0b 	sts	0x0BC7, r24
     956:	04 c0       	rjmp	.+8      	; 0x960 <_Z7OS_Initv+0x188>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     958:	b0 92 c8 0b 	sts	0x0BC8, r11
     95c:	a0 92 c7 0b 	sts	0x0BC7, r10
        }

        cur_task->state = RUNNING;
     960:	e0 91 c7 0b 	lds	r30, 0x0BC7
     964:	f0 91 c8 0b 	lds	r31, 0x0BC8
     968:	ee 5f       	subi	r30, 0xFE	; 254
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	70 82       	st	Z, r7
{
    for(;;)
    {
        kernel_dispatch();

        exit_kernel();
     96e:	20 dc       	rcall	.-1984   	; 0x1b0 <_ZL11exit_kernelv>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waiting queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
     970:	80 91 2b 02 	lds	r24, 0x022B
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	09 f4       	brne	.+2      	; 0x97a <_Z7OS_Initv+0x1a2>
     978:	4f c0       	rjmp	.+158    	; 0xa18 <_Z7OS_Initv+0x240>
     97a:	30 f4       	brcc	.+12     	; 0x988 <_Z7OS_Initv+0x1b0>
     97c:	88 23       	and	r24, r24
     97e:	09 f4       	brne	.+2      	; 0x982 <_Z7OS_Initv+0x1aa>
     980:	be c0       	rjmp	.+380    	; 0xafe <_Z7OS_Initv+0x326>
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	51 f0       	breq	.+20     	; 0x99a <_Z7OS_Initv+0x1c2>
     986:	b7 c0       	rjmp	.+366    	; 0xaf6 <_Z7OS_Initv+0x31e>
     988:	84 30       	cpi	r24, 0x04	; 4
     98a:	09 f4       	brne	.+2      	; 0x98e <_Z7OS_Initv+0x1b6>
     98c:	8b c0       	rjmp	.+278    	; 0xaa4 <_Z7OS_Initv+0x2cc>
     98e:	08 f4       	brcc	.+2      	; 0x992 <_Z7OS_Initv+0x1ba>
     990:	79 c0       	rjmp	.+242    	; 0xa84 <_Z7OS_Initv+0x2ac>
     992:	85 30       	cpi	r24, 0x05	; 5
     994:	09 f4       	brne	.+2      	; 0x998 <_Z7OS_Initv+0x1c0>
     996:	b3 c0       	rjmp	.+358    	; 0xafe <_Z7OS_Initv+0x326>
     998:	ae c0       	rjmp	.+348    	; 0xaf6 <_Z7OS_Initv+0x31e>
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */
   
	/* If Periodic task still running then error more than wcet */
	if(cur_task != NULL && cur_task->level == PERIODIC && cur_task->state == RUNNING)
     99a:	80 90 c7 0b 	lds	r8, 0x0BC7
     99e:	90 90 c8 0b 	lds	r9, 0x0BC8
     9a2:	81 14       	cp	r8, r1
     9a4:	91 04       	cpc	r9, r1
     9a6:	39 f1       	breq	.+78     	; 0x9f6 <_Z7OS_Initv+0x21e>
     9a8:	f4 01       	movw	r30, r8
     9aa:	eb 5f       	subi	r30, 0xFB	; 251
     9ac:	fe 4f       	sbci	r31, 0xFE	; 254
     9ae:	80 81       	ld	r24, Z
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	09 f5       	brne	.+66     	; 0x9f6 <_Z7OS_Initv+0x21e>
     9b4:	33 97       	sbiw	r30, 0x03	; 3
     9b6:	80 81       	ld	r24, Z
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	09 f0       	breq	.+2      	; 0x9be <_Z7OS_Initv+0x1e6>
     9bc:	a0 c0       	rjmp	.+320    	; 0xafe <_Z7OS_Initv+0x326>
	{
		if ((Now() - cur_task->last) > (cur_task->offset + cur_task->period + cur_task->wcet))
     9be:	ce dd       	rcall	.-1124   	; 0x55c <Now>
     9c0:	f4 01       	movw	r30, r8
     9c2:	e4 5f       	subi	r30, 0xF4	; 244
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	20 81       	ld	r18, Z
     9c8:	31 81       	ldd	r19, Z+1	; 0x01
     9ca:	82 1b       	sub	r24, r18
     9cc:	93 0b       	sbc	r25, r19
     9ce:	36 97       	sbiw	r30, 0x06	; 6
     9d0:	40 81       	ld	r20, Z
     9d2:	51 81       	ldd	r21, Z+1	; 0x01
     9d4:	34 96       	adiw	r30, 0x04	; 4
     9d6:	20 81       	ld	r18, Z
     9d8:	31 81       	ldd	r19, Z+1	; 0x01
     9da:	24 0f       	add	r18, r20
     9dc:	35 1f       	adc	r19, r21
     9de:	32 97       	sbiw	r30, 0x02	; 2
     9e0:	40 81       	ld	r20, Z
     9e2:	51 81       	ldd	r21, Z+1	; 0x01
     9e4:	24 0f       	add	r18, r20
     9e6:	35 1f       	adc	r19, r21
     9e8:	28 17       	cp	r18, r24
     9ea:	39 07       	cpc	r19, r25
     9ec:	20 f4       	brcc	.+8      	; 0x9f6 <_Z7OS_Initv+0x21e>
		{
			/* error handling */
			error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	80 93 02 02 	sts	0x0202, r24
			OS_Abort();
     9f4:	1d dd       	rcall	.-1478   	; 0x430 <OS_Abort>

    case TIMER_EXPIRED:
        kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
     9f6:	f4 01       	movw	r30, r8
     9f8:	eb 5f       	subi	r30, 0xFB	; 251
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	80 81       	ld	r24, Z
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	09 f0       	breq	.+2      	; 0xa04 <_Z7OS_Initv+0x22c>
     a02:	7d c0       	rjmp	.+250    	; 0xafe <_Z7OS_Initv+0x326>
     a04:	33 97       	sbiw	r30, 0x03	; 3
     a06:	80 81       	ld	r24, Z
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	09 f0       	breq	.+2      	; 0xa0e <_Z7OS_Initv+0x236>
     a0c:	78 c0       	rjmp	.+240    	; 0xafe <_Z7OS_Initv+0x326>
        {
            cur_task->state = READY;
     a0e:	60 82       	st	Z, r6
            enqueue(&rr_queue, cur_task);
     a10:	b4 01       	movw	r22, r8
     a12:	c7 01       	movw	r24, r14
     a14:	c5 dd       	rcall	.-1142   	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
     a16:	73 c0       	rjmp	.+230    	; 0xafe <_Z7OS_Initv+0x326>
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
     a18:	54 de       	rcall	.-856    	; 0x6c2 <_ZL18kernel_create_taskv>
     a1a:	90 93 1f 02 	sts	0x021F, r25
     a1e:	80 93 1e 02 	sts	0x021E, r24

        /* Check if new task has higher priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
     a22:	80 91 1e 02 	lds	r24, 0x021E
     a26:	90 91 1f 02 	lds	r25, 0x021F
     a2a:	89 2b       	or	r24, r25
     a2c:	09 f4       	brne	.+2      	; 0xa30 <_Z7OS_Initv+0x258>
     a2e:	67 c0       	rjmp	.+206    	; 0xafe <_Z7OS_Initv+0x326>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
     a30:	f6 01       	movw	r30, r12
     a32:	80 81       	ld	r24, Z
     a34:	83 30       	cpi	r24, 0x03	; 3
     a36:	61 f4       	brne	.+24     	; 0xa50 <_Z7OS_Initv+0x278>
     a38:	80 91 c7 0b 	lds	r24, 0x0BC7
     a3c:	90 91 c8 0b 	lds	r25, 0x0BC8
     a40:	fc 01       	movw	r30, r24
     a42:	eb 5f       	subi	r30, 0xFB	; 251
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	20 81       	ld	r18, Z
     a48:	23 30       	cpi	r18, 0x03	; 3
     a4a:	09 f0       	breq	.+2      	; 0xa4e <_Z7OS_Initv+0x276>
     a4c:	5b c0       	rjmp	.+182    	; 0xb04 <_Z7OS_Initv+0x32c>
     a4e:	57 c0       	rjmp	.+174    	; 0xafe <_Z7OS_Initv+0x326>
            {
                cur_task->state = READY;
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
     a50:	60 91 c7 0b 	lds	r22, 0x0BC7
     a54:	70 91 c8 0b 	lds	r23, 0x0BC8
     a58:	fb 01       	movw	r30, r22
     a5a:	eb 5f       	subi	r30, 0xFB	; 251
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
     a5e:	80 81       	ld	r24, Z
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f0       	breq	.+2      	; 0xa66 <_Z7OS_Initv+0x28e>
     a64:	4c c0       	rjmp	.+152    	; 0xafe <_Z7OS_Initv+0x326>
               kernel_request_create_args.level == PERIODIC)
     a66:	f6 01       	movw	r30, r12
     a68:	80 81       	ld	r24, Z
            {
                cur_task->state = READY;
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	09 f4       	brne	.+2      	; 0xa70 <_Z7OS_Initv+0x298>
     a6e:	4f c0       	rjmp	.+158    	; 0xb0e <_Z7OS_Initv+0x336>
            {
                cur_task->state = READY;
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
     a70:	fb 01       	movw	r30, r22
     a72:	ee 5f       	subi	r30, 0xFE	; 254
     a74:	fe 4f       	sbci	r31, 0xFE	; 254
     a76:	80 81       	ld	r24, Z
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	09 f0       	breq	.+2      	; 0xa7e <_Z7OS_Initv+0x2a6>
     a7c:	40 c0       	rjmp	.+128    	; 0xafe <_Z7OS_Initv+0x326>
            {
                enqueue(&rr_queue, cur_task);
     a7e:	c7 01       	movw	r24, r14
     a80:	8f dd       	rcall	.-1250   	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
     a82:	3d c0       	rjmp	.+122    	; 0xafe <_Z7OS_Initv+0x326>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
     a84:	60 91 c7 0b 	lds	r22, 0x0BC7
     a88:	70 91 c8 0b 	lds	r23, 0x0BC8
     a8c:	fa e0       	ldi	r31, 0x0A	; 10
     a8e:	64 3b       	cpi	r22, 0xB4	; 180
     a90:	7f 07       	cpc	r23, r31
     a92:	a9 f1       	breq	.+106    	; 0xafe <_Z7OS_Initv+0x326>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
     a94:	fb 01       	movw	r30, r22
     a96:	ee 5f       	subi	r30, 0xFE	; 254
     a98:	fe 4f       	sbci	r31, 0xFE	; 254
     a9a:	10 82       	st	Z, r1
    enqueue(&dead_pool_queue, cur_task);
     a9c:	8a e1       	ldi	r24, 0x1A	; 26
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	7f dd       	rcall	.-1282   	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
     aa2:	2d c0       	rjmp	.+90     	; 0xafe <_Z7OS_Initv+0x326>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
     aa4:	80 90 c7 0b 	lds	r8, 0x0BC7
     aa8:	90 90 c8 0b 	lds	r9, 0x0BC8
     aac:	f4 01       	movw	r30, r8
     aae:	eb 5f       	subi	r30, 0xFB	; 251
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	49 f0       	breq	.+18     	; 0xaca <_Z7OS_Initv+0x2f2>
     ab8:	83 30       	cpi	r24, 0x03	; 3
     aba:	19 f0       	breq	.+6      	; 0xac2 <_Z7OS_Initv+0x2ea>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	b1 f4       	brne	.+44     	; 0xaec <_Z7OS_Initv+0x314>
     ac0:	12 c0       	rjmp	.+36     	; 0xae6 <_Z7OS_Initv+0x30e>
		{
	    case SYSTEM:
	        enqueue(&system_queue, cur_task);
     ac2:	b4 01       	movw	r22, r8
     ac4:	ce 01       	movw	r24, r28
     ac6:	6c dd       	rcall	.-1320   	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
     ac8:	11 c0       	rjmp	.+34     	; 0xaec <_Z7OS_Initv+0x314>
			break;

	    case PERIODIC:
			if (!cur_task->ran_once)
     aca:	f4 01       	movw	r30, r8
     acc:	e2 5f       	subi	r30, 0xF2	; 242
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 81       	ld	r24, Z
     ad2:	81 11       	cpse	r24, r1
     ad4:	04 c0       	rjmp	.+8      	; 0xade <_Z7OS_Initv+0x306>
			{
				cur_task->ran_once = true;
     ad6:	70 82       	st	Z, r7
				cur_task->offset = (uint16_t) 0;
     ad8:	34 97       	sbiw	r30, 0x04	; 4
     ada:	11 82       	std	Z+1, r1	; 0x01
     adc:	10 82       	st	Z, r1
			}
	        enqueue(&periodic_queue, cur_task);
     ade:	b4 01       	movw	r22, r8
     ae0:	c8 01       	movw	r24, r16
     ae2:	5e dd       	rcall	.-1348   	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <_Z7OS_Initv+0x314>
	        break;

	    case RR:
	        enqueue(&rr_queue, cur_task);
     ae6:	b4 01       	movw	r22, r8
     ae8:	c7 01       	movw	r24, r14
     aea:	5a dd       	rcall	.-1356   	; 0x5a0 <_ZL7enqueueP7queue_tP9td_struct>

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
     aec:	f4 01       	movw	r30, r8
     aee:	ee 5f       	subi	r30, 0xFE	; 254
     af0:	fe 4f       	sbci	r31, 0xFE	; 254
     af2:	60 82       	st	Z, r6
     af4:	04 c0       	rjmp	.+8      	; 0xafe <_Z7OS_Initv+0x326>
        /* Should not happen. Handled in task itself. */
        break;
		
    default:
        /* Should never happen */
        error_msg = ERR_RUN_5_RTOS_INTERNAL_ERROR;
     af6:	85 e0       	ldi	r24, 0x05	; 5
     af8:	80 93 02 02 	sts	0x0202, r24
        OS_Abort();
     afc:	99 dc       	rcall	.-1742   	; 0x430 <OS_Abort>
        break;
    }

    kernel_request = NONE;
     afe:	10 92 2b 02 	sts	0x022B, r1
     b02:	da ce       	rjmp	.-588    	; 0x8b8 <_Z7OS_Initv+0xe0>
        if(kernel_request_retval)
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
            {
                cur_task->state = READY;
     b04:	fc 01       	movw	r30, r24
     b06:	ee 5f       	subi	r30, 0xFE	; 254
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	60 82       	st	Z, r6
     b0c:	a1 cf       	rjmp	.-190    	; 0xa50 <_Z7OS_Initv+0x278>

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
               kernel_request_create_args.level == PERIODIC)
            {
                cur_task->state = READY;
     b0e:	fb 01       	movw	r30, r22
     b10:	ee 5f       	subi	r30, 0xFE	; 254
     b12:	fe 4f       	sbci	r31, 0xFE	; 254
     b14:	60 82       	st	Z, r6
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
     b16:	33 96       	adiw	r30, 0x03	; 3
     b18:	80 81       	ld	r24, Z
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	09 f4       	brne	.+2      	; 0xb20 <_Z7OS_Initv+0x348>
     b1e:	a8 cf       	rjmp	.-176    	; 0xa70 <_Z7OS_Initv+0x298>
     b20:	ee cf       	rjmp	.-36     	; 0xafe <_Z7OS_Initv+0x326>

00000b22 <main>:
/**
 * Runtime entry point into the program; just start the RTOS.  The application layer must define r_main() for its entry point.
 */
int main()
{
	OS_Init();
     b22:	5a de       	rcall	.-844    	; 0x7d8 <_Z7OS_Initv>

00000b24 <_Z11print_tracev>:
/**
 * Dump the entire trace array on UART
 * 
 */
void print_trace()
{
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
    int returned_chars;
    
// 	if (!trace_printed)
// 	{
        /* the test header */
        returned_chars = sprintf((char*)&trace_buffer, "T%03d;", trace_number);
     b34:	80 91 ee 0d 	lds	r24, 0x0DEE
     b38:	1f 92       	push	r1
     b3a:	8f 93       	push	r24
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	8b ec       	ldi	r24, 0xCB	; 203
     b46:	9b e0       	ldi	r25, 0x0B	; 11
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	0a d1       	rcall	.+532    	; 0xd62 <sprintf>
        uart_write((uint8_t*)trace_buffer, returned_chars);    
     b4e:	bc 01       	movw	r22, r24
     b50:	8b ec       	ldi	r24, 0xCB	; 203
     b52:	9b e0       	ldi	r25, 0x0B	; 11
     b54:	7d d0       	rcall	.+250    	; 0xc50 <_Z10uart_writePhi>

        /* all traces as 5 digit padded decimals 
        for(i = 0; i < TRACE_ARRAY_SIZE; i++)*/
		for(i = 0; i < (int)trace_counter; i++)
     b56:	80 91 eb 0b 	lds	r24, 0x0BEB
     b5a:	90 91 ec 0b 	lds	r25, 0x0BEC
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	18 16       	cp	r1, r24
     b6c:	19 06       	cpc	r1, r25
     b6e:	4c f5       	brge	.+82     	; 0xbc2 <_Z11print_tracev+0x9e>
     b70:	cd ee       	ldi	r28, 0xED	; 237
     b72:	db e0       	ldi	r29, 0x0B	; 11
     b74:	e1 2c       	mov	r14, r1
     b76:	f1 2c       	mov	r15, r1
        {
            returned_chars = sprintf((char*)&trace_buffer, "%u;", trace_array[i]);
     b78:	0f 2e       	mov	r0, r31
     b7a:	fa e0       	ldi	r31, 0x0A	; 10
     b7c:	cf 2e       	mov	r12, r31
     b7e:	f2 e0       	ldi	r31, 0x02	; 2
     b80:	df 2e       	mov	r13, r31
     b82:	f0 2d       	mov	r31, r0
     b84:	0b ec       	ldi	r16, 0xCB	; 203
     b86:	1b e0       	ldi	r17, 0x0B	; 11
     b88:	88 81       	ld	r24, Y
     b8a:	99 81       	ldd	r25, Y+1	; 0x01
     b8c:	22 96       	adiw	r28, 0x02	; 2
     b8e:	9f 93       	push	r25
     b90:	8f 93       	push	r24
     b92:	df 92       	push	r13
     b94:	cf 92       	push	r12
     b96:	1f 93       	push	r17
     b98:	0f 93       	push	r16
     b9a:	e3 d0       	rcall	.+454    	; 0xd62 <sprintf>
            uart_write((uint8_t*)trace_buffer, returned_chars);
     b9c:	bc 01       	movw	r22, r24
     b9e:	c8 01       	movw	r24, r16
     ba0:	57 d0       	rcall	.+174    	; 0xc50 <_Z10uart_writePhi>
        returned_chars = sprintf((char*)&trace_buffer, "T%03d;", trace_number);
        uart_write((uint8_t*)trace_buffer, returned_chars);    

        /* all traces as 5 digit padded decimals 
        for(i = 0; i < TRACE_ARRAY_SIZE; i++)*/
		for(i = 0; i < (int)trace_counter; i++)
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	e8 1a       	sub	r14, r24
     ba6:	f8 0a       	sbc	r15, r24
     ba8:	80 91 eb 0b 	lds	r24, 0x0BEB
     bac:	90 91 ec 0b 	lds	r25, 0x0BEC
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	e8 16       	cp	r14, r24
     bbe:	f9 06       	cpc	r15, r25
     bc0:	1c f3       	brlt	.-58     	; 0xb88 <_Z11print_tracev+0x64>
            returned_chars = sprintf((char*)&trace_buffer, "%u;", trace_array[i]);
            uart_write((uint8_t*)trace_buffer, returned_chars);
            //_delay_ms(1);
        }

        trace_printed = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 ed 0d 	sts	0x0DED, r24
        trace_counter = 0;
     bc8:	10 92 ec 0b 	sts	0x0BEC, r1
     bcc:	10 92 eb 0b 	sts	0x0BEB, r1
//    }
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	08 95       	ret

00000be2 <_Z12add_to_tracej>:
 * 
 * @param number unsigned integer to add
 */
void add_to_trace(uint16_t number)
{
    if (trace_counter < TRACE_ARRAY_SIZE)
     be2:	20 91 eb 0b 	lds	r18, 0x0BEB
     be6:	30 91 ec 0b 	lds	r19, 0x0BEC
     bea:	2f 3f       	cpi	r18, 0xFF	; 255
     bec:	31 05       	cpc	r19, r1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <_Z12add_to_tracej+0x10>
     bf0:	98 f4       	brcc	.+38     	; 0xc18 <_Z12add_to_tracej+0x36>
    {
        trace_array[trace_counter] = number;
     bf2:	e0 91 eb 0b 	lds	r30, 0x0BEB
     bf6:	f0 91 ec 0b 	lds	r31, 0x0BEC
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	e3 51       	subi	r30, 0x13	; 19
     c00:	f4 4f       	sbci	r31, 0xF4	; 244
     c02:	91 83       	std	Z+1, r25	; 0x01
     c04:	80 83       	st	Z, r24
        trace_counter++;
     c06:	80 91 eb 0b 	lds	r24, 0x0BEB
     c0a:	90 91 ec 0b 	lds	r25, 0x0BEC
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	90 93 ec 0b 	sts	0x0BEC, r25
     c14:	80 93 eb 0b 	sts	0x0BEB, r24
     c18:	08 95       	ret

00000c1a <_Z14set_trace_testh>:
 * 
 * @param number 
 */
void set_trace_test(uint8_t number)
{
    trace_number = number;
     c1a:	80 93 ee 0d 	sts	0x0DEE, r24
     c1e:	08 95       	ret

00000c20 <_Z12uart_putcharc>:
	return rxn;
}

void uart_reset_recv(void)
{
	rxn = 0;
     c20:	f8 94       	cli
     c22:	e0 ec       	ldi	r30, 0xC0	; 192
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	90 81       	ld	r25, Z
     c28:	95 ff       	sbrs	r25, 5
     c2a:	fd cf       	rjmp	.-6      	; 0xc26 <_Z12uart_putcharc+0x6>
     c2c:	80 93 c6 00 	sts	0x00C6, r24
     c30:	78 94       	sei
     c32:	08 95       	ret

00000c34 <_Z11uart_putstrPc>:
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	ec 01       	movw	r28, r24
     c3a:	88 81       	ld	r24, Y
     c3c:	88 23       	and	r24, r24
     c3e:	29 f0       	breq	.+10     	; 0xc4a <_Z11uart_putstrPc+0x16>
     c40:	21 96       	adiw	r28, 0x01	; 1
     c42:	ee df       	rcall	.-36     	; 0xc20 <_Z12uart_putcharc>
     c44:	89 91       	ld	r24, Y+
     c46:	81 11       	cpse	r24, r1
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <_Z11uart_putstrPc+0xe>
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <_Z10uart_writePhi>:
     c50:	f1 df       	rcall	.-30     	; 0xc34 <_Z11uart_putstrPc>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	08 95       	ret

00000c58 <_Z9uart_initv>:
     c58:	10 92 55 0e 	sts	0x0E55, r1
     c5c:	10 92 54 0e 	sts	0x0E54, r1
     c60:	10 92 ef 0d 	sts	0x0DEF, r1
     c64:	10 92 c5 00 	sts	0x00C5, r1
     c68:	87 e6       	ldi	r24, 0x67	; 103
     c6a:	80 93 c4 00 	sts	0x00C4, r24
     c6e:	88 e9       	ldi	r24, 0x98	; 152
     c70:	80 93 c1 00 	sts	0x00C1, r24
     c74:	8e e0       	ldi	r24, 0x0E	; 14
     c76:	80 93 c2 00 	sts	0x00C2, r24
     c7a:	08 95       	ret

00000c7c <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	0b b6       	in	r0, 0x3b	; 59
     c88:	0f 92       	push	r0
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
     c9c:	e0 ec       	ldi	r30, 0xC0	; 192
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	88 23       	and	r24, r24
     ca4:	ec f7       	brge	.-6      	; 0xca0 <__vector_25+0x24>

	//PORTB ^= _BV(PB7);

	rx[rxn] = UDR0;
     ca6:	e0 91 54 0e 	lds	r30, 0x0E54
     caa:	f0 91 55 0e 	lds	r31, 0x0E55
     cae:	80 91 c6 00 	lds	r24, 0x00C6
     cb2:	e0 51       	subi	r30, 0x10	; 16
     cb4:	f2 4f       	sbci	r31, 0xF2	; 242
     cb6:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
     cb8:	80 91 54 0e 	lds	r24, 0x0E54
     cbc:	90 91 55 0e 	lds	r25, 0x0E55
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	64 e6       	ldi	r22, 0x64	; 100
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	17 d0       	rcall	.+46     	; 0xcf6 <__divmodhi4>
     cc8:	90 93 55 0e 	sts	0x0E55, r25
     ccc:	80 93 54 0e 	sts	0x0E54, r24
	uart_rx = 1; // notify main of receipt of data.
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 ef 0d 	sts	0x0DEF, r24
	//PORTB = PORTB | _BV(PINB1);
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	0f 90       	pop	r0
     cea:	0b be       	out	0x3b, r0	; 59
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <__divmodhi4>:
     cf6:	97 fb       	bst	r25, 7
     cf8:	07 2e       	mov	r0, r23
     cfa:	16 f4       	brtc	.+4      	; 0xd00 <__divmodhi4+0xa>
     cfc:	00 94       	com	r0
     cfe:	06 d0       	rcall	.+12     	; 0xd0c <__divmodhi4_neg1>
     d00:	77 fd       	sbrc	r23, 7
     d02:	08 d0       	rcall	.+16     	; 0xd14 <__divmodhi4_neg2>
     d04:	1a d0       	rcall	.+52     	; 0xd3a <__udivmodhi4>
     d06:	07 fc       	sbrc	r0, 7
     d08:	05 d0       	rcall	.+10     	; 0xd14 <__divmodhi4_neg2>
     d0a:	3e f4       	brtc	.+14     	; 0xd1a <__divmodhi4_exit>

00000d0c <__divmodhi4_neg1>:
     d0c:	90 95       	com	r25
     d0e:	81 95       	neg	r24
     d10:	9f 4f       	sbci	r25, 0xFF	; 255
     d12:	08 95       	ret

00000d14 <__divmodhi4_neg2>:
     d14:	70 95       	com	r23
     d16:	61 95       	neg	r22
     d18:	7f 4f       	sbci	r23, 0xFF	; 255

00000d1a <__divmodhi4_exit>:
     d1a:	08 95       	ret

00000d1c <__umulhisi3>:
     d1c:	a2 9f       	mul	r26, r18
     d1e:	b0 01       	movw	r22, r0
     d20:	b3 9f       	mul	r27, r19
     d22:	c0 01       	movw	r24, r0
     d24:	a3 9f       	mul	r26, r19
     d26:	70 0d       	add	r23, r0
     d28:	81 1d       	adc	r24, r1
     d2a:	11 24       	eor	r1, r1
     d2c:	91 1d       	adc	r25, r1
     d2e:	b2 9f       	mul	r27, r18
     d30:	70 0d       	add	r23, r0
     d32:	81 1d       	adc	r24, r1
     d34:	11 24       	eor	r1, r1
     d36:	91 1d       	adc	r25, r1
     d38:	08 95       	ret

00000d3a <__udivmodhi4>:
     d3a:	aa 1b       	sub	r26, r26
     d3c:	bb 1b       	sub	r27, r27
     d3e:	51 e1       	ldi	r21, 0x11	; 17
     d40:	07 c0       	rjmp	.+14     	; 0xd50 <__udivmodhi4_ep>

00000d42 <__udivmodhi4_loop>:
     d42:	aa 1f       	adc	r26, r26
     d44:	bb 1f       	adc	r27, r27
     d46:	a6 17       	cp	r26, r22
     d48:	b7 07       	cpc	r27, r23
     d4a:	10 f0       	brcs	.+4      	; 0xd50 <__udivmodhi4_ep>
     d4c:	a6 1b       	sub	r26, r22
     d4e:	b7 0b       	sbc	r27, r23

00000d50 <__udivmodhi4_ep>:
     d50:	88 1f       	adc	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	5a 95       	dec	r21
     d56:	a9 f7       	brne	.-22     	; 0xd42 <__udivmodhi4_loop>
     d58:	80 95       	com	r24
     d5a:	90 95       	com	r25
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	08 95       	ret

00000d62 <sprintf>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	2e 97       	sbiw	r28, 0x0e	; 14
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	0e 89       	ldd	r16, Y+22	; 0x16
     d7c:	1f 89       	ldd	r17, Y+23	; 0x17
     d7e:	86 e0       	ldi	r24, 0x06	; 6
     d80:	8c 83       	std	Y+4, r24	; 0x04
     d82:	1a 83       	std	Y+2, r17	; 0x02
     d84:	09 83       	std	Y+1, r16	; 0x01
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	9f e7       	ldi	r25, 0x7F	; 127
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	ae 01       	movw	r20, r28
     d90:	46 5e       	subi	r20, 0xE6	; 230
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	68 8d       	ldd	r22, Y+24	; 0x18
     d96:	79 8d       	ldd	r23, Y+25	; 0x19
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	10 d0       	rcall	.+32     	; 0xdbe <vfprintf>
     d9e:	ef 81       	ldd	r30, Y+7	; 0x07
     da0:	f8 85       	ldd	r31, Y+8	; 0x08
     da2:	e0 0f       	add	r30, r16
     da4:	f1 1f       	adc	r31, r17
     da6:	10 82       	st	Z, r1
     da8:	2e 96       	adiw	r28, 0x0e	; 14
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <vfprintf>:
     dbe:	2f 92       	push	r2
     dc0:	3f 92       	push	r3
     dc2:	4f 92       	push	r4
     dc4:	5f 92       	push	r5
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	8f 92       	push	r8
     dcc:	9f 92       	push	r9
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	2c 97       	sbiw	r28, 0x0c	; 12
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	7c 01       	movw	r14, r24
     df4:	6b 01       	movw	r12, r22
     df6:	8a 01       	movw	r16, r20
     df8:	fc 01       	movw	r30, r24
     dfa:	17 82       	std	Z+7, r1	; 0x07
     dfc:	16 82       	std	Z+6, r1	; 0x06
     dfe:	83 81       	ldd	r24, Z+3	; 0x03
     e00:	81 ff       	sbrs	r24, 1
     e02:	b0 c1       	rjmp	.+864    	; 0x1164 <vfprintf+0x3a6>
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	4c 01       	movw	r8, r24
     e0a:	f7 01       	movw	r30, r14
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	f6 01       	movw	r30, r12
     e10:	93 fd       	sbrc	r25, 3
     e12:	85 91       	lpm	r24, Z+
     e14:	93 ff       	sbrs	r25, 3
     e16:	81 91       	ld	r24, Z+
     e18:	6f 01       	movw	r12, r30
     e1a:	88 23       	and	r24, r24
     e1c:	09 f4       	brne	.+2      	; 0xe20 <vfprintf+0x62>
     e1e:	9e c1       	rjmp	.+828    	; 0x115c <vfprintf+0x39e>
     e20:	85 32       	cpi	r24, 0x25	; 37
     e22:	39 f4       	brne	.+14     	; 0xe32 <vfprintf+0x74>
     e24:	93 fd       	sbrc	r25, 3
     e26:	85 91       	lpm	r24, Z+
     e28:	93 ff       	sbrs	r25, 3
     e2a:	81 91       	ld	r24, Z+
     e2c:	6f 01       	movw	r12, r30
     e2e:	85 32       	cpi	r24, 0x25	; 37
     e30:	21 f4       	brne	.+8      	; 0xe3a <vfprintf+0x7c>
     e32:	b7 01       	movw	r22, r14
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	c7 d1       	rcall	.+910    	; 0x11c6 <fputc>
     e38:	e8 cf       	rjmp	.-48     	; 0xe0a <vfprintf+0x4c>
     e3a:	51 2c       	mov	r5, r1
     e3c:	31 2c       	mov	r3, r1
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	20 32       	cpi	r18, 0x20	; 32
     e42:	a0 f4       	brcc	.+40     	; 0xe6c <vfprintf+0xae>
     e44:	8b 32       	cpi	r24, 0x2B	; 43
     e46:	69 f0       	breq	.+26     	; 0xe62 <vfprintf+0xa4>
     e48:	30 f4       	brcc	.+12     	; 0xe56 <vfprintf+0x98>
     e4a:	80 32       	cpi	r24, 0x20	; 32
     e4c:	59 f0       	breq	.+22     	; 0xe64 <vfprintf+0xa6>
     e4e:	83 32       	cpi	r24, 0x23	; 35
     e50:	69 f4       	brne	.+26     	; 0xe6c <vfprintf+0xae>
     e52:	20 61       	ori	r18, 0x10	; 16
     e54:	2c c0       	rjmp	.+88     	; 0xeae <vfprintf+0xf0>
     e56:	8d 32       	cpi	r24, 0x2D	; 45
     e58:	39 f0       	breq	.+14     	; 0xe68 <vfprintf+0xaa>
     e5a:	80 33       	cpi	r24, 0x30	; 48
     e5c:	39 f4       	brne	.+14     	; 0xe6c <vfprintf+0xae>
     e5e:	21 60       	ori	r18, 0x01	; 1
     e60:	26 c0       	rjmp	.+76     	; 0xeae <vfprintf+0xf0>
     e62:	22 60       	ori	r18, 0x02	; 2
     e64:	24 60       	ori	r18, 0x04	; 4
     e66:	23 c0       	rjmp	.+70     	; 0xeae <vfprintf+0xf0>
     e68:	28 60       	ori	r18, 0x08	; 8
     e6a:	21 c0       	rjmp	.+66     	; 0xeae <vfprintf+0xf0>
     e6c:	27 fd       	sbrc	r18, 7
     e6e:	27 c0       	rjmp	.+78     	; 0xebe <vfprintf+0x100>
     e70:	30 ed       	ldi	r19, 0xD0	; 208
     e72:	38 0f       	add	r19, r24
     e74:	3a 30       	cpi	r19, 0x0A	; 10
     e76:	78 f4       	brcc	.+30     	; 0xe96 <vfprintf+0xd8>
     e78:	26 ff       	sbrs	r18, 6
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <vfprintf+0xca>
     e7c:	fa e0       	ldi	r31, 0x0A	; 10
     e7e:	5f 9e       	mul	r5, r31
     e80:	30 0d       	add	r19, r0
     e82:	11 24       	eor	r1, r1
     e84:	53 2e       	mov	r5, r19
     e86:	13 c0       	rjmp	.+38     	; 0xeae <vfprintf+0xf0>
     e88:	8a e0       	ldi	r24, 0x0A	; 10
     e8a:	38 9e       	mul	r3, r24
     e8c:	30 0d       	add	r19, r0
     e8e:	11 24       	eor	r1, r1
     e90:	33 2e       	mov	r3, r19
     e92:	20 62       	ori	r18, 0x20	; 32
     e94:	0c c0       	rjmp	.+24     	; 0xeae <vfprintf+0xf0>
     e96:	8e 32       	cpi	r24, 0x2E	; 46
     e98:	21 f4       	brne	.+8      	; 0xea2 <vfprintf+0xe4>
     e9a:	26 fd       	sbrc	r18, 6
     e9c:	5f c1       	rjmp	.+702    	; 0x115c <vfprintf+0x39e>
     e9e:	20 64       	ori	r18, 0x40	; 64
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <vfprintf+0xf0>
     ea2:	8c 36       	cpi	r24, 0x6C	; 108
     ea4:	11 f4       	brne	.+4      	; 0xeaa <vfprintf+0xec>
     ea6:	20 68       	ori	r18, 0x80	; 128
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <vfprintf+0xf0>
     eaa:	88 36       	cpi	r24, 0x68	; 104
     eac:	41 f4       	brne	.+16     	; 0xebe <vfprintf+0x100>
     eae:	f6 01       	movw	r30, r12
     eb0:	93 fd       	sbrc	r25, 3
     eb2:	85 91       	lpm	r24, Z+
     eb4:	93 ff       	sbrs	r25, 3
     eb6:	81 91       	ld	r24, Z+
     eb8:	6f 01       	movw	r12, r30
     eba:	81 11       	cpse	r24, r1
     ebc:	c1 cf       	rjmp	.-126    	; 0xe40 <vfprintf+0x82>
     ebe:	98 2f       	mov	r25, r24
     ec0:	9f 7d       	andi	r25, 0xDF	; 223
     ec2:	95 54       	subi	r25, 0x45	; 69
     ec4:	93 30       	cpi	r25, 0x03	; 3
     ec6:	28 f4       	brcc	.+10     	; 0xed2 <vfprintf+0x114>
     ec8:	0c 5f       	subi	r16, 0xFC	; 252
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	ff e3       	ldi	r31, 0x3F	; 63
     ece:	f9 83       	std	Y+1, r31	; 0x01
     ed0:	0d c0       	rjmp	.+26     	; 0xeec <vfprintf+0x12e>
     ed2:	83 36       	cpi	r24, 0x63	; 99
     ed4:	31 f0       	breq	.+12     	; 0xee2 <vfprintf+0x124>
     ed6:	83 37       	cpi	r24, 0x73	; 115
     ed8:	71 f0       	breq	.+28     	; 0xef6 <vfprintf+0x138>
     eda:	83 35       	cpi	r24, 0x53	; 83
     edc:	09 f0       	breq	.+2      	; 0xee0 <vfprintf+0x122>
     ede:	57 c0       	rjmp	.+174    	; 0xf8e <vfprintf+0x1d0>
     ee0:	21 c0       	rjmp	.+66     	; 0xf24 <vfprintf+0x166>
     ee2:	f8 01       	movw	r30, r16
     ee4:	80 81       	ld	r24, Z
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	0e 5f       	subi	r16, 0xFE	; 254
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	44 24       	eor	r4, r4
     eee:	43 94       	inc	r4
     ef0:	51 2c       	mov	r5, r1
     ef2:	54 01       	movw	r10, r8
     ef4:	14 c0       	rjmp	.+40     	; 0xf1e <vfprintf+0x160>
     ef6:	38 01       	movw	r6, r16
     ef8:	f2 e0       	ldi	r31, 0x02	; 2
     efa:	6f 0e       	add	r6, r31
     efc:	71 1c       	adc	r7, r1
     efe:	f8 01       	movw	r30, r16
     f00:	a0 80       	ld	r10, Z
     f02:	b1 80       	ldd	r11, Z+1	; 0x01
     f04:	26 ff       	sbrs	r18, 6
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <vfprintf+0x150>
     f08:	65 2d       	mov	r22, r5
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0x154>
     f0e:	6f ef       	ldi	r22, 0xFF	; 255
     f10:	7f ef       	ldi	r23, 0xFF	; 255
     f12:	c5 01       	movw	r24, r10
     f14:	2c 87       	std	Y+12, r18	; 0x0c
     f16:	4c d1       	rcall	.+664    	; 0x11b0 <strnlen>
     f18:	2c 01       	movw	r4, r24
     f1a:	83 01       	movw	r16, r6
     f1c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1e:	2f 77       	andi	r18, 0x7F	; 127
     f20:	22 2e       	mov	r2, r18
     f22:	16 c0       	rjmp	.+44     	; 0xf50 <vfprintf+0x192>
     f24:	38 01       	movw	r6, r16
     f26:	f2 e0       	ldi	r31, 0x02	; 2
     f28:	6f 0e       	add	r6, r31
     f2a:	71 1c       	adc	r7, r1
     f2c:	f8 01       	movw	r30, r16
     f2e:	a0 80       	ld	r10, Z
     f30:	b1 80       	ldd	r11, Z+1	; 0x01
     f32:	26 ff       	sbrs	r18, 6
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <vfprintf+0x17e>
     f36:	65 2d       	mov	r22, r5
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x182>
     f3c:	6f ef       	ldi	r22, 0xFF	; 255
     f3e:	7f ef       	ldi	r23, 0xFF	; 255
     f40:	c5 01       	movw	r24, r10
     f42:	2c 87       	std	Y+12, r18	; 0x0c
     f44:	2a d1       	rcall	.+596    	; 0x119a <strnlen_P>
     f46:	2c 01       	movw	r4, r24
     f48:	2c 85       	ldd	r18, Y+12	; 0x0c
     f4a:	20 68       	ori	r18, 0x80	; 128
     f4c:	22 2e       	mov	r2, r18
     f4e:	83 01       	movw	r16, r6
     f50:	23 fc       	sbrc	r2, 3
     f52:	19 c0       	rjmp	.+50     	; 0xf86 <vfprintf+0x1c8>
     f54:	83 2d       	mov	r24, r3
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	48 16       	cp	r4, r24
     f5a:	59 06       	cpc	r5, r25
     f5c:	a0 f4       	brcc	.+40     	; 0xf86 <vfprintf+0x1c8>
     f5e:	b7 01       	movw	r22, r14
     f60:	80 e2       	ldi	r24, 0x20	; 32
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	30 d1       	rcall	.+608    	; 0x11c6 <fputc>
     f66:	3a 94       	dec	r3
     f68:	f5 cf       	rjmp	.-22     	; 0xf54 <vfprintf+0x196>
     f6a:	f5 01       	movw	r30, r10
     f6c:	27 fc       	sbrc	r2, 7
     f6e:	85 91       	lpm	r24, Z+
     f70:	27 fe       	sbrs	r2, 7
     f72:	81 91       	ld	r24, Z+
     f74:	5f 01       	movw	r10, r30
     f76:	b7 01       	movw	r22, r14
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	25 d1       	rcall	.+586    	; 0x11c6 <fputc>
     f7c:	31 10       	cpse	r3, r1
     f7e:	3a 94       	dec	r3
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	4f 1a       	sub	r4, r31
     f84:	51 08       	sbc	r5, r1
     f86:	41 14       	cp	r4, r1
     f88:	51 04       	cpc	r5, r1
     f8a:	79 f7       	brne	.-34     	; 0xf6a <vfprintf+0x1ac>
     f8c:	de c0       	rjmp	.+444    	; 0x114a <vfprintf+0x38c>
     f8e:	84 36       	cpi	r24, 0x64	; 100
     f90:	11 f0       	breq	.+4      	; 0xf96 <vfprintf+0x1d8>
     f92:	89 36       	cpi	r24, 0x69	; 105
     f94:	31 f5       	brne	.+76     	; 0xfe2 <vfprintf+0x224>
     f96:	f8 01       	movw	r30, r16
     f98:	27 ff       	sbrs	r18, 7
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <vfprintf+0x1ec>
     f9c:	60 81       	ld	r22, Z
     f9e:	71 81       	ldd	r23, Z+1	; 0x01
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	93 81       	ldd	r25, Z+3	; 0x03
     fa4:	0c 5f       	subi	r16, 0xFC	; 252
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	08 c0       	rjmp	.+16     	; 0xfba <vfprintf+0x1fc>
     faa:	60 81       	ld	r22, Z
     fac:	71 81       	ldd	r23, Z+1	; 0x01
     fae:	88 27       	eor	r24, r24
     fb0:	77 fd       	sbrc	r23, 7
     fb2:	80 95       	com	r24
     fb4:	98 2f       	mov	r25, r24
     fb6:	0e 5f       	subi	r16, 0xFE	; 254
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	2f 76       	andi	r18, 0x6F	; 111
     fbc:	b2 2e       	mov	r11, r18
     fbe:	97 ff       	sbrs	r25, 7
     fc0:	09 c0       	rjmp	.+18     	; 0xfd4 <vfprintf+0x216>
     fc2:	90 95       	com	r25
     fc4:	80 95       	com	r24
     fc6:	70 95       	com	r23
     fc8:	61 95       	neg	r22
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	20 68       	ori	r18, 0x80	; 128
     fd2:	b2 2e       	mov	r11, r18
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	a4 01       	movw	r20, r8
     fda:	27 d1       	rcall	.+590    	; 0x122a <__ultoa_invert>
     fdc:	a8 2e       	mov	r10, r24
     fde:	a8 18       	sub	r10, r8
     fe0:	43 c0       	rjmp	.+134    	; 0x1068 <vfprintf+0x2aa>
     fe2:	85 37       	cpi	r24, 0x75	; 117
     fe4:	29 f4       	brne	.+10     	; 0xff0 <vfprintf+0x232>
     fe6:	2f 7e       	andi	r18, 0xEF	; 239
     fe8:	b2 2e       	mov	r11, r18
     fea:	2a e0       	ldi	r18, 0x0A	; 10
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	25 c0       	rjmp	.+74     	; 0x103a <vfprintf+0x27c>
     ff0:	f2 2f       	mov	r31, r18
     ff2:	f9 7f       	andi	r31, 0xF9	; 249
     ff4:	bf 2e       	mov	r11, r31
     ff6:	8f 36       	cpi	r24, 0x6F	; 111
     ff8:	c1 f0       	breq	.+48     	; 0x102a <vfprintf+0x26c>
     ffa:	18 f4       	brcc	.+6      	; 0x1002 <vfprintf+0x244>
     ffc:	88 35       	cpi	r24, 0x58	; 88
     ffe:	79 f0       	breq	.+30     	; 0x101e <vfprintf+0x260>
    1000:	ad c0       	rjmp	.+346    	; 0x115c <vfprintf+0x39e>
    1002:	80 37       	cpi	r24, 0x70	; 112
    1004:	19 f0       	breq	.+6      	; 0x100c <vfprintf+0x24e>
    1006:	88 37       	cpi	r24, 0x78	; 120
    1008:	21 f0       	breq	.+8      	; 0x1012 <vfprintf+0x254>
    100a:	a8 c0       	rjmp	.+336    	; 0x115c <vfprintf+0x39e>
    100c:	2f 2f       	mov	r18, r31
    100e:	20 61       	ori	r18, 0x10	; 16
    1010:	b2 2e       	mov	r11, r18
    1012:	b4 fe       	sbrs	r11, 4
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <vfprintf+0x272>
    1016:	8b 2d       	mov	r24, r11
    1018:	84 60       	ori	r24, 0x04	; 4
    101a:	b8 2e       	mov	r11, r24
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <vfprintf+0x272>
    101e:	24 ff       	sbrs	r18, 4
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <vfprintf+0x278>
    1022:	9f 2f       	mov	r25, r31
    1024:	96 60       	ori	r25, 0x06	; 6
    1026:	b9 2e       	mov	r11, r25
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <vfprintf+0x278>
    102a:	28 e0       	ldi	r18, 0x08	; 8
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	05 c0       	rjmp	.+10     	; 0x103a <vfprintf+0x27c>
    1030:	20 e1       	ldi	r18, 0x10	; 16
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0x27c>
    1036:	20 e1       	ldi	r18, 0x10	; 16
    1038:	32 e0       	ldi	r19, 0x02	; 2
    103a:	f8 01       	movw	r30, r16
    103c:	b7 fe       	sbrs	r11, 7
    103e:	07 c0       	rjmp	.+14     	; 0x104e <vfprintf+0x290>
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	0c 5f       	subi	r16, 0xFC	; 252
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	06 c0       	rjmp	.+12     	; 0x105a <vfprintf+0x29c>
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 5f       	subi	r16, 0xFE	; 254
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	a4 01       	movw	r20, r8
    105c:	e6 d0       	rcall	.+460    	; 0x122a <__ultoa_invert>
    105e:	a8 2e       	mov	r10, r24
    1060:	a8 18       	sub	r10, r8
    1062:	fb 2d       	mov	r31, r11
    1064:	ff 77       	andi	r31, 0x7F	; 127
    1066:	bf 2e       	mov	r11, r31
    1068:	b6 fe       	sbrs	r11, 6
    106a:	0b c0       	rjmp	.+22     	; 0x1082 <vfprintf+0x2c4>
    106c:	2b 2d       	mov	r18, r11
    106e:	2e 7f       	andi	r18, 0xFE	; 254
    1070:	a5 14       	cp	r10, r5
    1072:	50 f4       	brcc	.+20     	; 0x1088 <vfprintf+0x2ca>
    1074:	b4 fe       	sbrs	r11, 4
    1076:	0a c0       	rjmp	.+20     	; 0x108c <vfprintf+0x2ce>
    1078:	b2 fc       	sbrc	r11, 2
    107a:	08 c0       	rjmp	.+16     	; 0x108c <vfprintf+0x2ce>
    107c:	2b 2d       	mov	r18, r11
    107e:	2e 7e       	andi	r18, 0xEE	; 238
    1080:	05 c0       	rjmp	.+10     	; 0x108c <vfprintf+0x2ce>
    1082:	7a 2c       	mov	r7, r10
    1084:	2b 2d       	mov	r18, r11
    1086:	03 c0       	rjmp	.+6      	; 0x108e <vfprintf+0x2d0>
    1088:	7a 2c       	mov	r7, r10
    108a:	01 c0       	rjmp	.+2      	; 0x108e <vfprintf+0x2d0>
    108c:	75 2c       	mov	r7, r5
    108e:	24 ff       	sbrs	r18, 4
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <vfprintf+0x2ee>
    1092:	fe 01       	movw	r30, r28
    1094:	ea 0d       	add	r30, r10
    1096:	f1 1d       	adc	r31, r1
    1098:	80 81       	ld	r24, Z
    109a:	80 33       	cpi	r24, 0x30	; 48
    109c:	11 f4       	brne	.+4      	; 0x10a2 <vfprintf+0x2e4>
    109e:	29 7e       	andi	r18, 0xE9	; 233
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <vfprintf+0x2f6>
    10a2:	22 ff       	sbrs	r18, 2
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <vfprintf+0x2f4>
    10a6:	73 94       	inc	r7
    10a8:	73 94       	inc	r7
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <vfprintf+0x2f6>
    10ac:	82 2f       	mov	r24, r18
    10ae:	86 78       	andi	r24, 0x86	; 134
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <vfprintf+0x2f6>
    10b2:	73 94       	inc	r7
    10b4:	23 fd       	sbrc	r18, 3
    10b6:	12 c0       	rjmp	.+36     	; 0x10dc <vfprintf+0x31e>
    10b8:	20 ff       	sbrs	r18, 0
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <vfprintf+0x30a>
    10bc:	5a 2c       	mov	r5, r10
    10be:	73 14       	cp	r7, r3
    10c0:	18 f4       	brcc	.+6      	; 0x10c8 <vfprintf+0x30a>
    10c2:	53 0c       	add	r5, r3
    10c4:	57 18       	sub	r5, r7
    10c6:	73 2c       	mov	r7, r3
    10c8:	73 14       	cp	r7, r3
    10ca:	60 f4       	brcc	.+24     	; 0x10e4 <vfprintf+0x326>
    10cc:	b7 01       	movw	r22, r14
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	2c 87       	std	Y+12, r18	; 0x0c
    10d4:	78 d0       	rcall	.+240    	; 0x11c6 <fputc>
    10d6:	73 94       	inc	r7
    10d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10da:	f6 cf       	rjmp	.-20     	; 0x10c8 <vfprintf+0x30a>
    10dc:	73 14       	cp	r7, r3
    10de:	10 f4       	brcc	.+4      	; 0x10e4 <vfprintf+0x326>
    10e0:	37 18       	sub	r3, r7
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <vfprintf+0x328>
    10e4:	31 2c       	mov	r3, r1
    10e6:	24 ff       	sbrs	r18, 4
    10e8:	11 c0       	rjmp	.+34     	; 0x110c <vfprintf+0x34e>
    10ea:	b7 01       	movw	r22, r14
    10ec:	80 e3       	ldi	r24, 0x30	; 48
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	2c 87       	std	Y+12, r18	; 0x0c
    10f2:	69 d0       	rcall	.+210    	; 0x11c6 <fputc>
    10f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    10f6:	22 ff       	sbrs	r18, 2
    10f8:	16 c0       	rjmp	.+44     	; 0x1126 <vfprintf+0x368>
    10fa:	21 ff       	sbrs	r18, 1
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <vfprintf+0x346>
    10fe:	88 e5       	ldi	r24, 0x58	; 88
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x34a>
    1104:	88 e7       	ldi	r24, 0x78	; 120
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	b7 01       	movw	r22, r14
    110a:	0c c0       	rjmp	.+24     	; 0x1124 <vfprintf+0x366>
    110c:	82 2f       	mov	r24, r18
    110e:	86 78       	andi	r24, 0x86	; 134
    1110:	51 f0       	breq	.+20     	; 0x1126 <vfprintf+0x368>
    1112:	21 fd       	sbrc	r18, 1
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x35c>
    1116:	80 e2       	ldi	r24, 0x20	; 32
    1118:	01 c0       	rjmp	.+2      	; 0x111c <vfprintf+0x35e>
    111a:	8b e2       	ldi	r24, 0x2B	; 43
    111c:	27 fd       	sbrc	r18, 7
    111e:	8d e2       	ldi	r24, 0x2D	; 45
    1120:	b7 01       	movw	r22, r14
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	50 d0       	rcall	.+160    	; 0x11c6 <fputc>
    1126:	a5 14       	cp	r10, r5
    1128:	30 f4       	brcc	.+12     	; 0x1136 <vfprintf+0x378>
    112a:	b7 01       	movw	r22, r14
    112c:	80 e3       	ldi	r24, 0x30	; 48
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	4a d0       	rcall	.+148    	; 0x11c6 <fputc>
    1132:	5a 94       	dec	r5
    1134:	f8 cf       	rjmp	.-16     	; 0x1126 <vfprintf+0x368>
    1136:	aa 94       	dec	r10
    1138:	f4 01       	movw	r30, r8
    113a:	ea 0d       	add	r30, r10
    113c:	f1 1d       	adc	r31, r1
    113e:	80 81       	ld	r24, Z
    1140:	b7 01       	movw	r22, r14
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	40 d0       	rcall	.+128    	; 0x11c6 <fputc>
    1146:	a1 10       	cpse	r10, r1
    1148:	f6 cf       	rjmp	.-20     	; 0x1136 <vfprintf+0x378>
    114a:	33 20       	and	r3, r3
    114c:	09 f4       	brne	.+2      	; 0x1150 <vfprintf+0x392>
    114e:	5d ce       	rjmp	.-838    	; 0xe0a <vfprintf+0x4c>
    1150:	b7 01       	movw	r22, r14
    1152:	80 e2       	ldi	r24, 0x20	; 32
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	37 d0       	rcall	.+110    	; 0x11c6 <fputc>
    1158:	3a 94       	dec	r3
    115a:	f7 cf       	rjmp	.-18     	; 0x114a <vfprintf+0x38c>
    115c:	f7 01       	movw	r30, r14
    115e:	86 81       	ldd	r24, Z+6	; 0x06
    1160:	97 81       	ldd	r25, Z+7	; 0x07
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x3aa>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	9f ef       	ldi	r25, 0xFF	; 255
    1168:	2c 96       	adiw	r28, 0x0c	; 12
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	7f 90       	pop	r7
    118e:	6f 90       	pop	r6
    1190:	5f 90       	pop	r5
    1192:	4f 90       	pop	r4
    1194:	3f 90       	pop	r3
    1196:	2f 90       	pop	r2
    1198:	08 95       	ret

0000119a <strnlen_P>:
    119a:	fc 01       	movw	r30, r24
    119c:	05 90       	lpm	r0, Z+
    119e:	61 50       	subi	r22, 0x01	; 1
    11a0:	70 40       	sbci	r23, 0x00	; 0
    11a2:	01 10       	cpse	r0, r1
    11a4:	d8 f7       	brcc	.-10     	; 0x119c <strnlen_P+0x2>
    11a6:	80 95       	com	r24
    11a8:	90 95       	com	r25
    11aa:	8e 0f       	add	r24, r30
    11ac:	9f 1f       	adc	r25, r31
    11ae:	08 95       	ret

000011b0 <strnlen>:
    11b0:	fc 01       	movw	r30, r24
    11b2:	61 50       	subi	r22, 0x01	; 1
    11b4:	70 40       	sbci	r23, 0x00	; 0
    11b6:	01 90       	ld	r0, Z+
    11b8:	01 10       	cpse	r0, r1
    11ba:	d8 f7       	brcc	.-10     	; 0x11b2 <strnlen+0x2>
    11bc:	80 95       	com	r24
    11be:	90 95       	com	r25
    11c0:	8e 0f       	add	r24, r30
    11c2:	9f 1f       	adc	r25, r31
    11c4:	08 95       	ret

000011c6 <fputc>:
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	18 2f       	mov	r17, r24
    11d0:	09 2f       	mov	r16, r25
    11d2:	eb 01       	movw	r28, r22
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	81 fd       	sbrc	r24, 1
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <fputc+0x1a>
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	9f ef       	ldi	r25, 0xFF	; 255
    11de:	20 c0       	rjmp	.+64     	; 0x1220 <fputc+0x5a>
    11e0:	82 ff       	sbrs	r24, 2
    11e2:	10 c0       	rjmp	.+32     	; 0x1204 <fputc+0x3e>
    11e4:	4e 81       	ldd	r20, Y+6	; 0x06
    11e6:	5f 81       	ldd	r21, Y+7	; 0x07
    11e8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ea:	3d 81       	ldd	r19, Y+5	; 0x05
    11ec:	42 17       	cp	r20, r18
    11ee:	53 07       	cpc	r21, r19
    11f0:	7c f4       	brge	.+30     	; 0x1210 <fputc+0x4a>
    11f2:	e8 81       	ld	r30, Y
    11f4:	f9 81       	ldd	r31, Y+1	; 0x01
    11f6:	9f 01       	movw	r18, r30
    11f8:	2f 5f       	subi	r18, 0xFF	; 255
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	39 83       	std	Y+1, r19	; 0x01
    11fe:	28 83       	st	Y, r18
    1200:	10 83       	st	Z, r17
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <fputc+0x4a>
    1204:	e8 85       	ldd	r30, Y+8	; 0x08
    1206:	f9 85       	ldd	r31, Y+9	; 0x09
    1208:	81 2f       	mov	r24, r17
    120a:	19 95       	eicall
    120c:	89 2b       	or	r24, r25
    120e:	29 f7       	brne	.-54     	; 0x11da <fputc+0x14>
    1210:	2e 81       	ldd	r18, Y+6	; 0x06
    1212:	3f 81       	ldd	r19, Y+7	; 0x07
    1214:	2f 5f       	subi	r18, 0xFF	; 255
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	3f 83       	std	Y+7, r19	; 0x07
    121a:	2e 83       	std	Y+6, r18	; 0x06
    121c:	81 2f       	mov	r24, r17
    121e:	90 2f       	mov	r25, r16
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	08 95       	ret

0000122a <__ultoa_invert>:
    122a:	fa 01       	movw	r30, r20
    122c:	aa 27       	eor	r26, r26
    122e:	28 30       	cpi	r18, 0x08	; 8
    1230:	51 f1       	breq	.+84     	; 0x1286 <__ultoa_invert+0x5c>
    1232:	20 31       	cpi	r18, 0x10	; 16
    1234:	81 f1       	breq	.+96     	; 0x1296 <__ultoa_invert+0x6c>
    1236:	e8 94       	clt
    1238:	6f 93       	push	r22
    123a:	6e 7f       	andi	r22, 0xFE	; 254
    123c:	6e 5f       	subi	r22, 0xFE	; 254
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	8f 4f       	sbci	r24, 0xFF	; 255
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	af 4f       	sbci	r26, 0xFF	; 255
    1246:	b1 e0       	ldi	r27, 0x01	; 1
    1248:	3e d0       	rcall	.+124    	; 0x12c6 <__ultoa_invert+0x9c>
    124a:	b4 e0       	ldi	r27, 0x04	; 4
    124c:	3c d0       	rcall	.+120    	; 0x12c6 <__ultoa_invert+0x9c>
    124e:	67 0f       	add	r22, r23
    1250:	78 1f       	adc	r23, r24
    1252:	89 1f       	adc	r24, r25
    1254:	9a 1f       	adc	r25, r26
    1256:	a1 1d       	adc	r26, r1
    1258:	68 0f       	add	r22, r24
    125a:	79 1f       	adc	r23, r25
    125c:	8a 1f       	adc	r24, r26
    125e:	91 1d       	adc	r25, r1
    1260:	a1 1d       	adc	r26, r1
    1262:	6a 0f       	add	r22, r26
    1264:	71 1d       	adc	r23, r1
    1266:	81 1d       	adc	r24, r1
    1268:	91 1d       	adc	r25, r1
    126a:	a1 1d       	adc	r26, r1
    126c:	20 d0       	rcall	.+64     	; 0x12ae <__ultoa_invert+0x84>
    126e:	09 f4       	brne	.+2      	; 0x1272 <__ultoa_invert+0x48>
    1270:	68 94       	set
    1272:	3f 91       	pop	r19
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	26 9f       	mul	r18, r22
    1278:	11 24       	eor	r1, r1
    127a:	30 19       	sub	r19, r0
    127c:	30 5d       	subi	r19, 0xD0	; 208
    127e:	31 93       	st	Z+, r19
    1280:	de f6       	brtc	.-74     	; 0x1238 <__ultoa_invert+0xe>
    1282:	cf 01       	movw	r24, r30
    1284:	08 95       	ret
    1286:	46 2f       	mov	r20, r22
    1288:	47 70       	andi	r20, 0x07	; 7
    128a:	40 5d       	subi	r20, 0xD0	; 208
    128c:	41 93       	st	Z+, r20
    128e:	b3 e0       	ldi	r27, 0x03	; 3
    1290:	0f d0       	rcall	.+30     	; 0x12b0 <__ultoa_invert+0x86>
    1292:	c9 f7       	brne	.-14     	; 0x1286 <__ultoa_invert+0x5c>
    1294:	f6 cf       	rjmp	.-20     	; 0x1282 <__ultoa_invert+0x58>
    1296:	46 2f       	mov	r20, r22
    1298:	4f 70       	andi	r20, 0x0F	; 15
    129a:	40 5d       	subi	r20, 0xD0	; 208
    129c:	4a 33       	cpi	r20, 0x3A	; 58
    129e:	18 f0       	brcs	.+6      	; 0x12a6 <__ultoa_invert+0x7c>
    12a0:	49 5d       	subi	r20, 0xD9	; 217
    12a2:	31 fd       	sbrc	r19, 1
    12a4:	40 52       	subi	r20, 0x20	; 32
    12a6:	41 93       	st	Z+, r20
    12a8:	02 d0       	rcall	.+4      	; 0x12ae <__ultoa_invert+0x84>
    12aa:	a9 f7       	brne	.-22     	; 0x1296 <__ultoa_invert+0x6c>
    12ac:	ea cf       	rjmp	.-44     	; 0x1282 <__ultoa_invert+0x58>
    12ae:	b4 e0       	ldi	r27, 0x04	; 4
    12b0:	a6 95       	lsr	r26
    12b2:	97 95       	ror	r25
    12b4:	87 95       	ror	r24
    12b6:	77 95       	ror	r23
    12b8:	67 95       	ror	r22
    12ba:	ba 95       	dec	r27
    12bc:	c9 f7       	brne	.-14     	; 0x12b0 <__ultoa_invert+0x86>
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	61 05       	cpc	r22, r1
    12c2:	71 05       	cpc	r23, r1
    12c4:	08 95       	ret
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
    12ca:	0a 2e       	mov	r0, r26
    12cc:	06 94       	lsr	r0
    12ce:	57 95       	ror	r21
    12d0:	47 95       	ror	r20
    12d2:	37 95       	ror	r19
    12d4:	27 95       	ror	r18
    12d6:	ba 95       	dec	r27
    12d8:	c9 f7       	brne	.-14     	; 0x12cc <__ultoa_invert+0xa2>
    12da:	62 0f       	add	r22, r18
    12dc:	73 1f       	adc	r23, r19
    12de:	84 1f       	adc	r24, r20
    12e0:	95 1f       	adc	r25, r21
    12e2:	a0 1d       	adc	r26, r0
    12e4:	08 95       	ret

000012e6 <_exit>:
    12e6:	f8 94       	cli

000012e8 <__stop_program>:
    12e8:	ff cf       	rjmp	.-2      	; 0x12e8 <__stop_program>
