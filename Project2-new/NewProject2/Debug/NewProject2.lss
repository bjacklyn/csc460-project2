
NewProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000011e4  00001278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c48  0080020c  0080020c  00001284  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001399  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c4  00000000  00000000  000027d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d31  00000000  00000000  00002f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000033c  00000000  00000000  00003cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000829  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b58  00000000  00000000  0000482d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00005385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	58 c1       	rjmp	.+688    	; 0x2f6 <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c5       	rjmp	.+2832   	; 0xb76 <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ee       	ldi	r30, 0xE4	; 228
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 30       	cpi	r26, 0x0C	; 12
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	ac e0       	ldi	r26, 0x0C	; 12
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 35       	cpi	r26, 0x54	; 84
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	7a d4       	rcall	.+2292   	; 0xa14 <main>
     120:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_Z6r_mainv>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

extern int r_main() { 
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
    uart_init();
     12a:	13 d5       	rcall	.+2598   	; 0xb52 <_Z9uart_initv>
    set_trace_test(0);
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	f2 d4       	rcall	.+2532   	; 0xb14 <_Z14set_trace_testh>
     130:	c0 e0       	ldi	r28, 0x00	; 0
     132:	d1 e0       	ldi	r29, 0x01	; 1
    
	int j;
	uint16_t v;		
    for(j = 0; j < TRACE_ARRAY_SIZE; ++j){
        v = Now();
     134:	b1 d1       	rcall	.+866    	; 0x498 <Now>
        add_to_trace(v);
     136:	d2 d4       	rcall	.+2468   	; 0xadc <_Z12add_to_tracej>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	85 ea       	ldi	r24, 0xA5	; 165
     13c:	9e e0       	ldi	r25, 0x0E	; 14
     13e:	21 50       	subi	r18, 0x01	; 1
     140:	80 40       	sbci	r24, 0x00	; 0
     142:	90 40       	sbci	r25, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <_Z6r_mainv+0x18>
     146:	00 c0       	rjmp	.+0      	; 0x148 <_Z6r_mainv+0x22>
     148:	00 00       	nop
     14a:	21 97       	sbiw	r28, 0x01	; 1
    uart_init();
    set_trace_test(0);
    
	int j;
	uint16_t v;		
    for(j = 0; j < TRACE_ARRAY_SIZE; ++j){
     14c:	20 97       	sbiw	r28, 0x00	; 0
     14e:	91 f7       	brne	.-28     	; 0x134 <_Z6r_mainv+0xe>
        v = Now();
        add_to_trace(v);
        _delay_ms(300);
    }	
    print_trace();
     150:	62 d4       	rcall	.+2244   	; 0xa16 <_Z11print_tracev>
    return 0;
}
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <_ZL4idlev>:
    arg = cur_task->arg;

    SREG = sreg;

    return arg;
}
     15c:	ff cf       	rjmp	.-2      	; 0x15c <_ZL4idlev>

0000015e <_ZL11exit_kernelv>:
     15e:	ff 93       	push	r31
     160:	fc b7       	in	r31, 0x3c	; 60
     162:	ff 93       	push	r31
     164:	ff b7       	in	r31, 0x3f	; 63
     166:	f8 94       	cli
     168:	ff 93       	push	r31
     16a:	ef 93       	push	r30
     16c:	df 93       	push	r29
     16e:	cf 93       	push	r28
     170:	bf 93       	push	r27
     172:	af 93       	push	r26
     174:	9f 93       	push	r25
     176:	8f 93       	push	r24
     178:	7f 93       	push	r23
     17a:	6f 93       	push	r22
     17c:	5f 93       	push	r21
     17e:	4f 93       	push	r20
     180:	3f 93       	push	r19
     182:	2f 93       	push	r18
     184:	1f 93       	push	r17
     186:	0f 93       	push	r16
     188:	ff 92       	push	r15
     18a:	ef 92       	push	r14
     18c:	df 92       	push	r13
     18e:	cf 92       	push	r12
     190:	bf 92       	push	r11
     192:	af 92       	push	r10
     194:	9f 92       	push	r9
     196:	8f 92       	push	r8
     198:	7f 92       	push	r7
     19a:	6f 92       	push	r6
     19c:	5f 92       	push	r5
     19e:	4f 92       	push	r4
     1a0:	3f 92       	push	r3
     1a2:	2f 92       	push	r2
     1a4:	1f 92       	push	r1
     1a6:	0f 92       	push	r0
     1a8:	8d b7       	in	r24, 0x3d	; 61
     1aa:	9e b7       	in	r25, 0x3e	; 62
     1ac:	90 93 c4 0b 	sts	0x0BC4, r25
     1b0:	80 93 c3 0b 	sts	0x0BC3, r24
     1b4:	e0 91 c5 0b 	lds	r30, 0x0BC5
     1b8:	f0 91 c6 0b 	lds	r31, 0x0BC6
     1bc:	f3 95       	inc	r31
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	9e bf       	out	0x3e, r25	; 62
     1c4:	8d bf       	out	0x3d, r24	; 61
     1c6:	0f 90       	pop	r0
     1c8:	1f 90       	pop	r1
     1ca:	2f 90       	pop	r2
     1cc:	3f 90       	pop	r3
     1ce:	4f 90       	pop	r4
     1d0:	5f 90       	pop	r5
     1d2:	6f 90       	pop	r6
     1d4:	7f 90       	pop	r7
     1d6:	8f 90       	pop	r8
     1d8:	9f 90       	pop	r9
     1da:	af 90       	pop	r10
     1dc:	bf 90       	pop	r11
     1de:	cf 90       	pop	r12
     1e0:	df 90       	pop	r13
     1e2:	ef 90       	pop	r14
     1e4:	ff 90       	pop	r15
     1e6:	0f 91       	pop	r16
     1e8:	1f 91       	pop	r17
     1ea:	2f 91       	pop	r18
     1ec:	3f 91       	pop	r19
     1ee:	4f 91       	pop	r20
     1f0:	5f 91       	pop	r21
     1f2:	6f 91       	pop	r22
     1f4:	7f 91       	pop	r23
     1f6:	8f 91       	pop	r24
     1f8:	9f 91       	pop	r25
     1fa:	af 91       	pop	r26
     1fc:	bf 91       	pop	r27
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	ef 91       	pop	r30
     204:	ff 91       	pop	r31
     206:	ff bf       	out	0x3f, r31	; 63
     208:	ff 91       	pop	r31
     20a:	fc bf       	out	0x3c, r31	; 60
     20c:	ff 91       	pop	r31
     20e:	08 95       	ret

00000210 <_ZL12enter_kernelv>:
     210:	ff 93       	push	r31
     212:	fc b7       	in	r31, 0x3c	; 60
     214:	ff 93       	push	r31
     216:	ff b7       	in	r31, 0x3f	; 63
     218:	f8 94       	cli
     21a:	ff 93       	push	r31
     21c:	ef 93       	push	r30
     21e:	df 93       	push	r29
     220:	cf 93       	push	r28
     222:	bf 93       	push	r27
     224:	af 93       	push	r26
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	7f 93       	push	r23
     22c:	6f 93       	push	r22
     22e:	5f 93       	push	r21
     230:	4f 93       	push	r20
     232:	3f 93       	push	r19
     234:	2f 93       	push	r18
     236:	1f 93       	push	r17
     238:	0f 93       	push	r16
     23a:	ff 92       	push	r15
     23c:	ef 92       	push	r14
     23e:	df 92       	push	r13
     240:	cf 92       	push	r12
     242:	bf 92       	push	r11
     244:	af 92       	push	r10
     246:	9f 92       	push	r9
     248:	8f 92       	push	r8
     24a:	7f 92       	push	r7
     24c:	6f 92       	push	r6
     24e:	5f 92       	push	r5
     250:	4f 92       	push	r4
     252:	3f 92       	push	r3
     254:	2f 92       	push	r2
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	e0 91 c5 0b 	lds	r30, 0x0BC5
     25e:	f0 91 c6 0b 	lds	r31, 0x0BC6
     262:	8d b7       	in	r24, 0x3d	; 61
     264:	9e b7       	in	r25, 0x3e	; 62
     266:	f3 95       	inc	r31
     268:	91 83       	std	Z+1, r25	; 0x01
     26a:	80 83       	st	Z, r24
     26c:	80 91 c3 0b 	lds	r24, 0x0BC3
     270:	90 91 c4 0b 	lds	r25, 0x0BC4
     274:	9e bf       	out	0x3e, r25	; 62
     276:	8d bf       	out	0x3d, r24	; 61
     278:	0f 90       	pop	r0
     27a:	1f 90       	pop	r1
     27c:	2f 90       	pop	r2
     27e:	3f 90       	pop	r3
     280:	4f 90       	pop	r4
     282:	5f 90       	pop	r5
     284:	6f 90       	pop	r6
     286:	7f 90       	pop	r7
     288:	8f 90       	pop	r8
     28a:	9f 90       	pop	r9
     28c:	af 90       	pop	r10
     28e:	bf 90       	pop	r11
     290:	cf 90       	pop	r12
     292:	df 90       	pop	r13
     294:	ef 90       	pop	r14
     296:	ff 90       	pop	r15
     298:	0f 91       	pop	r16
     29a:	1f 91       	pop	r17
     29c:	2f 91       	pop	r18
     29e:	3f 91       	pop	r19
     2a0:	4f 91       	pop	r20
     2a2:	5f 91       	pop	r21
     2a4:	6f 91       	pop	r22
     2a6:	7f 91       	pop	r23
     2a8:	8f 91       	pop	r24
     2aa:	9f 91       	pop	r25
     2ac:	af 91       	pop	r26
     2ae:	bf 91       	pop	r27
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	ef 91       	pop	r30
     2b6:	ff 91       	pop	r31
     2b8:	ff bf       	out	0x3f, r31	; 63
     2ba:	ff 91       	pop	r31
     2bc:	fc bf       	out	0x3c, r31	; 60
     2be:	ff 91       	pop	r31
     2c0:	08 95       	ret

000002c2 <_ZL7dequeueP7queue_t>:
     2c2:	fc 01       	movw	r30, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	51 f0       	breq	.+20     	; 0x2e0 <_ZL7dequeueP7queue_t+0x1e>
     2cc:	dc 01       	movw	r26, r24
     2ce:	a1 5f       	subi	r26, 0xF1	; 241
     2d0:	be 4f       	sbci	r27, 0xFE	; 254
     2d2:	2d 91       	ld	r18, X+
     2d4:	3c 91       	ld	r19, X
     2d6:	11 97       	sbiw	r26, 0x01	; 1
     2d8:	31 83       	std	Z+1, r19	; 0x01
     2da:	20 83       	st	Z, r18
     2dc:	1d 92       	st	X+, r1
     2de:	1c 92       	st	X, r1
     2e0:	08 95       	ret

000002e2 <Task_Terminate>:
     2e2:	cf 93       	push	r28
     2e4:	cf b7       	in	r28, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	83 e0       	ldi	r24, 0x03	; 3
     2ea:	80 93 29 02 	sts	0x0229, r24
     2ee:	90 df       	rcall	.-224    	; 0x210 <_ZL12enter_kernelv>
     2f0:	cf bf       	out	0x3f, r28	; 63
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <__vector_17>:
     2f6:	ff 93       	push	r31
     2f8:	fc b7       	in	r31, 0x3c	; 60
     2fa:	ff 93       	push	r31
     2fc:	ff b7       	in	r31, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	f0 68       	ori	r31, 0x80	; 128
     302:	ff 93       	push	r31
     304:	ef 93       	push	r30
     306:	df 93       	push	r29
     308:	cf 93       	push	r28
     30a:	bf 93       	push	r27
     30c:	af 93       	push	r26
     30e:	9f 93       	push	r25
     310:	8f 93       	push	r24
     312:	7f 93       	push	r23
     314:	6f 93       	push	r22
     316:	5f 93       	push	r21
     318:	4f 93       	push	r20
     31a:	3f 93       	push	r19
     31c:	2f 93       	push	r18
     31e:	1f 93       	push	r17
     320:	0f 93       	push	r16
     322:	ff 92       	push	r15
     324:	ef 92       	push	r14
     326:	df 92       	push	r13
     328:	cf 92       	push	r12
     32a:	bf 92       	push	r11
     32c:	af 92       	push	r10
     32e:	9f 92       	push	r9
     330:	8f 92       	push	r8
     332:	7f 92       	push	r7
     334:	6f 92       	push	r6
     336:	5f 92       	push	r5
     338:	4f 92       	push	r4
     33a:	3f 92       	push	r3
     33c:	2f 92       	push	r2
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	e0 91 c5 0b 	lds	r30, 0x0BC5
     346:	f0 91 c6 0b 	lds	r31, 0x0BC6
     34a:	8d b7       	in	r24, 0x3d	; 61
     34c:	9e b7       	in	r25, 0x3e	; 62
     34e:	f3 95       	inc	r31
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
     354:	80 91 c3 0b 	lds	r24, 0x0BC3
     358:	90 91 c4 0b 	lds	r25, 0x0BC4
     35c:	9e bf       	out	0x3e, r25	; 62
     35e:	8d bf       	out	0x3d, r24	; 61
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 29 02 	sts	0x0229, r24
     366:	80 91 c7 0b 	lds	r24, 0x0BC7
     36a:	90 91 c8 0b 	lds	r25, 0x0BC8
     36e:	05 96       	adiw	r24, 0x05	; 5
     370:	90 93 c8 0b 	sts	0x0BC8, r25
     374:	80 93 c7 0b 	sts	0x0BC7, r24
     378:	e8 e8       	ldi	r30, 0x88	; 136
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	80 5f       	subi	r24, 0xF0	; 240
     382:	98 4d       	sbci	r25, 0xD8	; 216
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
     388:	80 91 c3 0b 	lds	r24, 0x0BC3
     38c:	90 91 c4 0b 	lds	r25, 0x0BC4
     390:	9e bf       	out	0x3e, r25	; 62
     392:	8d bf       	out	0x3d, r24	; 61
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	2f 90       	pop	r2
     39a:	3f 90       	pop	r3
     39c:	4f 90       	pop	r4
     39e:	5f 90       	pop	r5
     3a0:	6f 90       	pop	r6
     3a2:	7f 90       	pop	r7
     3a4:	8f 90       	pop	r8
     3a6:	9f 90       	pop	r9
     3a8:	af 90       	pop	r10
     3aa:	bf 90       	pop	r11
     3ac:	cf 90       	pop	r12
     3ae:	df 90       	pop	r13
     3b0:	ef 90       	pop	r14
     3b2:	ff 90       	pop	r15
     3b4:	0f 91       	pop	r16
     3b6:	1f 91       	pop	r17
     3b8:	2f 91       	pop	r18
     3ba:	3f 91       	pop	r19
     3bc:	4f 91       	pop	r20
     3be:	5f 91       	pop	r21
     3c0:	6f 91       	pop	r22
     3c2:	7f 91       	pop	r23
     3c4:	8f 91       	pop	r24
     3c6:	9f 91       	pop	r25
     3c8:	af 91       	pop	r26
     3ca:	bf 91       	pop	r27
     3cc:	cf 91       	pop	r28
     3ce:	df 91       	pop	r29
     3d0:	ef 91       	pop	r30
     3d2:	ff 91       	pop	r31
     3d4:	ff bf       	out	0x3f, r31	; 63
     3d6:	ff 91       	pop	r31
     3d8:	fc bf       	out	0x3c, r31	; 60
     3da:	ff 91       	pop	r31
     3dc:	08 95       	ret

000003de <OS_Abort>:
     3de:	f8 94       	cli
     3e0:	80 ef       	ldi	r24, 0xF0	; 240
     3e2:	84 b9       	out	0x04, r24	; 4
     3e4:	80 91 00 02 	lds	r24, 0x0200
     3e8:	83 30       	cpi	r24, 0x03	; 3
     3ea:	28 f4       	brcc	.+10     	; 0x3f6 <OS_Abort+0x18>
     3ec:	30 91 00 02 	lds	r19, 0x0200
     3f0:	3f 5f       	subi	r19, 0xFF	; 255
     3f2:	40 e6       	ldi	r20, 0x60	; 96
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <OS_Abort+0x20>
     3f6:	30 91 00 02 	lds	r19, 0x0200
     3fa:	32 50       	subi	r19, 0x02	; 2
     3fc:	40 e9       	ldi	r20, 0x90	; 144
     3fe:	70 ef       	ldi	r23, 0xF0	; 240
     400:	64 e6       	ldi	r22, 0x64	; 100
     402:	2a e0       	ldi	r18, 0x0A	; 10
     404:	54 e1       	ldi	r21, 0x14	; 20
     406:	75 b9       	out	0x05, r23	; 5
     408:	86 2f       	mov	r24, r22
     40a:	9f e7       	ldi	r25, 0x7F	; 127
     40c:	a8 e3       	ldi	r26, 0x38	; 56
     40e:	e1 e0       	ldi	r30, 0x01	; 1
     410:	91 50       	subi	r25, 0x01	; 1
     412:	a0 40       	sbci	r26, 0x00	; 0
     414:	e0 40       	sbci	r30, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <OS_Abort+0x32>
     418:	00 c0       	rjmp	.+0      	; 0x41a <OS_Abort+0x3c>
     41a:	00 00       	nop
     41c:	81 50       	subi	r24, 0x01	; 1
     41e:	a9 f7       	brne	.-22     	; 0x40a <OS_Abort+0x2c>
     420:	15 b8       	out	0x05, r1	; 5
     422:	88 e2       	ldi	r24, 0x28	; 40
     424:	ff e7       	ldi	r31, 0x7F	; 127
     426:	98 e3       	ldi	r25, 0x38	; 56
     428:	a1 e0       	ldi	r26, 0x01	; 1
     42a:	f1 50       	subi	r31, 0x01	; 1
     42c:	90 40       	sbci	r25, 0x00	; 0
     42e:	a0 40       	sbci	r26, 0x00	; 0
     430:	e1 f7       	brne	.-8      	; 0x42a <OS_Abort+0x4c>
     432:	00 c0       	rjmp	.+0      	; 0x434 <OS_Abort+0x56>
     434:	00 00       	nop
     436:	81 50       	subi	r24, 0x01	; 1
     438:	a9 f7       	brne	.-22     	; 0x424 <OS_Abort+0x46>
     43a:	33 23       	and	r19, r19
     43c:	59 f1       	breq	.+86     	; 0x494 <OS_Abort+0xb6>
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	45 b9       	out	0x05, r20	; 5
     442:	82 2f       	mov	r24, r18
     444:	ef e7       	ldi	r30, 0x7F	; 127
     446:	f8 e3       	ldi	r31, 0x38	; 56
     448:	a1 e0       	ldi	r26, 0x01	; 1
     44a:	e1 50       	subi	r30, 0x01	; 1
     44c:	f0 40       	sbci	r31, 0x00	; 0
     44e:	a0 40       	sbci	r26, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <OS_Abort+0x6c>
     452:	00 c0       	rjmp	.+0      	; 0x454 <OS_Abort+0x76>
     454:	00 00       	nop
     456:	81 50       	subi	r24, 0x01	; 1
     458:	a9 f7       	brne	.-22     	; 0x444 <OS_Abort+0x66>
     45a:	15 b8       	out	0x05, r1	; 5
     45c:	82 2f       	mov	r24, r18
     45e:	ef e7       	ldi	r30, 0x7F	; 127
     460:	f8 e3       	ldi	r31, 0x38	; 56
     462:	a1 e0       	ldi	r26, 0x01	; 1
     464:	e1 50       	subi	r30, 0x01	; 1
     466:	f0 40       	sbci	r31, 0x00	; 0
     468:	a0 40       	sbci	r26, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <OS_Abort+0x86>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <OS_Abort+0x90>
     46e:	00 00       	nop
     470:	81 50       	subi	r24, 0x01	; 1
     472:	a9 f7       	brne	.-22     	; 0x45e <OS_Abort+0x80>
     474:	9f 5f       	subi	r25, 0xFF	; 255
     476:	93 13       	cpse	r25, r19
     478:	e3 cf       	rjmp	.-58     	; 0x440 <OS_Abort+0x62>
     47a:	0c c0       	rjmp	.+24     	; 0x494 <OS_Abort+0xb6>
     47c:	ef e7       	ldi	r30, 0x7F	; 127
     47e:	f8 e3       	ldi	r31, 0x38	; 56
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	e1 50       	subi	r30, 0x01	; 1
     484:	f0 40       	sbci	r31, 0x00	; 0
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <OS_Abort+0xa4>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <OS_Abort+0xae>
     48c:	00 00       	nop
     48e:	81 50       	subi	r24, 0x01	; 1
     490:	a9 f7       	brne	.-22     	; 0x47c <OS_Abort+0x9e>
     492:	b9 cf       	rjmp	.-142    	; 0x406 <OS_Abort+0x28>
     494:	85 2f       	mov	r24, r21
     496:	f2 cf       	rjmp	.-28     	; 0x47c <OS_Abort+0x9e>

00000498 <Now>:

#define CYCLES_IN_MS (TICK_CYCLES/TICK)

uint16_t Now() {
	return ms_counter + ((10000 - (OCR1A - TCNT1))/CYCLES_IN_MS);
     498:	20 91 84 00 	lds	r18, 0x0084
     49c:	30 91 85 00 	lds	r19, 0x0085
     4a0:	80 91 88 00 	lds	r24, 0x0088
     4a4:	90 91 89 00 	lds	r25, 0x0089
     4a8:	20 5f       	subi	r18, 0xF0	; 240
     4aa:	38 4d       	sbci	r19, 0xD8	; 216
     4ac:	28 1b       	sub	r18, r24
     4ae:	39 0b       	sbc	r19, r25
     4b0:	32 95       	swap	r19
     4b2:	22 95       	swap	r18
     4b4:	2f 70       	andi	r18, 0x0F	; 15
     4b6:	23 27       	eor	r18, r19
     4b8:	3f 70       	andi	r19, 0x0F	; 15
     4ba:	23 27       	eor	r18, r19
     4bc:	a3 e6       	ldi	r26, 0x63	; 99
     4be:	b0 e1       	ldi	r27, 0x10	; 16
     4c0:	aa d3       	rcall	.+1876   	; 0xc16 <__umulhisi3>
     4c2:	96 95       	lsr	r25
     4c4:	87 95       	ror	r24
     4c6:	96 95       	lsr	r25
     4c8:	87 95       	ror	r24
     4ca:	96 95       	lsr	r25
     4cc:	87 95       	ror	r24
     4ce:	20 91 c7 0b 	lds	r18, 0x0BC7
     4d2:	30 91 c8 0b 	lds	r19, 0x0BC8
}
     4d6:	82 0f       	add	r24, r18
     4d8:	93 1f       	adc	r25, r19
     4da:	08 95       	ret

000004dc <_ZL7enqueueP7queue_tP9td_struct>:
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	8c 01       	movw	r16, r24
     4ea:	eb 01       	movw	r28, r22
	task_to_add->next = NULL;
     4ec:	fb 01       	movw	r30, r22
     4ee:	e1 5f       	subi	r30, 0xF1	; 241
     4f0:	fe 4f       	sbci	r31, 0xFE	; 254
     4f2:	11 82       	std	Z+1, r1	; 0x01
     4f4:	10 82       	st	Z, r1
	
	if(queue_ptr->head == NULL)
     4f6:	dc 01       	movw	r26, r24
     4f8:	ed 90       	ld	r14, X+
     4fa:	fc 90       	ld	r15, X
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	e1 14       	cp	r14, r1
     500:	f1 04       	cpc	r15, r1
     502:	41 f4       	brne	.+16     	; 0x514 <_ZL7enqueueP7queue_tP9td_struct+0x38>
	{
		/* empty queue */
		queue_ptr->head = task_to_add;
     504:	11 96       	adiw	r26, 0x01	; 1
     506:	7c 93       	st	X, r23
     508:	6e 93       	st	-X, r22
		queue_ptr->tail = task_to_add;
     50a:	13 96       	adiw	r26, 0x03	; 3
     50c:	7c 93       	st	X, r23
     50e:	6e 93       	st	-X, r22
     510:	12 97       	sbiw	r26, 0x02	; 2
		return;
     512:	63 c0       	rjmp	.+198    	; 0x5da <_ZL7enqueueP7queue_tP9td_struct+0xfe>
	}
	
	if(task_to_add->level == PERIODIC) 
     514:	fb 01       	movw	r30, r22
     516:	ea 5f       	subi	r30, 0xFA	; 250
     518:	fe 4f       	sbci	r31, 0xFE	; 254
     51a:	80 81       	ld	r24, Z
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	09 f0       	breq	.+2      	; 0x522 <_ZL7enqueueP7queue_tP9td_struct+0x46>
     520:	4f c0       	rjmp	.+158    	; 0x5c0 <_ZL7enqueueP7queue_tP9td_struct+0xe4>
	{
		task_descriptor_t* head_ptr = queue_ptr->head;
		uint16_t now = Now();
     522:	ba df       	rcall	.-140    	; 0x498 <Now>
		if ((task_to_add->offset - (now - task_to_add->last)) < (head_ptr->offset - (now - head_ptr->last)))
     524:	fe 01       	movw	r30, r28
     526:	e3 5f       	subi	r30, 0xF3	; 243
     528:	fe 4f       	sbci	r31, 0xFE	; 254
     52a:	60 81       	ld	r22, Z
     52c:	71 81       	ldd	r23, Z+1	; 0x01
     52e:	32 97       	sbiw	r30, 0x02	; 2
     530:	20 81       	ld	r18, Z
     532:	31 81       	ldd	r19, Z+1	; 0x01
     534:	62 0f       	add	r22, r18
     536:	73 1f       	adc	r23, r19
     538:	68 1b       	sub	r22, r24
     53a:	79 0b       	sbc	r23, r25
     53c:	f7 01       	movw	r30, r14
     53e:	e3 5f       	subi	r30, 0xF3	; 243
     540:	fe 4f       	sbci	r31, 0xFE	; 254
     542:	40 81       	ld	r20, Z
     544:	51 81       	ldd	r21, Z+1	; 0x01
     546:	32 97       	sbiw	r30, 0x02	; 2
     548:	20 81       	ld	r18, Z
     54a:	31 81       	ldd	r19, Z+1	; 0x01
     54c:	24 0f       	add	r18, r20
     54e:	35 1f       	adc	r19, r21
     550:	28 1b       	sub	r18, r24
     552:	39 0b       	sbc	r19, r25
     554:	62 17       	cp	r22, r18
     556:	73 07       	cpc	r23, r19
     558:	58 f5       	brcc	.+86     	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct+0xd4>
		{
			task_to_add->next = queue_ptr->head;
     55a:	f8 01       	movw	r30, r16
     55c:	80 81       	ld	r24, Z
     55e:	91 81       	ldd	r25, Z+1	; 0x01
     560:	fe 01       	movw	r30, r28
     562:	e1 5f       	subi	r30, 0xF1	; 241
     564:	fe 4f       	sbci	r31, 0xFE	; 254
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
			queue_ptr->head = task_to_add;
     56a:	d8 01       	movw	r26, r16
     56c:	cd 93       	st	X+, r28
     56e:	dc 93       	st	X, r29
			return;
     570:	34 c0       	rjmp	.+104    	; 0x5da <_ZL7enqueueP7queue_tP9td_struct+0xfe>
		} 
		else
		{
			while(head_ptr->next != NULL)
			{
				if ((task_to_add->offset - (now - task_to_add->last)) < (head_ptr->next->offset - (now - head_ptr->next->last)))
     572:	f9 01       	movw	r30, r18
     574:	e3 5f       	subi	r30, 0xF3	; 243
     576:	fe 4f       	sbci	r31, 0xFE	; 254
     578:	01 90       	ld	r0, Z+
     57a:	f0 81       	ld	r31, Z
     57c:	e0 2d       	mov	r30, r0
     57e:	d9 01       	movw	r26, r18
     580:	a5 5f       	subi	r26, 0xF5	; 245
     582:	be 4f       	sbci	r27, 0xFE	; 254
     584:	4d 91       	ld	r20, X+
     586:	5c 91       	ld	r21, X
     588:	4e 0f       	add	r20, r30
     58a:	5f 1f       	adc	r21, r31
     58c:	48 1b       	sub	r20, r24
     58e:	59 0b       	sbc	r21, r25
     590:	64 17       	cp	r22, r20
     592:	75 07       	cpc	r23, r21
     594:	10 f0       	brcs	.+4      	; 0x59a <_ZL7enqueueP7queue_tP9td_struct+0xbe>
			queue_ptr->head = task_to_add;
			return;
		} 
		else
		{
			while(head_ptr->next != NULL)
     596:	79 01       	movw	r14, r18
     598:	0b c0       	rjmp	.+22     	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct+0xd4>
			{
				if ((task_to_add->offset - (now - task_to_add->last)) < (head_ptr->next->offset - (now - head_ptr->next->last)))
				{
					task_to_add->next = head_ptr->next;
     59a:	fe 01       	movw	r30, r28
     59c:	e1 5f       	subi	r30, 0xF1	; 241
     59e:	fe 4f       	sbci	r31, 0xFE	; 254
     5a0:	31 83       	std	Z+1, r19	; 0x01
     5a2:	20 83       	st	Z, r18
					head_ptr->next = task_to_add;
     5a4:	f7 01       	movw	r30, r14
     5a6:	e1 5f       	subi	r30, 0xF1	; 241
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	d1 83       	std	Z+1, r29	; 0x01
     5ac:	c0 83       	st	Z, r28
					return;
     5ae:	15 c0       	rjmp	.+42     	; 0x5da <_ZL7enqueueP7queue_tP9td_struct+0xfe>
			queue_ptr->head = task_to_add;
			return;
		} 
		else
		{
			while(head_ptr->next != NULL)
     5b0:	f7 01       	movw	r30, r14
     5b2:	e1 5f       	subi	r30, 0xF1	; 241
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	20 81       	ld	r18, Z
     5b8:	31 81       	ldd	r19, Z+1	; 0x01
     5ba:	21 15       	cp	r18, r1
     5bc:	31 05       	cpc	r19, r1
     5be:	c9 f6       	brne	.-78     	; 0x572 <_ZL7enqueueP7queue_tP9td_struct+0x96>
			}
		}
	}

	/* put task at the back of the queue */
	queue_ptr->tail->next = task_to_add;
     5c0:	d8 01       	movw	r26, r16
     5c2:	12 96       	adiw	r26, 0x02	; 2
     5c4:	ed 91       	ld	r30, X+
     5c6:	fc 91       	ld	r31, X
     5c8:	13 97       	sbiw	r26, 0x03	; 3
     5ca:	e1 5f       	subi	r30, 0xF1	; 241
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	d1 83       	std	Z+1, r29	; 0x01
     5d0:	c0 83       	st	Z, r28
	queue_ptr->tail = task_to_add;
     5d2:	13 96       	adiw	r26, 0x03	; 3
     5d4:	dc 93       	st	X, r29
     5d6:	ce 93       	st	-X, r28
     5d8:	12 97       	sbiw	r26, 0x02	; 2
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	08 95       	ret

000005e8 <_ZL18kernel_create_taskv>:
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;


    if (dead_pool_queue.head == NULL)
     5e8:	80 91 18 02 	lds	r24, 0x0218
     5ec:	90 91 19 02 	lds	r25, 0x0219
     5f0:	89 2b       	or	r24, r25
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <_ZL18kernel_create_taskv+0xe>
     5f4:	76 c0       	rjmp	.+236    	; 0x6e2 <_ZL18kernel_create_taskv+0xfa>
        /* Too many tasks! */
        return 0;
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
     5f6:	80 91 22 02 	lds	r24, 0x0222
     5fa:	88 23       	and	r24, r24
     5fc:	29 f0       	breq	.+10     	; 0x608 <_ZL18kernel_create_taskv+0x20>
		p = &task_desc[MAXPROCESS];
	}
	/* Find an unused descriptor. */
	else
	{
	    p = dequeue(&dead_pool_queue);
     5fe:	88 e1       	ldi	r24, 0x18	; 24
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	5f de       	rcall	.-834    	; 0x2c2 <_ZL7dequeueP7queue_t>
     604:	bc 01       	movw	r22, r24
     606:	02 c0       	rjmp	.+4      	; 0x60c <_ZL18kernel_create_taskv+0x24>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
	{
		p = &task_desc[MAXPROCESS];
     608:	62 eb       	ldi	r22, 0xB2	; 178
     60a:	7a e0       	ldi	r23, 0x0A	; 10
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
     60c:	fb 01       	movw	r30, r22
     60e:	e7 52       	subi	r30, 0x27	; 39
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	10 82       	st	Z, r1
    /* stack_top[31] is r30. */
	stack_top[32] = 0xEE;
     614:	8e ee       	ldi	r24, 0xEE	; 238
     616:	7e 96       	adiw	r30, 0x1e	; 30
     618:	80 83       	st	Z, r24
    stack_top[33] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
     61a:	80 e8       	ldi	r24, 0x80	; 128
     61c:	31 96       	adiw	r30, 0x01	; 1
     61e:	80 83       	st	Z, r24
     * onto the stack in reverse byte order (least significant first, followed
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
	stack_top[35] = (uint8_t)(0);
     620:	32 96       	adiw	r30, 0x02	; 2
     622:	10 82       	st	Z, r1
    stack_top[36] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
     624:	ee e1       	ldi	r30, 0x1E	; 30
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	db 01       	movw	r26, r22
     62e:	a5 50       	subi	r26, 0x05	; 5
     630:	bf 4f       	sbci	r27, 0xFF	; 255
     632:	9c 93       	st	X, r25
    stack_top[37] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
     634:	80 81       	ld	r24, Z
     636:	91 81       	ldd	r25, Z+1	; 0x01
     638:	fb 01       	movw	r30, r22
     63a:	e4 50       	subi	r30, 0x04	; 4
     63c:	ff 4f       	sbci	r31, 0xFF	; 255
     63e:	80 83       	st	Z, r24
    stack_top[38] = (uint8_t)(0);
     640:	31 96       	adiw	r30, 0x01	; 1
     642:	10 82       	st	Z, r1
	stack_top[39] = (uint8_t)((uint16_t)Task_Terminate >> 8);
     644:	81 e7       	ldi	r24, 0x71	; 113
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	90 83       	st	Z, r25
    stack_top[40] = (uint8_t)(uint16_t)Task_Terminate;
     64c:	31 96       	adiw	r30, 0x01	; 1
     64e:	80 83       	st	Z, r24

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
     650:	31 96       	adiw	r30, 0x01	; 1
     652:	cb 01       	movw	r24, r22
     654:	89 52       	subi	r24, 0x29	; 41
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	91 83       	std	Z+1, r25	; 0x01
     65a:	80 83       	st	Z, r24

    p->state = READY;
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	33 96       	adiw	r30, 0x03	; 3
     660:	80 83       	st	Z, r24
    p->arg = kernel_request_create_args.arg;
     662:	80 91 20 02 	lds	r24, 0x0220
     666:	90 91 21 02 	lds	r25, 0x0221
     66a:	31 96       	adiw	r30, 0x01	; 1
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
    p->level = kernel_request_create_args.level;
     670:	80 91 22 02 	lds	r24, 0x0222
     674:	32 96       	adiw	r30, 0x02	; 2
     676:	80 83       	st	Z, r24
	if (p->level == PERIODIC) 
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	c1 f4       	brne	.+48     	; 0x6ac <_ZL18kernel_create_taskv+0xc4>
	{
		p->offset = kernel_request_create_args.start;
     67c:	80 91 27 02 	lds	r24, 0x0227
     680:	90 91 28 02 	lds	r25, 0x0228
     684:	35 96       	adiw	r30, 0x05	; 5
     686:	91 83       	std	Z+1, r25	; 0x01
     688:	80 83       	st	Z, r24
		p->period = kernel_request_create_args.period;
     68a:	80 91 23 02 	lds	r24, 0x0223
     68e:	90 91 24 02 	lds	r25, 0x0224
     692:	34 97       	sbiw	r30, 0x04	; 4
     694:	91 83       	std	Z+1, r25	; 0x01
     696:	80 83       	st	Z, r24
		p->wcet = kernel_request_create_args.wcet;
     698:	80 91 25 02 	lds	r24, 0x0225
     69c:	90 91 26 02 	lds	r25, 0x0226
     6a0:	32 96       	adiw	r30, 0x02	; 2
     6a2:	91 83       	std	Z+1, r25	; 0x01
     6a4:	80 83       	st	Z, r24
		p->last = (uint16_t) 0;
     6a6:	34 96       	adiw	r30, 0x04	; 4
     6a8:	11 82       	std	Z+1, r1	; 0x01
     6aa:	10 82       	st	Z, r1
	}
	switch(kernel_request_create_args.level)
     6ac:	80 91 22 02 	lds	r24, 0x0222
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	29 f0       	breq	.+10     	; 0x6be <_ZL18kernel_create_taskv+0xd6>
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	49 f0       	breq	.+18     	; 0x6ca <_ZL18kernel_create_taskv+0xe2>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	b1 f4       	brne	.+44     	; 0x6e8 <_ZL18kernel_create_taskv+0x100>
     6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <_ZL18kernel_create_taskv+0xee>
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic_queue */
		enqueue(&periodic_queue, p);
     6be:	8c e0       	ldi	r24, 0x0C	; 12
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	0c df       	rcall	.-488    	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
	switch(kernel_request_create_args.level)
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic_queue */
		enqueue(&periodic_queue, p);
		break;
     6c8:	08 95       	ret

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
     6ca:	80 e1       	ldi	r24, 0x10	; 16
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	06 df       	rcall	.-500    	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
		break;
     6d4:	08 95       	ret

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
     6d6:	84 e1       	ldi	r24, 0x14	; 20
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	00 df       	rcall	.-512    	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
		break;
     6e0:	08 95       	ret


    if (dead_pool_queue.head == NULL)
    {
        /* Too many tasks! */
        return 0;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	08 95       	ret
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
}
     6ec:	08 95       	ret

000006ee <_Z7OS_Initv>:
{
    int i;

    /* Set up the clocks */

    TCCR1B |= (_BV(CS11));
     6ee:	e1 e8       	ldi	r30, 0x81	; 129
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	82 60       	ori	r24, 0x02	; 2
     6f6:	80 83       	st	Z, r24
     6f8:	ed e2       	ldi	r30, 0x2D	; 45
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	24 ea       	ldi	r18, 0xA4	; 164
     6fe:	3a e0       	ldi	r19, 0x0A	; 10
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    {
        task_desc[i].state = DEAD;
     700:	10 82       	st	Z, r1
     702:	cf 01       	movw	r24, r30
     704:	0e 96       	adiw	r24, 0x0e	; 14
/*        name_to_task_ptr[i] = NULL;*/
        task_desc[i].next = &task_desc[i + 1];
     706:	95 87       	std	Z+13, r25	; 0x0d
     708:	84 87       	std	Z+12, r24	; 0x0c
     70a:	ef 5e       	subi	r30, 0xEF	; 239
     70c:	fe 4f       	sbci	r31, 0xFE	; 254
    /*
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
     70e:	e2 17       	cp	r30, r18
     710:	f3 07       	cpc	r31, r19
     712:	b1 f7       	brne	.-20     	; 0x700 <_Z7OS_Initv+0x12>
    {
        task_desc[i].state = DEAD;
/*        name_to_task_ptr[i] = NULL;*/
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[MAXPROCESS - 1].next = NULL;
     714:	10 92 b1 0a 	sts	0x0AB1, r1
     718:	10 92 b0 0a 	sts	0x0AB0, r1
    dead_pool_queue.head = &task_desc[0];
     71c:	0f 2e       	mov	r0, r31
     71e:	fa e2       	ldi	r31, 0x2A	; 42
     720:	ef 2e       	mov	r14, r31
     722:	f2 e0       	ldi	r31, 0x02	; 2
     724:	ff 2e       	mov	r15, r31
     726:	f0 2d       	mov	r31, r0
     728:	f0 92 19 02 	sts	0x0219, r15
     72c:	e0 92 18 02 	sts	0x0218, r14
    dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
     730:	81 ea       	ldi	r24, 0xA1	; 161
     732:	99 e0       	ldi	r25, 0x09	; 9
     734:	90 93 1b 02 	sts	0x021B, r25
     738:	80 93 1a 02 	sts	0x021A, r24

	/* Create idle "task" */
    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
     73c:	0e e1       	ldi	r16, 0x1E	; 30
     73e:	12 e0       	ldi	r17, 0x02	; 2
     740:	8e ea       	ldi	r24, 0xAE	; 174
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	f8 01       	movw	r30, r16
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
    kernel_request_create_args.level = NULL;
     74a:	c2 e2       	ldi	r28, 0x22	; 34
     74c:	d2 e0       	ldi	r29, 0x02	; 2
     74e:	18 82       	st	Y, r1
    kernel_create_task();
     750:	4b df       	rcall	.-362    	; 0x5e8 <_ZL18kernel_create_taskv>

    /* Create "main" task as SYSTEM level. */
    kernel_request_create_args.f = (voidfuncvoid_ptr)r_main;
     752:	83 e9       	ldi	r24, 0x93	; 147
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	f8 01       	movw	r30, r16
     758:	91 83       	std	Z+1, r25	; 0x01
     75a:	80 83       	st	Z, r24
    kernel_request_create_args.level = SYSTEM;
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	88 83       	st	Y, r24
    kernel_create_task();
     760:	43 df       	rcall	.-378    	; 0x5e8 <_ZL18kernel_create_taskv>

    /* First time through. Select "main" task to run first. */
    cur_task = task_desc;
     762:	f0 92 c6 0b 	sts	0x0BC6, r15
     766:	e0 92 c5 0b 	sts	0x0BC5, r14
    cur_task->state = RUNNING;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	80 93 2d 03 	sts	0x032D, r24
    dequeue(&system_queue);
     770:	80 e1       	ldi	r24, 0x10	; 16
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	a6 dd       	rcall	.-1204   	; 0x2c2 <_ZL7dequeueP7queue_t>

    /* Set up Timer 1 Output Compare interrupt,the TICK clock. */
    TIMSK1 |= _BV(OCIE1A);
     776:	ef e6       	ldi	r30, 0x6F	; 111
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 83       	st	Z, r24
    OCR1A = TCNT1 + TICK_CYCLES;
     780:	80 91 84 00 	lds	r24, 0x0084
     784:	90 91 85 00 	lds	r25, 0x0085
     788:	80 5f       	subi	r24, 0xF0	; 240
     78a:	98 4d       	sbci	r25, 0xD8	; 216
     78c:	90 93 89 00 	sts	0x0089, r25
     790:	80 93 88 00 	sts	0x0088, r24
    /* Clear flag. */
    TIFR1 = _BV(OCF1A);
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	86 bb       	out	0x16, r24	; 22
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    {
		uint16_t now = Now();
		if(system_queue.head != NULL)
     798:	c0 e1       	ldi	r28, 0x10	; 16
     79a:	d2 e0       	ldi	r29, 0x02	; 2
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }

        cur_task->state = RUNNING;
     79c:	77 24       	eor	r7, r7
     79e:	73 94       	inc	r7
		uint16_t now = Now();
		if(system_queue.head != NULL)
        {
            cur_task = dequeue(&system_queue);
        }
        else if ((&periodic_queue)->head->offset < (now - (&periodic_queue)->head->last))
     7a0:	0c e0       	ldi	r16, 0x0C	; 12
     7a2:	12 e0       	ldi	r17, 0x02	; 2
        {
            /* Keep running the current PERIODIC task. */
            cur_task = dequeue(&periodic_queue);
        }
        else if(rr_queue.head != NULL)
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f4 e1       	ldi	r31, 0x14	; 20
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f2 e0       	ldi	r31, 0x02	; 2
     7ac:	ff 2e       	mov	r15, r31
     7ae:	f0 2d       	mov	r31, r0
            cur_task = dequeue(&rr_queue);
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f2 eb       	ldi	r31, 0xB2	; 178
     7b4:	af 2e       	mov	r10, r31
     7b6:	fa e0       	ldi	r31, 0x0A	; 10
     7b8:	bf 2e       	mov	r11, r31
     7ba:	f0 2d       	mov	r31, r0
         * making the request.
         */
        if(kernel_request_retval)
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
     7bc:	0f 2e       	mov	r0, r31
     7be:	f2 e2       	ldi	r31, 0x22	; 34
     7c0:	cf 2e       	mov	r12, r31
     7c2:	f2 e0       	ldi	r31, 0x02	; 2
     7c4:	df 2e       	mov	r13, r31
     7c6:	f0 2d       	mov	r31, r0

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
               kernel_request_create_args.level == PERIODIC)
            {
                cur_task->state = READY;
     7c8:	68 94       	set
     7ca:	66 24       	eor	r6, r6
     7cc:	61 f8       	bld	r6, 1
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
     7ce:	80 91 c5 0b 	lds	r24, 0x0BC5
     7d2:	90 91 c6 0b 	lds	r25, 0x0BC6
     7d6:	fc 01       	movw	r30, r24
     7d8:	ed 5f       	subi	r30, 0xFD	; 253
     7da:	fe 4f       	sbci	r31, 0xFE	; 254
     7dc:	20 81       	ld	r18, Z
     7de:	21 30       	cpi	r18, 0x01	; 1
     7e0:	21 f4       	brne	.+8      	; 0x7ea <_Z7OS_Initv+0xfc>
     7e2:	82 5b       	subi	r24, 0xB2	; 178
     7e4:	9a 40       	sbci	r25, 0x0A	; 10
     7e6:	09 f0       	breq	.+2      	; 0x7ea <_Z7OS_Initv+0xfc>
     7e8:	3c c0       	rjmp	.+120    	; 0x862 <_Z7OS_Initv+0x174>
    {
		uint16_t now = Now();
     7ea:	56 de       	rcall	.-852    	; 0x498 <Now>
		if(system_queue.head != NULL)
     7ec:	28 81       	ld	r18, Y
     7ee:	39 81       	ldd	r19, Y+1	; 0x01
     7f0:	23 2b       	or	r18, r19
     7f2:	39 f0       	breq	.+14     	; 0x802 <_Z7OS_Initv+0x114>
        {
            cur_task = dequeue(&system_queue);
     7f4:	ce 01       	movw	r24, r28
     7f6:	65 dd       	rcall	.-1334   	; 0x2c2 <_ZL7dequeueP7queue_t>
     7f8:	90 93 c6 0b 	sts	0x0BC6, r25
     7fc:	80 93 c5 0b 	sts	0x0BC5, r24
     800:	29 c0       	rjmp	.+82     	; 0x854 <_Z7OS_Initv+0x166>
        }
        else if ((&periodic_queue)->head->offset < (now - (&periodic_queue)->head->last))
     802:	f8 01       	movw	r30, r16
     804:	20 81       	ld	r18, Z
     806:	31 81       	ldd	r19, Z+1	; 0x01
     808:	f9 01       	movw	r30, r18
     80a:	e5 5f       	subi	r30, 0xF5	; 245
     80c:	fe 4f       	sbci	r31, 0xFE	; 254
     80e:	d9 01       	movw	r26, r18
     810:	a3 5f       	subi	r26, 0xF3	; 243
     812:	be 4f       	sbci	r27, 0xFE	; 254
     814:	2d 91       	ld	r18, X+
     816:	3c 91       	ld	r19, X
     818:	82 1b       	sub	r24, r18
     81a:	93 0b       	sbc	r25, r19
     81c:	20 81       	ld	r18, Z
     81e:	31 81       	ldd	r19, Z+1	; 0x01
     820:	28 17       	cp	r18, r24
     822:	39 07       	cpc	r19, r25
     824:	38 f4       	brcc	.+14     	; 0x834 <_Z7OS_Initv+0x146>
        {
            /* Keep running the current PERIODIC task. */
            cur_task = dequeue(&periodic_queue);
     826:	c8 01       	movw	r24, r16
     828:	4c dd       	rcall	.-1384   	; 0x2c2 <_ZL7dequeueP7queue_t>
     82a:	90 93 c6 0b 	sts	0x0BC6, r25
     82e:	80 93 c5 0b 	sts	0x0BC5, r24
     832:	10 c0       	rjmp	.+32     	; 0x854 <_Z7OS_Initv+0x166>
        }
        else if(rr_queue.head != NULL)
     834:	f7 01       	movw	r30, r14
     836:	80 81       	ld	r24, Z
     838:	91 81       	ldd	r25, Z+1	; 0x01
     83a:	89 2b       	or	r24, r25
     83c:	39 f0       	breq	.+14     	; 0x84c <_Z7OS_Initv+0x15e>
        {
            cur_task = dequeue(&rr_queue);
     83e:	c7 01       	movw	r24, r14
     840:	40 dd       	rcall	.-1408   	; 0x2c2 <_ZL7dequeueP7queue_t>
     842:	90 93 c6 0b 	sts	0x0BC6, r25
     846:	80 93 c5 0b 	sts	0x0BC5, r24
     84a:	04 c0       	rjmp	.+8      	; 0x854 <_Z7OS_Initv+0x166>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     84c:	b0 92 c6 0b 	sts	0x0BC6, r11
     850:	a0 92 c5 0b 	sts	0x0BC5, r10
        }

        cur_task->state = RUNNING;
     854:	e0 91 c5 0b 	lds	r30, 0x0BC5
     858:	f0 91 c6 0b 	lds	r31, 0x0BC6
     85c:	ed 5f       	subi	r30, 0xFD	; 253
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	70 82       	st	Z, r7
{
    for(;;)
    {
        kernel_dispatch();

        exit_kernel();
     862:	7d dc       	rcall	.-1798   	; 0x15e <_ZL11exit_kernelv>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waitng queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
     864:	80 91 29 02 	lds	r24, 0x0229
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	09 f4       	brne	.+2      	; 0x86e <_Z7OS_Initv+0x180>
     86c:	4a c0       	rjmp	.+148    	; 0x902 <_Z7OS_Initv+0x214>
     86e:	30 f4       	brcc	.+12     	; 0x87c <_Z7OS_Initv+0x18e>
     870:	88 23       	and	r24, r24
     872:	09 f4       	brne	.+2      	; 0x876 <_Z7OS_Initv+0x188>
     874:	bd c0       	rjmp	.+378    	; 0x9f0 <_Z7OS_Initv+0x302>
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	51 f0       	breq	.+20     	; 0x88e <_Z7OS_Initv+0x1a0>
     87a:	b6 c0       	rjmp	.+364    	; 0x9e8 <_Z7OS_Initv+0x2fa>
     87c:	84 30       	cpi	r24, 0x04	; 4
     87e:	09 f4       	brne	.+2      	; 0x882 <_Z7OS_Initv+0x194>
     880:	86 c0       	rjmp	.+268    	; 0x98e <_Z7OS_Initv+0x2a0>
     882:	08 f4       	brcc	.+2      	; 0x886 <_Z7OS_Initv+0x198>
     884:	74 c0       	rjmp	.+232    	; 0x96e <_Z7OS_Initv+0x280>
     886:	85 30       	cpi	r24, 0x05	; 5
     888:	09 f4       	brne	.+2      	; 0x88c <_Z7OS_Initv+0x19e>
     88a:	b2 c0       	rjmp	.+356    	; 0x9f0 <_Z7OS_Initv+0x302>
     88c:	ad c0       	rjmp	.+346    	; 0x9e8 <_Z7OS_Initv+0x2fa>
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */
   
	/* If Periodic task still running then error more than wcet */
	if(cur_task != NULL && cur_task->level == PERIODIC && cur_task->state == RUNNING)
     88e:	80 90 c5 0b 	lds	r8, 0x0BC5
     892:	90 90 c6 0b 	lds	r9, 0x0BC6
     896:	81 14       	cp	r8, r1
     898:	91 04       	cpc	r9, r1
     89a:	11 f1       	breq	.+68     	; 0x8e0 <_Z7OS_Initv+0x1f2>
     89c:	f4 01       	movw	r30, r8
     89e:	ea 5f       	subi	r30, 0xFA	; 250
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	80 81       	ld	r24, Z
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	e1 f4       	brne	.+56     	; 0x8e0 <_Z7OS_Initv+0x1f2>
     8a8:	33 97       	sbiw	r30, 0x03	; 3
     8aa:	80 81       	ld	r24, Z
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <_Z7OS_Initv+0x1c4>
     8b0:	9f c0       	rjmp	.+318    	; 0x9f0 <_Z7OS_Initv+0x302>
	{
		uint16_t now = Now();
     8b2:	f2 dd       	rcall	.-1052   	; 0x498 <Now>
		if((cur_task->offset + cur_task->wcet) < (now - cur_task->last))
     8b4:	f4 01       	movw	r30, r8
     8b6:	e7 5f       	subi	r30, 0xF7	; 247
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ba:	40 81       	ld	r20, Z
     8bc:	51 81       	ldd	r21, Z+1	; 0x01
     8be:	32 96       	adiw	r30, 0x02	; 2
     8c0:	20 81       	ld	r18, Z
     8c2:	31 81       	ldd	r19, Z+1	; 0x01
     8c4:	24 0f       	add	r18, r20
     8c6:	35 1f       	adc	r19, r21
     8c8:	32 96       	adiw	r30, 0x02	; 2
     8ca:	40 81       	ld	r20, Z
     8cc:	51 81       	ldd	r21, Z+1	; 0x01
     8ce:	84 1b       	sub	r24, r20
     8d0:	95 0b       	sbc	r25, r21
     8d2:	28 17       	cp	r18, r24
     8d4:	39 07       	cpc	r19, r25
     8d6:	20 f4       	brcc	.+8      	; 0x8e0 <_Z7OS_Initv+0x1f2>
		{
			/* error handling */
			error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	80 93 00 02 	sts	0x0200, r24
			OS_Abort();
     8de:	7f dd       	rcall	.-1282   	; 0x3de <OS_Abort>

    case TIMER_EXPIRED:
        kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
     8e0:	f4 01       	movw	r30, r8
     8e2:	ea 5f       	subi	r30, 0xFA	; 250
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	80 81       	ld	r24, Z
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <_Z7OS_Initv+0x200>
     8ec:	81 c0       	rjmp	.+258    	; 0x9f0 <_Z7OS_Initv+0x302>
     8ee:	33 97       	sbiw	r30, 0x03	; 3
     8f0:	80 81       	ld	r24, Z
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <_Z7OS_Initv+0x20a>
     8f6:	7c c0       	rjmp	.+248    	; 0x9f0 <_Z7OS_Initv+0x302>
        {
            cur_task->state = READY;
     8f8:	60 82       	st	Z, r6
            enqueue(&rr_queue, cur_task);
     8fa:	b4 01       	movw	r22, r8
     8fc:	c7 01       	movw	r24, r14
     8fe:	ee dd       	rcall	.-1060   	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
     900:	77 c0       	rjmp	.+238    	; 0x9f0 <_Z7OS_Initv+0x302>
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
     902:	72 de       	rcall	.-796    	; 0x5e8 <_ZL18kernel_create_taskv>
     904:	90 93 1d 02 	sts	0x021D, r25
     908:	80 93 1c 02 	sts	0x021C, r24

        /* Check if new task has higher priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
     90c:	80 91 1c 02 	lds	r24, 0x021C
     910:	90 91 1d 02 	lds	r25, 0x021D
     914:	89 2b       	or	r24, r25
     916:	09 f4       	brne	.+2      	; 0x91a <_Z7OS_Initv+0x22c>
     918:	6b c0       	rjmp	.+214    	; 0x9f0 <_Z7OS_Initv+0x302>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
     91a:	f6 01       	movw	r30, r12
     91c:	80 81       	ld	r24, Z
     91e:	83 30       	cpi	r24, 0x03	; 3
     920:	61 f4       	brne	.+24     	; 0x93a <_Z7OS_Initv+0x24c>
     922:	80 91 c5 0b 	lds	r24, 0x0BC5
     926:	90 91 c6 0b 	lds	r25, 0x0BC6
     92a:	fc 01       	movw	r30, r24
     92c:	ea 5f       	subi	r30, 0xFA	; 250
     92e:	fe 4f       	sbci	r31, 0xFE	; 254
     930:	20 81       	ld	r18, Z
     932:	23 30       	cpi	r18, 0x03	; 3
     934:	09 f0       	breq	.+2      	; 0x938 <_Z7OS_Initv+0x24a>
     936:	5f c0       	rjmp	.+190    	; 0x9f6 <_Z7OS_Initv+0x308>
     938:	5b c0       	rjmp	.+182    	; 0x9f0 <_Z7OS_Initv+0x302>
            {
                cur_task->state = READY;
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
     93a:	60 91 c5 0b 	lds	r22, 0x0BC5
     93e:	70 91 c6 0b 	lds	r23, 0x0BC6
     942:	fb 01       	movw	r30, r22
     944:	ea 5f       	subi	r30, 0xFA	; 250
     946:	fe 4f       	sbci	r31, 0xFE	; 254
     948:	80 81       	ld	r24, Z
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	09 f0       	breq	.+2      	; 0x950 <_Z7OS_Initv+0x262>
     94e:	50 c0       	rjmp	.+160    	; 0x9f0 <_Z7OS_Initv+0x302>
               kernel_request_create_args.level == PERIODIC)
     950:	f6 01       	movw	r30, r12
     952:	80 81       	ld	r24, Z
            {
                cur_task->state = READY;
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	09 f4       	brne	.+2      	; 0x95a <_Z7OS_Initv+0x26c>
     958:	53 c0       	rjmp	.+166    	; 0xa00 <_Z7OS_Initv+0x312>
            {
                cur_task->state = READY;
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
     95a:	fb 01       	movw	r30, r22
     95c:	ed 5f       	subi	r30, 0xFD	; 253
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	80 81       	ld	r24, Z
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	09 f0       	breq	.+2      	; 0x968 <_Z7OS_Initv+0x27a>
     966:	44 c0       	rjmp	.+136    	; 0x9f0 <_Z7OS_Initv+0x302>
            {
                enqueue(&rr_queue, cur_task);
     968:	c7 01       	movw	r24, r14
     96a:	b8 dd       	rcall	.-1168   	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
     96c:	41 c0       	rjmp	.+130    	; 0x9f0 <_Z7OS_Initv+0x302>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
     96e:	60 91 c5 0b 	lds	r22, 0x0BC5
     972:	70 91 c6 0b 	lds	r23, 0x0BC6
     976:	fa e0       	ldi	r31, 0x0A	; 10
     978:	62 3b       	cpi	r22, 0xB2	; 178
     97a:	7f 07       	cpc	r23, r31
     97c:	c9 f1       	breq	.+114    	; 0x9f0 <_Z7OS_Initv+0x302>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
     97e:	fb 01       	movw	r30, r22
     980:	ed 5f       	subi	r30, 0xFD	; 253
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	10 82       	st	Z, r1
//     if(cur_task->level == PERIODIC)
//     {
//         name_to_task_ptr[cur_task->name] = NULL;
//     }
    enqueue(&dead_pool_queue, cur_task);
     986:	88 e1       	ldi	r24, 0x18	; 24
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	a8 dd       	rcall	.-1200   	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
     98c:	31 c0       	rjmp	.+98     	; 0x9f0 <_Z7OS_Initv+0x302>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
     98e:	80 90 c5 0b 	lds	r8, 0x0BC5
     992:	90 90 c6 0b 	lds	r9, 0x0BC6
     996:	f4 01       	movw	r30, r8
     998:	ea 5f       	subi	r30, 0xFA	; 250
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	80 81       	ld	r24, Z
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	49 f0       	breq	.+18     	; 0x9b4 <_Z7OS_Initv+0x2c6>
     9a2:	83 30       	cpi	r24, 0x03	; 3
     9a4:	19 f0       	breq	.+6      	; 0x9ac <_Z7OS_Initv+0x2be>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	d1 f4       	brne	.+52     	; 0x9de <_Z7OS_Initv+0x2f0>
     9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <_Z7OS_Initv+0x2ea>
		{
	    case SYSTEM:
	        enqueue(&system_queue, cur_task);
     9ac:	b4 01       	movw	r22, r8
     9ae:	ce 01       	movw	r24, r28
     9b0:	95 dd       	rcall	.-1238   	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
     9b2:	15 c0       	rjmp	.+42     	; 0x9de <_Z7OS_Initv+0x2f0>
			break;

	    case PERIODIC:
			cur_task->last += cur_task->period;
     9b4:	f4 01       	movw	r30, r8
     9b6:	e3 5f       	subi	r30, 0xF3	; 243
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	d4 01       	movw	r26, r8
     9bc:	a9 5f       	subi	r26, 0xF9	; 249
     9be:	be 4f       	sbci	r27, 0xFE	; 254
     9c0:	2d 91       	ld	r18, X+
     9c2:	3c 91       	ld	r19, X
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
	        enqueue(&periodic_queue, cur_task);
     9d0:	b4 01       	movw	r22, r8
     9d2:	c8 01       	movw	r24, r16
     9d4:	83 dd       	rcall	.-1274   	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <_Z7OS_Initv+0x2f0>
	        break;

	    case RR:
	        enqueue(&rr_queue, cur_task);
     9d8:	b4 01       	movw	r22, r8
     9da:	c7 01       	movw	r24, r14
     9dc:	7f dd       	rcall	.-1282   	; 0x4dc <_ZL7enqueueP7queue_tP9td_struct>

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
     9de:	f4 01       	movw	r30, r8
     9e0:	ed 5f       	subi	r30, 0xFD	; 253
     9e2:	fe 4f       	sbci	r31, 0xFE	; 254
     9e4:	60 82       	st	Z, r6
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <_Z7OS_Initv+0x302>
        /* Should not happen. Handled in task itself. */
        break;
		
    default:
        /* Should never happen */
        error_msg = ERR_RUN_5_RTOS_INTERNAL_ERROR;
     9e8:	87 e0       	ldi	r24, 0x07	; 7
     9ea:	80 93 00 02 	sts	0x0200, r24
        OS_Abort();
     9ee:	f7 dc       	rcall	.-1554   	; 0x3de <OS_Abort>
        break;
    }

    kernel_request = NONE;
     9f0:	10 92 29 02 	sts	0x0229, r1
     9f4:	ec ce       	rjmp	.-552    	; 0x7ce <_Z7OS_Initv+0xe0>
        if(kernel_request_retval)
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
            {
                cur_task->state = READY;
     9f6:	fc 01       	movw	r30, r24
     9f8:	ed 5f       	subi	r30, 0xFD	; 253
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	60 82       	st	Z, r6
     9fe:	9d cf       	rjmp	.-198    	; 0x93a <_Z7OS_Initv+0x24c>

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
               kernel_request_create_args.level == PERIODIC)
            {
                cur_task->state = READY;
     a00:	fb 01       	movw	r30, r22
     a02:	ed 5f       	subi	r30, 0xFD	; 253
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	60 82       	st	Z, r6
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
     a08:	33 96       	adiw	r30, 0x03	; 3
     a0a:	80 81       	ld	r24, Z
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	09 f4       	brne	.+2      	; 0xa12 <_Z7OS_Initv+0x324>
     a10:	a4 cf       	rjmp	.-184    	; 0x95a <_Z7OS_Initv+0x26c>
     a12:	ee cf       	rjmp	.-36     	; 0x9f0 <_Z7OS_Initv+0x302>

00000a14 <main>:
/**
 * Runtime entry point into the program; just start the RTOS.  The application layer must define r_main() for its entry point.
 */
int main()
{
	OS_Init();
     a14:	6c de       	rcall	.-808    	; 0x6ee <_Z7OS_Initv>

00000a16 <_Z11print_tracev>:
/**
 * Dump the entire trace array on UART
 * 
 */
void print_trace()
{
     a16:	cf 92       	push	r12
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
    int i;
    int returned_chars;
    
	if (!trace_printed)
     a26:	80 91 eb 0d 	lds	r24, 0x0DEB
     a2a:	81 11       	cpse	r24, r1
     a2c:	4e c0       	rjmp	.+156    	; 0xaca <_Z11print_tracev+0xb4>
	{
        /* the test header */
        returned_chars = sprintf((char*)&trace_buffer, "T%03d;", trace_number);
     a2e:	80 91 ec 0d 	lds	r24, 0x0DEC
     a32:	1f 92       	push	r1
     a34:	8f 93       	push	r24
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	89 ec       	ldi	r24, 0xC9	; 201
     a40:	9b e0       	ldi	r25, 0x0B	; 11
     a42:	9f 93       	push	r25
     a44:	8f 93       	push	r24
     a46:	0a d1       	rcall	.+532    	; 0xc5c <sprintf>
        uart_write((uint8_t*)trace_buffer, returned_chars);    
     a48:	bc 01       	movw	r22, r24
     a4a:	89 ec       	ldi	r24, 0xC9	; 201
     a4c:	9b e0       	ldi	r25, 0x0B	; 11
     a4e:	7d d0       	rcall	.+250    	; 0xb4a <_Z10uart_writePhi>

        /* all traces as 5 digit padded decimals 
        for(i = 0; i < TRACE_ARRAY_SIZE; i++)*/
		for(i = 0; i < (int)trace_counter; i++)
     a50:	80 91 e9 0b 	lds	r24, 0x0BE9
     a54:	90 91 ea 0b 	lds	r25, 0x0BEA
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	18 16       	cp	r1, r24
     a66:	19 06       	cpc	r1, r25
     a68:	4c f5       	brge	.+82     	; 0xabc <_Z11print_tracev+0xa6>
     a6a:	cb ee       	ldi	r28, 0xEB	; 235
     a6c:	db e0       	ldi	r29, 0x0B	; 11
     a6e:	e1 2c       	mov	r14, r1
     a70:	f1 2c       	mov	r15, r1
        {
            returned_chars = sprintf((char*)&trace_buffer, "%u;", trace_array[i]);
     a72:	0f 2e       	mov	r0, r31
     a74:	f8 e0       	ldi	r31, 0x08	; 8
     a76:	cf 2e       	mov	r12, r31
     a78:	f2 e0       	ldi	r31, 0x02	; 2
     a7a:	df 2e       	mov	r13, r31
     a7c:	f0 2d       	mov	r31, r0
     a7e:	09 ec       	ldi	r16, 0xC9	; 201
     a80:	1b e0       	ldi	r17, 0x0B	; 11
     a82:	88 81       	ld	r24, Y
     a84:	99 81       	ldd	r25, Y+1	; 0x01
     a86:	22 96       	adiw	r28, 0x02	; 2
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	df 92       	push	r13
     a8e:	cf 92       	push	r12
     a90:	1f 93       	push	r17
     a92:	0f 93       	push	r16
     a94:	e3 d0       	rcall	.+454    	; 0xc5c <sprintf>
            uart_write((uint8_t*)trace_buffer, returned_chars);
     a96:	bc 01       	movw	r22, r24
     a98:	c8 01       	movw	r24, r16
     a9a:	57 d0       	rcall	.+174    	; 0xb4a <_Z10uart_writePhi>
        returned_chars = sprintf((char*)&trace_buffer, "T%03d;", trace_number);
        uart_write((uint8_t*)trace_buffer, returned_chars);    

        /* all traces as 5 digit padded decimals 
        for(i = 0; i < TRACE_ARRAY_SIZE; i++)*/
		for(i = 0; i < (int)trace_counter; i++)
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	e8 1a       	sub	r14, r24
     aa0:	f8 0a       	sbc	r15, r24
     aa2:	80 91 e9 0b 	lds	r24, 0x0BE9
     aa6:	90 91 ea 0b 	lds	r25, 0x0BEA
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	e8 16       	cp	r14, r24
     ab8:	f9 06       	cpc	r15, r25
     aba:	1c f3       	brlt	.-58     	; 0xa82 <_Z11print_tracev+0x6c>
            returned_chars = sprintf((char*)&trace_buffer, "%u;", trace_array[i]);
            uart_write((uint8_t*)trace_buffer, returned_chars);
            //_delay_ms(1);
        }

        trace_printed = 1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 93 eb 0d 	sts	0x0DEB, r24
        trace_counter = 0;
     ac2:	10 92 ea 0b 	sts	0x0BEA, r1
     ac6:	10 92 e9 0b 	sts	0x0BE9, r1
    }
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	08 95       	ret

00000adc <_Z12add_to_tracej>:
 * 
 * @param number unisigned integer to add
 */
void add_to_trace(uint16_t number)
{
    if (trace_counter < TRACE_ARRAY_SIZE)
     adc:	20 91 e9 0b 	lds	r18, 0x0BE9
     ae0:	30 91 ea 0b 	lds	r19, 0x0BEA
     ae4:	2f 3f       	cpi	r18, 0xFF	; 255
     ae6:	31 05       	cpc	r19, r1
     ae8:	09 f0       	breq	.+2      	; 0xaec <_Z12add_to_tracej+0x10>
     aea:	98 f4       	brcc	.+38     	; 0xb12 <_Z12add_to_tracej+0x36>
    {
        trace_array[trace_counter] = number;
     aec:	e0 91 e9 0b 	lds	r30, 0x0BE9
     af0:	f0 91 ea 0b 	lds	r31, 0x0BEA
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	e5 51       	subi	r30, 0x15	; 21
     afa:	f4 4f       	sbci	r31, 0xF4	; 244
     afc:	91 83       	std	Z+1, r25	; 0x01
     afe:	80 83       	st	Z, r24
        trace_counter++;
     b00:	80 91 e9 0b 	lds	r24, 0x0BE9
     b04:	90 91 ea 0b 	lds	r25, 0x0BEA
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	90 93 ea 0b 	sts	0x0BEA, r25
     b0e:	80 93 e9 0b 	sts	0x0BE9, r24
     b12:	08 95       	ret

00000b14 <_Z14set_trace_testh>:
 * 
 * @param number 
 */
void set_trace_test(uint8_t number)
{
    trace_number = number;
     b14:	80 93 ec 0d 	sts	0x0DEC, r24
     b18:	08 95       	ret

00000b1a <_Z12uart_putcharc>:
	return rxn;
}

void uart_reset_recv(void)
{
	rxn = 0;
     b1a:	f8 94       	cli
     b1c:	e0 ec       	ldi	r30, 0xC0	; 192
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	90 81       	ld	r25, Z
     b22:	95 ff       	sbrs	r25, 5
     b24:	fd cf       	rjmp	.-6      	; 0xb20 <_Z12uart_putcharc+0x6>
     b26:	80 93 c6 00 	sts	0x00C6, r24
     b2a:	78 94       	sei
     b2c:	08 95       	ret

00000b2e <_Z11uart_putstrPc>:
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	ec 01       	movw	r28, r24
     b34:	88 81       	ld	r24, Y
     b36:	88 23       	and	r24, r24
     b38:	29 f0       	breq	.+10     	; 0xb44 <_Z11uart_putstrPc+0x16>
     b3a:	21 96       	adiw	r28, 0x01	; 1
     b3c:	ee df       	rcall	.-36     	; 0xb1a <_Z12uart_putcharc>
     b3e:	89 91       	ld	r24, Y+
     b40:	81 11       	cpse	r24, r1
     b42:	fc cf       	rjmp	.-8      	; 0xb3c <_Z11uart_putstrPc+0xe>
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <_Z10uart_writePhi>:
     b4a:	f1 df       	rcall	.-30     	; 0xb2e <_Z11uart_putstrPc>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	08 95       	ret

00000b52 <_Z9uart_initv>:
     b52:	10 92 53 0e 	sts	0x0E53, r1
     b56:	10 92 52 0e 	sts	0x0E52, r1
     b5a:	10 92 ed 0d 	sts	0x0DED, r1
     b5e:	10 92 c5 00 	sts	0x00C5, r1
     b62:	87 e6       	ldi	r24, 0x67	; 103
     b64:	80 93 c4 00 	sts	0x00C4, r24
     b68:	88 e9       	ldi	r24, 0x98	; 152
     b6a:	80 93 c1 00 	sts	0x00C1, r24
     b6e:	8e e0       	ldi	r24, 0x0E	; 14
     b70:	80 93 c2 00 	sts	0x00C2, r24
     b74:	08 95       	ret

00000b76 <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	0b b6       	in	r0, 0x3b	; 59
     b82:	0f 92       	push	r0
     b84:	5f 93       	push	r21
     b86:	6f 93       	push	r22
     b88:	7f 93       	push	r23
     b8a:	8f 93       	push	r24
     b8c:	9f 93       	push	r25
     b8e:	af 93       	push	r26
     b90:	bf 93       	push	r27
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
     b96:	e0 ec       	ldi	r30, 0xC0	; 192
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	88 23       	and	r24, r24
     b9e:	ec f7       	brge	.-6      	; 0xb9a <__vector_25+0x24>

	//PORTB ^= _BV(PB7);

	rx[rxn] = UDR0;
     ba0:	e0 91 52 0e 	lds	r30, 0x0E52
     ba4:	f0 91 53 0e 	lds	r31, 0x0E53
     ba8:	80 91 c6 00 	lds	r24, 0x00C6
     bac:	e2 51       	subi	r30, 0x12	; 18
     bae:	f2 4f       	sbci	r31, 0xF2	; 242
     bb0:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
     bb2:	80 91 52 0e 	lds	r24, 0x0E52
     bb6:	90 91 53 0e 	lds	r25, 0x0E53
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	64 e6       	ldi	r22, 0x64	; 100
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	17 d0       	rcall	.+46     	; 0xbf0 <__divmodhi4>
     bc2:	90 93 53 0e 	sts	0x0E53, r25
     bc6:	80 93 52 0e 	sts	0x0E52, r24
	uart_rx = 1; // notify main of receipt of data.
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 ed 0d 	sts	0x0DED, r24
	//PORTB = PORTB | _BV(PINB1);
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <__divmodhi4>:
     bf0:	97 fb       	bst	r25, 7
     bf2:	07 2e       	mov	r0, r23
     bf4:	16 f4       	brtc	.+4      	; 0xbfa <__divmodhi4+0xa>
     bf6:	00 94       	com	r0
     bf8:	06 d0       	rcall	.+12     	; 0xc06 <__divmodhi4_neg1>
     bfa:	77 fd       	sbrc	r23, 7
     bfc:	08 d0       	rcall	.+16     	; 0xc0e <__divmodhi4_neg2>
     bfe:	1a d0       	rcall	.+52     	; 0xc34 <__udivmodhi4>
     c00:	07 fc       	sbrc	r0, 7
     c02:	05 d0       	rcall	.+10     	; 0xc0e <__divmodhi4_neg2>
     c04:	3e f4       	brtc	.+14     	; 0xc14 <__divmodhi4_exit>

00000c06 <__divmodhi4_neg1>:
     c06:	90 95       	com	r25
     c08:	81 95       	neg	r24
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	08 95       	ret

00000c0e <__divmodhi4_neg2>:
     c0e:	70 95       	com	r23
     c10:	61 95       	neg	r22
     c12:	7f 4f       	sbci	r23, 0xFF	; 255

00000c14 <__divmodhi4_exit>:
     c14:	08 95       	ret

00000c16 <__umulhisi3>:
     c16:	a2 9f       	mul	r26, r18
     c18:	b0 01       	movw	r22, r0
     c1a:	b3 9f       	mul	r27, r19
     c1c:	c0 01       	movw	r24, r0
     c1e:	a3 9f       	mul	r26, r19
     c20:	70 0d       	add	r23, r0
     c22:	81 1d       	adc	r24, r1
     c24:	11 24       	eor	r1, r1
     c26:	91 1d       	adc	r25, r1
     c28:	b2 9f       	mul	r27, r18
     c2a:	70 0d       	add	r23, r0
     c2c:	81 1d       	adc	r24, r1
     c2e:	11 24       	eor	r1, r1
     c30:	91 1d       	adc	r25, r1
     c32:	08 95       	ret

00000c34 <__udivmodhi4>:
     c34:	aa 1b       	sub	r26, r26
     c36:	bb 1b       	sub	r27, r27
     c38:	51 e1       	ldi	r21, 0x11	; 17
     c3a:	07 c0       	rjmp	.+14     	; 0xc4a <__udivmodhi4_ep>

00000c3c <__udivmodhi4_loop>:
     c3c:	aa 1f       	adc	r26, r26
     c3e:	bb 1f       	adc	r27, r27
     c40:	a6 17       	cp	r26, r22
     c42:	b7 07       	cpc	r27, r23
     c44:	10 f0       	brcs	.+4      	; 0xc4a <__udivmodhi4_ep>
     c46:	a6 1b       	sub	r26, r22
     c48:	b7 0b       	sbc	r27, r23

00000c4a <__udivmodhi4_ep>:
     c4a:	88 1f       	adc	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	5a 95       	dec	r21
     c50:	a9 f7       	brne	.-22     	; 0xc3c <__udivmodhi4_loop>
     c52:	80 95       	com	r24
     c54:	90 95       	com	r25
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	08 95       	ret

00000c5c <sprintf>:
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	2e 97       	sbiw	r28, 0x0e	; 14
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	0e 89       	ldd	r16, Y+22	; 0x16
     c76:	1f 89       	ldd	r17, Y+23	; 0x17
     c78:	86 e0       	ldi	r24, 0x06	; 6
     c7a:	8c 83       	std	Y+4, r24	; 0x04
     c7c:	1a 83       	std	Y+2, r17	; 0x02
     c7e:	09 83       	std	Y+1, r16	; 0x01
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	9f e7       	ldi	r25, 0x7F	; 127
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	ae 01       	movw	r20, r28
     c8a:	46 5e       	subi	r20, 0xE6	; 230
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	68 8d       	ldd	r22, Y+24	; 0x18
     c90:	79 8d       	ldd	r23, Y+25	; 0x19
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	10 d0       	rcall	.+32     	; 0xcb8 <vfprintf>
     c98:	ef 81       	ldd	r30, Y+7	; 0x07
     c9a:	f8 85       	ldd	r31, Y+8	; 0x08
     c9c:	e0 0f       	add	r30, r16
     c9e:	f1 1f       	adc	r31, r17
     ca0:	10 82       	st	Z, r1
     ca2:	2e 96       	adiw	r28, 0x0e	; 14
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <vfprintf>:
     cb8:	2f 92       	push	r2
     cba:	3f 92       	push	r3
     cbc:	4f 92       	push	r4
     cbe:	5f 92       	push	r5
     cc0:	6f 92       	push	r6
     cc2:	7f 92       	push	r7
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	2c 97       	sbiw	r28, 0x0c	; 12
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	7c 01       	movw	r14, r24
     cee:	6b 01       	movw	r12, r22
     cf0:	8a 01       	movw	r16, r20
     cf2:	fc 01       	movw	r30, r24
     cf4:	17 82       	std	Z+7, r1	; 0x07
     cf6:	16 82       	std	Z+6, r1	; 0x06
     cf8:	83 81       	ldd	r24, Z+3	; 0x03
     cfa:	81 ff       	sbrs	r24, 1
     cfc:	b0 c1       	rjmp	.+864    	; 0x105e <vfprintf+0x3a6>
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	4c 01       	movw	r8, r24
     d04:	f7 01       	movw	r30, r14
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	f6 01       	movw	r30, r12
     d0a:	93 fd       	sbrc	r25, 3
     d0c:	85 91       	lpm	r24, Z+
     d0e:	93 ff       	sbrs	r25, 3
     d10:	81 91       	ld	r24, Z+
     d12:	6f 01       	movw	r12, r30
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <vfprintf+0x62>
     d18:	9e c1       	rjmp	.+828    	; 0x1056 <vfprintf+0x39e>
     d1a:	85 32       	cpi	r24, 0x25	; 37
     d1c:	39 f4       	brne	.+14     	; 0xd2c <vfprintf+0x74>
     d1e:	93 fd       	sbrc	r25, 3
     d20:	85 91       	lpm	r24, Z+
     d22:	93 ff       	sbrs	r25, 3
     d24:	81 91       	ld	r24, Z+
     d26:	6f 01       	movw	r12, r30
     d28:	85 32       	cpi	r24, 0x25	; 37
     d2a:	21 f4       	brne	.+8      	; 0xd34 <vfprintf+0x7c>
     d2c:	b7 01       	movw	r22, r14
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	c7 d1       	rcall	.+910    	; 0x10c0 <fputc>
     d32:	e8 cf       	rjmp	.-48     	; 0xd04 <vfprintf+0x4c>
     d34:	51 2c       	mov	r5, r1
     d36:	31 2c       	mov	r3, r1
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	20 32       	cpi	r18, 0x20	; 32
     d3c:	a0 f4       	brcc	.+40     	; 0xd66 <vfprintf+0xae>
     d3e:	8b 32       	cpi	r24, 0x2B	; 43
     d40:	69 f0       	breq	.+26     	; 0xd5c <vfprintf+0xa4>
     d42:	30 f4       	brcc	.+12     	; 0xd50 <vfprintf+0x98>
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	59 f0       	breq	.+22     	; 0xd5e <vfprintf+0xa6>
     d48:	83 32       	cpi	r24, 0x23	; 35
     d4a:	69 f4       	brne	.+26     	; 0xd66 <vfprintf+0xae>
     d4c:	20 61       	ori	r18, 0x10	; 16
     d4e:	2c c0       	rjmp	.+88     	; 0xda8 <vfprintf+0xf0>
     d50:	8d 32       	cpi	r24, 0x2D	; 45
     d52:	39 f0       	breq	.+14     	; 0xd62 <vfprintf+0xaa>
     d54:	80 33       	cpi	r24, 0x30	; 48
     d56:	39 f4       	brne	.+14     	; 0xd66 <vfprintf+0xae>
     d58:	21 60       	ori	r18, 0x01	; 1
     d5a:	26 c0       	rjmp	.+76     	; 0xda8 <vfprintf+0xf0>
     d5c:	22 60       	ori	r18, 0x02	; 2
     d5e:	24 60       	ori	r18, 0x04	; 4
     d60:	23 c0       	rjmp	.+70     	; 0xda8 <vfprintf+0xf0>
     d62:	28 60       	ori	r18, 0x08	; 8
     d64:	21 c0       	rjmp	.+66     	; 0xda8 <vfprintf+0xf0>
     d66:	27 fd       	sbrc	r18, 7
     d68:	27 c0       	rjmp	.+78     	; 0xdb8 <vfprintf+0x100>
     d6a:	30 ed       	ldi	r19, 0xD0	; 208
     d6c:	38 0f       	add	r19, r24
     d6e:	3a 30       	cpi	r19, 0x0A	; 10
     d70:	78 f4       	brcc	.+30     	; 0xd90 <vfprintf+0xd8>
     d72:	26 ff       	sbrs	r18, 6
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <vfprintf+0xca>
     d76:	fa e0       	ldi	r31, 0x0A	; 10
     d78:	5f 9e       	mul	r5, r31
     d7a:	30 0d       	add	r19, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	53 2e       	mov	r5, r19
     d80:	13 c0       	rjmp	.+38     	; 0xda8 <vfprintf+0xf0>
     d82:	8a e0       	ldi	r24, 0x0A	; 10
     d84:	38 9e       	mul	r3, r24
     d86:	30 0d       	add	r19, r0
     d88:	11 24       	eor	r1, r1
     d8a:	33 2e       	mov	r3, r19
     d8c:	20 62       	ori	r18, 0x20	; 32
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <vfprintf+0xf0>
     d90:	8e 32       	cpi	r24, 0x2E	; 46
     d92:	21 f4       	brne	.+8      	; 0xd9c <vfprintf+0xe4>
     d94:	26 fd       	sbrc	r18, 6
     d96:	5f c1       	rjmp	.+702    	; 0x1056 <vfprintf+0x39e>
     d98:	20 64       	ori	r18, 0x40	; 64
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0xf0>
     d9c:	8c 36       	cpi	r24, 0x6C	; 108
     d9e:	11 f4       	brne	.+4      	; 0xda4 <vfprintf+0xec>
     da0:	20 68       	ori	r18, 0x80	; 128
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <vfprintf+0xf0>
     da4:	88 36       	cpi	r24, 0x68	; 104
     da6:	41 f4       	brne	.+16     	; 0xdb8 <vfprintf+0x100>
     da8:	f6 01       	movw	r30, r12
     daa:	93 fd       	sbrc	r25, 3
     dac:	85 91       	lpm	r24, Z+
     dae:	93 ff       	sbrs	r25, 3
     db0:	81 91       	ld	r24, Z+
     db2:	6f 01       	movw	r12, r30
     db4:	81 11       	cpse	r24, r1
     db6:	c1 cf       	rjmp	.-126    	; 0xd3a <vfprintf+0x82>
     db8:	98 2f       	mov	r25, r24
     dba:	9f 7d       	andi	r25, 0xDF	; 223
     dbc:	95 54       	subi	r25, 0x45	; 69
     dbe:	93 30       	cpi	r25, 0x03	; 3
     dc0:	28 f4       	brcc	.+10     	; 0xdcc <vfprintf+0x114>
     dc2:	0c 5f       	subi	r16, 0xFC	; 252
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	ff e3       	ldi	r31, 0x3F	; 63
     dc8:	f9 83       	std	Y+1, r31	; 0x01
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <vfprintf+0x12e>
     dcc:	83 36       	cpi	r24, 0x63	; 99
     dce:	31 f0       	breq	.+12     	; 0xddc <vfprintf+0x124>
     dd0:	83 37       	cpi	r24, 0x73	; 115
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <vfprintf+0x138>
     dd4:	83 35       	cpi	r24, 0x53	; 83
     dd6:	09 f0       	breq	.+2      	; 0xdda <vfprintf+0x122>
     dd8:	57 c0       	rjmp	.+174    	; 0xe88 <vfprintf+0x1d0>
     dda:	21 c0       	rjmp	.+66     	; 0xe1e <vfprintf+0x166>
     ddc:	f8 01       	movw	r30, r16
     dde:	80 81       	ld	r24, Z
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	0e 5f       	subi	r16, 0xFE	; 254
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	44 24       	eor	r4, r4
     de8:	43 94       	inc	r4
     dea:	51 2c       	mov	r5, r1
     dec:	54 01       	movw	r10, r8
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <vfprintf+0x160>
     df0:	38 01       	movw	r6, r16
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	6f 0e       	add	r6, r31
     df6:	71 1c       	adc	r7, r1
     df8:	f8 01       	movw	r30, r16
     dfa:	a0 80       	ld	r10, Z
     dfc:	b1 80       	ldd	r11, Z+1	; 0x01
     dfe:	26 ff       	sbrs	r18, 6
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <vfprintf+0x150>
     e02:	65 2d       	mov	r22, r5
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vfprintf+0x154>
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	7f ef       	ldi	r23, 0xFF	; 255
     e0c:	c5 01       	movw	r24, r10
     e0e:	2c 87       	std	Y+12, r18	; 0x0c
     e10:	4c d1       	rcall	.+664    	; 0x10aa <strnlen>
     e12:	2c 01       	movw	r4, r24
     e14:	83 01       	movw	r16, r6
     e16:	2c 85       	ldd	r18, Y+12	; 0x0c
     e18:	2f 77       	andi	r18, 0x7F	; 127
     e1a:	22 2e       	mov	r2, r18
     e1c:	16 c0       	rjmp	.+44     	; 0xe4a <vfprintf+0x192>
     e1e:	38 01       	movw	r6, r16
     e20:	f2 e0       	ldi	r31, 0x02	; 2
     e22:	6f 0e       	add	r6, r31
     e24:	71 1c       	adc	r7, r1
     e26:	f8 01       	movw	r30, r16
     e28:	a0 80       	ld	r10, Z
     e2a:	b1 80       	ldd	r11, Z+1	; 0x01
     e2c:	26 ff       	sbrs	r18, 6
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <vfprintf+0x17e>
     e30:	65 2d       	mov	r22, r5
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x182>
     e36:	6f ef       	ldi	r22, 0xFF	; 255
     e38:	7f ef       	ldi	r23, 0xFF	; 255
     e3a:	c5 01       	movw	r24, r10
     e3c:	2c 87       	std	Y+12, r18	; 0x0c
     e3e:	2a d1       	rcall	.+596    	; 0x1094 <strnlen_P>
     e40:	2c 01       	movw	r4, r24
     e42:	2c 85       	ldd	r18, Y+12	; 0x0c
     e44:	20 68       	ori	r18, 0x80	; 128
     e46:	22 2e       	mov	r2, r18
     e48:	83 01       	movw	r16, r6
     e4a:	23 fc       	sbrc	r2, 3
     e4c:	19 c0       	rjmp	.+50     	; 0xe80 <vfprintf+0x1c8>
     e4e:	83 2d       	mov	r24, r3
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	48 16       	cp	r4, r24
     e54:	59 06       	cpc	r5, r25
     e56:	a0 f4       	brcc	.+40     	; 0xe80 <vfprintf+0x1c8>
     e58:	b7 01       	movw	r22, r14
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	30 d1       	rcall	.+608    	; 0x10c0 <fputc>
     e60:	3a 94       	dec	r3
     e62:	f5 cf       	rjmp	.-22     	; 0xe4e <vfprintf+0x196>
     e64:	f5 01       	movw	r30, r10
     e66:	27 fc       	sbrc	r2, 7
     e68:	85 91       	lpm	r24, Z+
     e6a:	27 fe       	sbrs	r2, 7
     e6c:	81 91       	ld	r24, Z+
     e6e:	5f 01       	movw	r10, r30
     e70:	b7 01       	movw	r22, r14
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	25 d1       	rcall	.+586    	; 0x10c0 <fputc>
     e76:	31 10       	cpse	r3, r1
     e78:	3a 94       	dec	r3
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	4f 1a       	sub	r4, r31
     e7e:	51 08       	sbc	r5, r1
     e80:	41 14       	cp	r4, r1
     e82:	51 04       	cpc	r5, r1
     e84:	79 f7       	brne	.-34     	; 0xe64 <vfprintf+0x1ac>
     e86:	de c0       	rjmp	.+444    	; 0x1044 <vfprintf+0x38c>
     e88:	84 36       	cpi	r24, 0x64	; 100
     e8a:	11 f0       	breq	.+4      	; 0xe90 <vfprintf+0x1d8>
     e8c:	89 36       	cpi	r24, 0x69	; 105
     e8e:	31 f5       	brne	.+76     	; 0xedc <vfprintf+0x224>
     e90:	f8 01       	movw	r30, r16
     e92:	27 ff       	sbrs	r18, 7
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <vfprintf+0x1ec>
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	0c 5f       	subi	r16, 0xFC	; 252
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <vfprintf+0x1fc>
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	88 27       	eor	r24, r24
     eaa:	77 fd       	sbrc	r23, 7
     eac:	80 95       	com	r24
     eae:	98 2f       	mov	r25, r24
     eb0:	0e 5f       	subi	r16, 0xFE	; 254
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	2f 76       	andi	r18, 0x6F	; 111
     eb6:	b2 2e       	mov	r11, r18
     eb8:	97 ff       	sbrs	r25, 7
     eba:	09 c0       	rjmp	.+18     	; 0xece <vfprintf+0x216>
     ebc:	90 95       	com	r25
     ebe:	80 95       	com	r24
     ec0:	70 95       	com	r23
     ec2:	61 95       	neg	r22
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	20 68       	ori	r18, 0x80	; 128
     ecc:	b2 2e       	mov	r11, r18
     ece:	2a e0       	ldi	r18, 0x0A	; 10
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	a4 01       	movw	r20, r8
     ed4:	27 d1       	rcall	.+590    	; 0x1124 <__ultoa_invert>
     ed6:	a8 2e       	mov	r10, r24
     ed8:	a8 18       	sub	r10, r8
     eda:	43 c0       	rjmp	.+134    	; 0xf62 <vfprintf+0x2aa>
     edc:	85 37       	cpi	r24, 0x75	; 117
     ede:	29 f4       	brne	.+10     	; 0xeea <vfprintf+0x232>
     ee0:	2f 7e       	andi	r18, 0xEF	; 239
     ee2:	b2 2e       	mov	r11, r18
     ee4:	2a e0       	ldi	r18, 0x0A	; 10
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	25 c0       	rjmp	.+74     	; 0xf34 <vfprintf+0x27c>
     eea:	f2 2f       	mov	r31, r18
     eec:	f9 7f       	andi	r31, 0xF9	; 249
     eee:	bf 2e       	mov	r11, r31
     ef0:	8f 36       	cpi	r24, 0x6F	; 111
     ef2:	c1 f0       	breq	.+48     	; 0xf24 <vfprintf+0x26c>
     ef4:	18 f4       	brcc	.+6      	; 0xefc <vfprintf+0x244>
     ef6:	88 35       	cpi	r24, 0x58	; 88
     ef8:	79 f0       	breq	.+30     	; 0xf18 <vfprintf+0x260>
     efa:	ad c0       	rjmp	.+346    	; 0x1056 <vfprintf+0x39e>
     efc:	80 37       	cpi	r24, 0x70	; 112
     efe:	19 f0       	breq	.+6      	; 0xf06 <vfprintf+0x24e>
     f00:	88 37       	cpi	r24, 0x78	; 120
     f02:	21 f0       	breq	.+8      	; 0xf0c <vfprintf+0x254>
     f04:	a8 c0       	rjmp	.+336    	; 0x1056 <vfprintf+0x39e>
     f06:	2f 2f       	mov	r18, r31
     f08:	20 61       	ori	r18, 0x10	; 16
     f0a:	b2 2e       	mov	r11, r18
     f0c:	b4 fe       	sbrs	r11, 4
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <vfprintf+0x272>
     f10:	8b 2d       	mov	r24, r11
     f12:	84 60       	ori	r24, 0x04	; 4
     f14:	b8 2e       	mov	r11, r24
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <vfprintf+0x272>
     f18:	24 ff       	sbrs	r18, 4
     f1a:	0a c0       	rjmp	.+20     	; 0xf30 <vfprintf+0x278>
     f1c:	9f 2f       	mov	r25, r31
     f1e:	96 60       	ori	r25, 0x06	; 6
     f20:	b9 2e       	mov	r11, r25
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <vfprintf+0x278>
     f24:	28 e0       	ldi	r18, 0x08	; 8
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <vfprintf+0x27c>
     f2a:	20 e1       	ldi	r18, 0x10	; 16
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x27c>
     f30:	20 e1       	ldi	r18, 0x10	; 16
     f32:	32 e0       	ldi	r19, 0x02	; 2
     f34:	f8 01       	movw	r30, r16
     f36:	b7 fe       	sbrs	r11, 7
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <vfprintf+0x290>
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	0c 5f       	subi	r16, 0xFC	; 252
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <vfprintf+0x29c>
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 5f       	subi	r16, 0xFE	; 254
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	a4 01       	movw	r20, r8
     f56:	e6 d0       	rcall	.+460    	; 0x1124 <__ultoa_invert>
     f58:	a8 2e       	mov	r10, r24
     f5a:	a8 18       	sub	r10, r8
     f5c:	fb 2d       	mov	r31, r11
     f5e:	ff 77       	andi	r31, 0x7F	; 127
     f60:	bf 2e       	mov	r11, r31
     f62:	b6 fe       	sbrs	r11, 6
     f64:	0b c0       	rjmp	.+22     	; 0xf7c <vfprintf+0x2c4>
     f66:	2b 2d       	mov	r18, r11
     f68:	2e 7f       	andi	r18, 0xFE	; 254
     f6a:	a5 14       	cp	r10, r5
     f6c:	50 f4       	brcc	.+20     	; 0xf82 <vfprintf+0x2ca>
     f6e:	b4 fe       	sbrs	r11, 4
     f70:	0a c0       	rjmp	.+20     	; 0xf86 <vfprintf+0x2ce>
     f72:	b2 fc       	sbrc	r11, 2
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <vfprintf+0x2ce>
     f76:	2b 2d       	mov	r18, r11
     f78:	2e 7e       	andi	r18, 0xEE	; 238
     f7a:	05 c0       	rjmp	.+10     	; 0xf86 <vfprintf+0x2ce>
     f7c:	7a 2c       	mov	r7, r10
     f7e:	2b 2d       	mov	r18, r11
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <vfprintf+0x2d0>
     f82:	7a 2c       	mov	r7, r10
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <vfprintf+0x2d0>
     f86:	75 2c       	mov	r7, r5
     f88:	24 ff       	sbrs	r18, 4
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <vfprintf+0x2ee>
     f8c:	fe 01       	movw	r30, r28
     f8e:	ea 0d       	add	r30, r10
     f90:	f1 1d       	adc	r31, r1
     f92:	80 81       	ld	r24, Z
     f94:	80 33       	cpi	r24, 0x30	; 48
     f96:	11 f4       	brne	.+4      	; 0xf9c <vfprintf+0x2e4>
     f98:	29 7e       	andi	r18, 0xE9	; 233
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <vfprintf+0x2f6>
     f9c:	22 ff       	sbrs	r18, 2
     f9e:	06 c0       	rjmp	.+12     	; 0xfac <vfprintf+0x2f4>
     fa0:	73 94       	inc	r7
     fa2:	73 94       	inc	r7
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <vfprintf+0x2f6>
     fa6:	82 2f       	mov	r24, r18
     fa8:	86 78       	andi	r24, 0x86	; 134
     faa:	09 f0       	breq	.+2      	; 0xfae <vfprintf+0x2f6>
     fac:	73 94       	inc	r7
     fae:	23 fd       	sbrc	r18, 3
     fb0:	12 c0       	rjmp	.+36     	; 0xfd6 <vfprintf+0x31e>
     fb2:	20 ff       	sbrs	r18, 0
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <vfprintf+0x30a>
     fb6:	5a 2c       	mov	r5, r10
     fb8:	73 14       	cp	r7, r3
     fba:	18 f4       	brcc	.+6      	; 0xfc2 <vfprintf+0x30a>
     fbc:	53 0c       	add	r5, r3
     fbe:	57 18       	sub	r5, r7
     fc0:	73 2c       	mov	r7, r3
     fc2:	73 14       	cp	r7, r3
     fc4:	60 f4       	brcc	.+24     	; 0xfde <vfprintf+0x326>
     fc6:	b7 01       	movw	r22, r14
     fc8:	80 e2       	ldi	r24, 0x20	; 32
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	2c 87       	std	Y+12, r18	; 0x0c
     fce:	78 d0       	rcall	.+240    	; 0x10c0 <fputc>
     fd0:	73 94       	inc	r7
     fd2:	2c 85       	ldd	r18, Y+12	; 0x0c
     fd4:	f6 cf       	rjmp	.-20     	; 0xfc2 <vfprintf+0x30a>
     fd6:	73 14       	cp	r7, r3
     fd8:	10 f4       	brcc	.+4      	; 0xfde <vfprintf+0x326>
     fda:	37 18       	sub	r3, r7
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <vfprintf+0x328>
     fde:	31 2c       	mov	r3, r1
     fe0:	24 ff       	sbrs	r18, 4
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <vfprintf+0x34e>
     fe4:	b7 01       	movw	r22, r14
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	2c 87       	std	Y+12, r18	; 0x0c
     fec:	69 d0       	rcall	.+210    	; 0x10c0 <fputc>
     fee:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff0:	22 ff       	sbrs	r18, 2
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <vfprintf+0x368>
     ff4:	21 ff       	sbrs	r18, 1
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <vfprintf+0x346>
     ff8:	88 e5       	ldi	r24, 0x58	; 88
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <vfprintf+0x34a>
     ffe:	88 e7       	ldi	r24, 0x78	; 120
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	b7 01       	movw	r22, r14
    1004:	0c c0       	rjmp	.+24     	; 0x101e <vfprintf+0x366>
    1006:	82 2f       	mov	r24, r18
    1008:	86 78       	andi	r24, 0x86	; 134
    100a:	51 f0       	breq	.+20     	; 0x1020 <vfprintf+0x368>
    100c:	21 fd       	sbrc	r18, 1
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <vfprintf+0x35c>
    1010:	80 e2       	ldi	r24, 0x20	; 32
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <vfprintf+0x35e>
    1014:	8b e2       	ldi	r24, 0x2B	; 43
    1016:	27 fd       	sbrc	r18, 7
    1018:	8d e2       	ldi	r24, 0x2D	; 45
    101a:	b7 01       	movw	r22, r14
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	50 d0       	rcall	.+160    	; 0x10c0 <fputc>
    1020:	a5 14       	cp	r10, r5
    1022:	30 f4       	brcc	.+12     	; 0x1030 <vfprintf+0x378>
    1024:	b7 01       	movw	r22, r14
    1026:	80 e3       	ldi	r24, 0x30	; 48
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	4a d0       	rcall	.+148    	; 0x10c0 <fputc>
    102c:	5a 94       	dec	r5
    102e:	f8 cf       	rjmp	.-16     	; 0x1020 <vfprintf+0x368>
    1030:	aa 94       	dec	r10
    1032:	f4 01       	movw	r30, r8
    1034:	ea 0d       	add	r30, r10
    1036:	f1 1d       	adc	r31, r1
    1038:	80 81       	ld	r24, Z
    103a:	b7 01       	movw	r22, r14
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	40 d0       	rcall	.+128    	; 0x10c0 <fputc>
    1040:	a1 10       	cpse	r10, r1
    1042:	f6 cf       	rjmp	.-20     	; 0x1030 <vfprintf+0x378>
    1044:	33 20       	and	r3, r3
    1046:	09 f4       	brne	.+2      	; 0x104a <vfprintf+0x392>
    1048:	5d ce       	rjmp	.-838    	; 0xd04 <vfprintf+0x4c>
    104a:	b7 01       	movw	r22, r14
    104c:	80 e2       	ldi	r24, 0x20	; 32
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	37 d0       	rcall	.+110    	; 0x10c0 <fputc>
    1052:	3a 94       	dec	r3
    1054:	f7 cf       	rjmp	.-18     	; 0x1044 <vfprintf+0x38c>
    1056:	f7 01       	movw	r30, r14
    1058:	86 81       	ldd	r24, Z+6	; 0x06
    105a:	97 81       	ldd	r25, Z+7	; 0x07
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0x3aa>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	9f ef       	ldi	r25, 0xFF	; 255
    1062:	2c 96       	adiw	r28, 0x0c	; 12
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	bf 90       	pop	r11
    1080:	af 90       	pop	r10
    1082:	9f 90       	pop	r9
    1084:	8f 90       	pop	r8
    1086:	7f 90       	pop	r7
    1088:	6f 90       	pop	r6
    108a:	5f 90       	pop	r5
    108c:	4f 90       	pop	r4
    108e:	3f 90       	pop	r3
    1090:	2f 90       	pop	r2
    1092:	08 95       	ret

00001094 <strnlen_P>:
    1094:	fc 01       	movw	r30, r24
    1096:	05 90       	lpm	r0, Z+
    1098:	61 50       	subi	r22, 0x01	; 1
    109a:	70 40       	sbci	r23, 0x00	; 0
    109c:	01 10       	cpse	r0, r1
    109e:	d8 f7       	brcc	.-10     	; 0x1096 <strnlen_P+0x2>
    10a0:	80 95       	com	r24
    10a2:	90 95       	com	r25
    10a4:	8e 0f       	add	r24, r30
    10a6:	9f 1f       	adc	r25, r31
    10a8:	08 95       	ret

000010aa <strnlen>:
    10aa:	fc 01       	movw	r30, r24
    10ac:	61 50       	subi	r22, 0x01	; 1
    10ae:	70 40       	sbci	r23, 0x00	; 0
    10b0:	01 90       	ld	r0, Z+
    10b2:	01 10       	cpse	r0, r1
    10b4:	d8 f7       	brcc	.-10     	; 0x10ac <strnlen+0x2>
    10b6:	80 95       	com	r24
    10b8:	90 95       	com	r25
    10ba:	8e 0f       	add	r24, r30
    10bc:	9f 1f       	adc	r25, r31
    10be:	08 95       	ret

000010c0 <fputc>:
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	18 2f       	mov	r17, r24
    10ca:	09 2f       	mov	r16, r25
    10cc:	eb 01       	movw	r28, r22
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	81 fd       	sbrc	r24, 1
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <fputc+0x1a>
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	9f ef       	ldi	r25, 0xFF	; 255
    10d8:	20 c0       	rjmp	.+64     	; 0x111a <fputc+0x5a>
    10da:	82 ff       	sbrs	r24, 2
    10dc:	10 c0       	rjmp	.+32     	; 0x10fe <fputc+0x3e>
    10de:	4e 81       	ldd	r20, Y+6	; 0x06
    10e0:	5f 81       	ldd	r21, Y+7	; 0x07
    10e2:	2c 81       	ldd	r18, Y+4	; 0x04
    10e4:	3d 81       	ldd	r19, Y+5	; 0x05
    10e6:	42 17       	cp	r20, r18
    10e8:	53 07       	cpc	r21, r19
    10ea:	7c f4       	brge	.+30     	; 0x110a <fputc+0x4a>
    10ec:	e8 81       	ld	r30, Y
    10ee:	f9 81       	ldd	r31, Y+1	; 0x01
    10f0:	9f 01       	movw	r18, r30
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	39 83       	std	Y+1, r19	; 0x01
    10f8:	28 83       	st	Y, r18
    10fa:	10 83       	st	Z, r17
    10fc:	06 c0       	rjmp	.+12     	; 0x110a <fputc+0x4a>
    10fe:	e8 85       	ldd	r30, Y+8	; 0x08
    1100:	f9 85       	ldd	r31, Y+9	; 0x09
    1102:	81 2f       	mov	r24, r17
    1104:	19 95       	eicall
    1106:	89 2b       	or	r24, r25
    1108:	29 f7       	brne	.-54     	; 0x10d4 <fputc+0x14>
    110a:	2e 81       	ldd	r18, Y+6	; 0x06
    110c:	3f 81       	ldd	r19, Y+7	; 0x07
    110e:	2f 5f       	subi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	3f 83       	std	Y+7, r19	; 0x07
    1114:	2e 83       	std	Y+6, r18	; 0x06
    1116:	81 2f       	mov	r24, r17
    1118:	90 2f       	mov	r25, r16
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <__ultoa_invert>:
    1124:	fa 01       	movw	r30, r20
    1126:	aa 27       	eor	r26, r26
    1128:	28 30       	cpi	r18, 0x08	; 8
    112a:	51 f1       	breq	.+84     	; 0x1180 <__ultoa_invert+0x5c>
    112c:	20 31       	cpi	r18, 0x10	; 16
    112e:	81 f1       	breq	.+96     	; 0x1190 <__ultoa_invert+0x6c>
    1130:	e8 94       	clt
    1132:	6f 93       	push	r22
    1134:	6e 7f       	andi	r22, 0xFE	; 254
    1136:	6e 5f       	subi	r22, 0xFE	; 254
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	8f 4f       	sbci	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	af 4f       	sbci	r26, 0xFF	; 255
    1140:	b1 e0       	ldi	r27, 0x01	; 1
    1142:	3e d0       	rcall	.+124    	; 0x11c0 <__ultoa_invert+0x9c>
    1144:	b4 e0       	ldi	r27, 0x04	; 4
    1146:	3c d0       	rcall	.+120    	; 0x11c0 <__ultoa_invert+0x9c>
    1148:	67 0f       	add	r22, r23
    114a:	78 1f       	adc	r23, r24
    114c:	89 1f       	adc	r24, r25
    114e:	9a 1f       	adc	r25, r26
    1150:	a1 1d       	adc	r26, r1
    1152:	68 0f       	add	r22, r24
    1154:	79 1f       	adc	r23, r25
    1156:	8a 1f       	adc	r24, r26
    1158:	91 1d       	adc	r25, r1
    115a:	a1 1d       	adc	r26, r1
    115c:	6a 0f       	add	r22, r26
    115e:	71 1d       	adc	r23, r1
    1160:	81 1d       	adc	r24, r1
    1162:	91 1d       	adc	r25, r1
    1164:	a1 1d       	adc	r26, r1
    1166:	20 d0       	rcall	.+64     	; 0x11a8 <__ultoa_invert+0x84>
    1168:	09 f4       	brne	.+2      	; 0x116c <__ultoa_invert+0x48>
    116a:	68 94       	set
    116c:	3f 91       	pop	r19
    116e:	2a e0       	ldi	r18, 0x0A	; 10
    1170:	26 9f       	mul	r18, r22
    1172:	11 24       	eor	r1, r1
    1174:	30 19       	sub	r19, r0
    1176:	30 5d       	subi	r19, 0xD0	; 208
    1178:	31 93       	st	Z+, r19
    117a:	de f6       	brtc	.-74     	; 0x1132 <__ultoa_invert+0xe>
    117c:	cf 01       	movw	r24, r30
    117e:	08 95       	ret
    1180:	46 2f       	mov	r20, r22
    1182:	47 70       	andi	r20, 0x07	; 7
    1184:	40 5d       	subi	r20, 0xD0	; 208
    1186:	41 93       	st	Z+, r20
    1188:	b3 e0       	ldi	r27, 0x03	; 3
    118a:	0f d0       	rcall	.+30     	; 0x11aa <__ultoa_invert+0x86>
    118c:	c9 f7       	brne	.-14     	; 0x1180 <__ultoa_invert+0x5c>
    118e:	f6 cf       	rjmp	.-20     	; 0x117c <__ultoa_invert+0x58>
    1190:	46 2f       	mov	r20, r22
    1192:	4f 70       	andi	r20, 0x0F	; 15
    1194:	40 5d       	subi	r20, 0xD0	; 208
    1196:	4a 33       	cpi	r20, 0x3A	; 58
    1198:	18 f0       	brcs	.+6      	; 0x11a0 <__ultoa_invert+0x7c>
    119a:	49 5d       	subi	r20, 0xD9	; 217
    119c:	31 fd       	sbrc	r19, 1
    119e:	40 52       	subi	r20, 0x20	; 32
    11a0:	41 93       	st	Z+, r20
    11a2:	02 d0       	rcall	.+4      	; 0x11a8 <__ultoa_invert+0x84>
    11a4:	a9 f7       	brne	.-22     	; 0x1190 <__ultoa_invert+0x6c>
    11a6:	ea cf       	rjmp	.-44     	; 0x117c <__ultoa_invert+0x58>
    11a8:	b4 e0       	ldi	r27, 0x04	; 4
    11aa:	a6 95       	lsr	r26
    11ac:	97 95       	ror	r25
    11ae:	87 95       	ror	r24
    11b0:	77 95       	ror	r23
    11b2:	67 95       	ror	r22
    11b4:	ba 95       	dec	r27
    11b6:	c9 f7       	brne	.-14     	; 0x11aa <__ultoa_invert+0x86>
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 05       	cpc	r22, r1
    11bc:	71 05       	cpc	r23, r1
    11be:	08 95       	ret
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	0a 2e       	mov	r0, r26
    11c6:	06 94       	lsr	r0
    11c8:	57 95       	ror	r21
    11ca:	47 95       	ror	r20
    11cc:	37 95       	ror	r19
    11ce:	27 95       	ror	r18
    11d0:	ba 95       	dec	r27
    11d2:	c9 f7       	brne	.-14     	; 0x11c6 <__ultoa_invert+0xa2>
    11d4:	62 0f       	add	r22, r18
    11d6:	73 1f       	adc	r23, r19
    11d8:	84 1f       	adc	r24, r20
    11da:	95 1f       	adc	r25, r21
    11dc:	a0 1d       	adc	r26, r0
    11de:	08 95       	ret

000011e0 <_exit>:
    11e0:	f8 94       	cli

000011e2 <__stop_program>:
    11e2:	ff cf       	rjmp	.-2      	; 0x11e2 <__stop_program>
