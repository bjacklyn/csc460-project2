
NewProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000013ca  0000145e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c6c  0080020c  0080020c  0000146a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001530  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000782  00000000  00000000  00002b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d82  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  0000407c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008a0  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b3c  00000000  00000000  00004c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  000057d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c1       	rjmp	.+722    	; 0x318 <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	7b c6       	rjmp	.+3318   	; 0xd5c <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ec       	ldi	r30, 0xCA	; 202
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 30       	cpi	r26, 0x0C	; 12
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	ac e0       	ldi	r26, 0x0C	; 12
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 37       	cpi	r26, 0x78	; 120
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	71 d5       	rcall	.+2786   	; 0xc02 <main>
     120:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_Z6systemv>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void system() {
	add_to_trace(1);
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	cb c5       	rjmp	.+2966   	; 0xcc2 <_Z12add_to_tracej>
     12c:	08 95       	ret

0000012e <_Z8periodicv>:
}

void periodic() {
	add_to_trace(2);
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	c7 c5       	rjmp	.+2958   	; 0xcc2 <_Z12add_to_tracej>
     134:	08 95       	ret

00000136 <_Z10roundrobinv>:
}

void roundrobin() {
	add_to_trace(3);
     136:	83 e0       	ldi	r24, 0x03	; 3
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	c3 d5       	rcall	.+2950   	; 0xcc2 <_Z12add_to_tracej>
	print_trace();
     13c:	63 c5       	rjmp	.+2758   	; 0xc04 <_Z11print_tracev>
     13e:	08 95       	ret

00000140 <_Z6r_mainv>:
}

int r_main() {
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
    uart_init();
     144:	f9 d5       	rcall	.+3058   	; 0xd38 <_Z9uart_initv>
    set_trace_test(14);
     146:	8e e0       	ldi	r24, 0x0E	; 14
     148:	d8 d5       	rcall	.+2992   	; 0xcfa <_Z14set_trace_testh>
	
	Task_Create_System(system, 0);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	83 e9       	ldi	r24, 0x93	; 147
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	b2 d1       	rcall	.+868    	; 0x4b8 <Task_Create_System>
    Task_Create_Periodic(periodic, 0, 50, 20, 0); // run on 10th tick
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	24 e1       	ldi	r18, 0x14	; 20
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	42 e3       	ldi	r20, 0x32	; 50
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	87 e9       	ldi	r24, 0x97	; 151
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	d9 d1       	rcall	.+946    	; 0x51c <Task_Create_Periodic>
	Task_Create_RR(roundrobin, 0);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	8b e9       	ldi	r24, 0x9B	; 155
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	bb d1       	rcall	.+886    	; 0x4ea <Task_Create_RR>

	return 0;
}
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	08 95       	ret

0000017e <_ZL4idlev>:
    arg = cur_task->arg;

    SREG = sreg;

    return arg;
}
     17e:	ff cf       	rjmp	.-2      	; 0x17e <_ZL4idlev>

00000180 <_ZL11exit_kernelv>:
     180:	ff 93       	push	r31
     182:	fc b7       	in	r31, 0x3c	; 60
     184:	ff 93       	push	r31
     186:	ff b7       	in	r31, 0x3f	; 63
     188:	f8 94       	cli
     18a:	ff 93       	push	r31
     18c:	ef 93       	push	r30
     18e:	df 93       	push	r29
     190:	cf 93       	push	r28
     192:	bf 93       	push	r27
     194:	af 93       	push	r26
     196:	9f 93       	push	r25
     198:	8f 93       	push	r24
     19a:	7f 93       	push	r23
     19c:	6f 93       	push	r22
     19e:	5f 93       	push	r21
     1a0:	4f 93       	push	r20
     1a2:	3f 93       	push	r19
     1a4:	2f 93       	push	r18
     1a6:	1f 93       	push	r17
     1a8:	0f 93       	push	r16
     1aa:	ff 92       	push	r15
     1ac:	ef 92       	push	r14
     1ae:	df 92       	push	r13
     1b0:	cf 92       	push	r12
     1b2:	bf 92       	push	r11
     1b4:	af 92       	push	r10
     1b6:	9f 92       	push	r9
     1b8:	8f 92       	push	r8
     1ba:	7f 92       	push	r7
     1bc:	6f 92       	push	r6
     1be:	5f 92       	push	r5
     1c0:	4f 92       	push	r4
     1c2:	3f 92       	push	r3
     1c4:	2f 92       	push	r2
     1c6:	1f 92       	push	r1
     1c8:	0f 92       	push	r0
     1ca:	8d b7       	in	r24, 0x3d	; 61
     1cc:	9e b7       	in	r25, 0x3e	; 62
     1ce:	90 93 e8 0b 	sts	0x0BE8, r25
     1d2:	80 93 e7 0b 	sts	0x0BE7, r24
     1d6:	e0 91 e9 0b 	lds	r30, 0x0BE9
     1da:	f0 91 ea 0b 	lds	r31, 0x0BEA
     1de:	f3 95       	inc	r31
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	9e bf       	out	0x3e, r25	; 62
     1e6:	8d bf       	out	0x3d, r24	; 61
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	2f 90       	pop	r2
     1ee:	3f 90       	pop	r3
     1f0:	4f 90       	pop	r4
     1f2:	5f 90       	pop	r5
     1f4:	6f 90       	pop	r6
     1f6:	7f 90       	pop	r7
     1f8:	8f 90       	pop	r8
     1fa:	9f 90       	pop	r9
     1fc:	af 90       	pop	r10
     1fe:	bf 90       	pop	r11
     200:	cf 90       	pop	r12
     202:	df 90       	pop	r13
     204:	ef 90       	pop	r14
     206:	ff 90       	pop	r15
     208:	0f 91       	pop	r16
     20a:	1f 91       	pop	r17
     20c:	2f 91       	pop	r18
     20e:	3f 91       	pop	r19
     210:	4f 91       	pop	r20
     212:	5f 91       	pop	r21
     214:	6f 91       	pop	r22
     216:	7f 91       	pop	r23
     218:	8f 91       	pop	r24
     21a:	9f 91       	pop	r25
     21c:	af 91       	pop	r26
     21e:	bf 91       	pop	r27
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	ef 91       	pop	r30
     226:	ff 91       	pop	r31
     228:	ff bf       	out	0x3f, r31	; 63
     22a:	ff 91       	pop	r31
     22c:	fc bf       	out	0x3c, r31	; 60
     22e:	ff 91       	pop	r31
     230:	08 95       	ret

00000232 <_ZL12enter_kernelv>:
     232:	ff 93       	push	r31
     234:	fc b7       	in	r31, 0x3c	; 60
     236:	ff 93       	push	r31
     238:	ff b7       	in	r31, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	ff 93       	push	r31
     23e:	ef 93       	push	r30
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	bf 93       	push	r27
     246:	af 93       	push	r26
     248:	9f 93       	push	r25
     24a:	8f 93       	push	r24
     24c:	7f 93       	push	r23
     24e:	6f 93       	push	r22
     250:	5f 93       	push	r21
     252:	4f 93       	push	r20
     254:	3f 93       	push	r19
     256:	2f 93       	push	r18
     258:	1f 93       	push	r17
     25a:	0f 93       	push	r16
     25c:	ff 92       	push	r15
     25e:	ef 92       	push	r14
     260:	df 92       	push	r13
     262:	cf 92       	push	r12
     264:	bf 92       	push	r11
     266:	af 92       	push	r10
     268:	9f 92       	push	r9
     26a:	8f 92       	push	r8
     26c:	7f 92       	push	r7
     26e:	6f 92       	push	r6
     270:	5f 92       	push	r5
     272:	4f 92       	push	r4
     274:	3f 92       	push	r3
     276:	2f 92       	push	r2
     278:	1f 92       	push	r1
     27a:	0f 92       	push	r0
     27c:	e0 91 e9 0b 	lds	r30, 0x0BE9
     280:	f0 91 ea 0b 	lds	r31, 0x0BEA
     284:	8d b7       	in	r24, 0x3d	; 61
     286:	9e b7       	in	r25, 0x3e	; 62
     288:	f3 95       	inc	r31
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	80 91 e7 0b 	lds	r24, 0x0BE7
     292:	90 91 e8 0b 	lds	r25, 0x0BE8
     296:	9e bf       	out	0x3e, r25	; 62
     298:	8d bf       	out	0x3d, r24	; 61
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	2f 90       	pop	r2
     2a0:	3f 90       	pop	r3
     2a2:	4f 90       	pop	r4
     2a4:	5f 90       	pop	r5
     2a6:	6f 90       	pop	r6
     2a8:	7f 90       	pop	r7
     2aa:	8f 90       	pop	r8
     2ac:	9f 90       	pop	r9
     2ae:	af 90       	pop	r10
     2b0:	bf 90       	pop	r11
     2b2:	cf 90       	pop	r12
     2b4:	df 90       	pop	r13
     2b6:	ef 90       	pop	r14
     2b8:	ff 90       	pop	r15
     2ba:	0f 91       	pop	r16
     2bc:	1f 91       	pop	r17
     2be:	2f 91       	pop	r18
     2c0:	3f 91       	pop	r19
     2c2:	4f 91       	pop	r20
     2c4:	5f 91       	pop	r21
     2c6:	6f 91       	pop	r22
     2c8:	7f 91       	pop	r23
     2ca:	8f 91       	pop	r24
     2cc:	9f 91       	pop	r25
     2ce:	af 91       	pop	r26
     2d0:	bf 91       	pop	r27
     2d2:	cf 91       	pop	r28
     2d4:	df 91       	pop	r29
     2d6:	ef 91       	pop	r30
     2d8:	ff 91       	pop	r31
     2da:	ff bf       	out	0x3f, r31	; 63
     2dc:	ff 91       	pop	r31
     2de:	fc bf       	out	0x3c, r31	; 60
     2e0:	ff 91       	pop	r31
     2e2:	08 95       	ret

000002e4 <_ZL7dequeueP7queue_t>:
     2e4:	fc 01       	movw	r30, r24
     2e6:	80 81       	ld	r24, Z
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	51 f0       	breq	.+20     	; 0x302 <_ZL7dequeueP7queue_t+0x1e>
     2ee:	dc 01       	movw	r26, r24
     2f0:	ad 5e       	subi	r26, 0xED	; 237
     2f2:	be 4f       	sbci	r27, 0xFE	; 254
     2f4:	2d 91       	ld	r18, X+
     2f6:	3c 91       	ld	r19, X
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	31 83       	std	Z+1, r19	; 0x01
     2fc:	20 83       	st	Z, r18
     2fe:	1d 92       	st	X+, r1
     300:	1c 92       	st	X, r1
     302:	08 95       	ret

00000304 <Task_Terminate>:
     304:	cf 93       	push	r28
     306:	cf b7       	in	r28, 0x3f	; 63
     308:	f8 94       	cli
     30a:	83 e0       	ldi	r24, 0x03	; 3
     30c:	80 93 29 02 	sts	0x0229, r24
     310:	90 df       	rcall	.-224    	; 0x232 <_ZL12enter_kernelv>
     312:	cf bf       	out	0x3f, r28	; 63
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <__vector_17>:
     318:	ff 93       	push	r31
     31a:	fc b7       	in	r31, 0x3c	; 60
     31c:	ff 93       	push	r31
     31e:	ff b7       	in	r31, 0x3f	; 63
     320:	f8 94       	cli
     322:	f0 68       	ori	r31, 0x80	; 128
     324:	ff 93       	push	r31
     326:	ef 93       	push	r30
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	bf 93       	push	r27
     32e:	af 93       	push	r26
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	7f 93       	push	r23
     336:	6f 93       	push	r22
     338:	5f 93       	push	r21
     33a:	4f 93       	push	r20
     33c:	3f 93       	push	r19
     33e:	2f 93       	push	r18
     340:	1f 93       	push	r17
     342:	0f 93       	push	r16
     344:	ff 92       	push	r15
     346:	ef 92       	push	r14
     348:	df 92       	push	r13
     34a:	cf 92       	push	r12
     34c:	bf 92       	push	r11
     34e:	af 92       	push	r10
     350:	9f 92       	push	r9
     352:	8f 92       	push	r8
     354:	7f 92       	push	r7
     356:	6f 92       	push	r6
     358:	5f 92       	push	r5
     35a:	4f 92       	push	r4
     35c:	3f 92       	push	r3
     35e:	2f 92       	push	r2
     360:	1f 92       	push	r1
     362:	0f 92       	push	r0
     364:	e0 91 e9 0b 	lds	r30, 0x0BE9
     368:	f0 91 ea 0b 	lds	r31, 0x0BEA
     36c:	8d b7       	in	r24, 0x3d	; 61
     36e:	9e b7       	in	r25, 0x3e	; 62
     370:	f3 95       	inc	r31
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	80 91 e7 0b 	lds	r24, 0x0BE7
     37a:	90 91 e8 0b 	lds	r25, 0x0BE8
     37e:	9e bf       	out	0x3e, r25	; 62
     380:	8d bf       	out	0x3d, r24	; 61
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 29 02 	sts	0x0229, r24
     388:	80 91 eb 0b 	lds	r24, 0x0BEB
     38c:	90 91 ec 0b 	lds	r25, 0x0BEC
     390:	05 96       	adiw	r24, 0x05	; 5
     392:	90 93 ec 0b 	sts	0x0BEC, r25
     396:	80 93 eb 0b 	sts	0x0BEB, r24
     39a:	e8 e8       	ldi	r30, 0x88	; 136
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	91 81       	ldd	r25, Z+1	; 0x01
     3a2:	80 5f       	subi	r24, 0xF0	; 240
     3a4:	98 4d       	sbci	r25, 0xD8	; 216
     3a6:	91 83       	std	Z+1, r25	; 0x01
     3a8:	80 83       	st	Z, r24
     3aa:	80 91 e7 0b 	lds	r24, 0x0BE7
     3ae:	90 91 e8 0b 	lds	r25, 0x0BE8
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	8d bf       	out	0x3d, r24	; 61
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	2f 90       	pop	r2
     3bc:	3f 90       	pop	r3
     3be:	4f 90       	pop	r4
     3c0:	5f 90       	pop	r5
     3c2:	6f 90       	pop	r6
     3c4:	7f 90       	pop	r7
     3c6:	8f 90       	pop	r8
     3c8:	9f 90       	pop	r9
     3ca:	af 90       	pop	r10
     3cc:	bf 90       	pop	r11
     3ce:	cf 90       	pop	r12
     3d0:	df 90       	pop	r13
     3d2:	ef 90       	pop	r14
     3d4:	ff 90       	pop	r15
     3d6:	0f 91       	pop	r16
     3d8:	1f 91       	pop	r17
     3da:	2f 91       	pop	r18
     3dc:	3f 91       	pop	r19
     3de:	4f 91       	pop	r20
     3e0:	5f 91       	pop	r21
     3e2:	6f 91       	pop	r22
     3e4:	7f 91       	pop	r23
     3e6:	8f 91       	pop	r24
     3e8:	9f 91       	pop	r25
     3ea:	af 91       	pop	r26
     3ec:	bf 91       	pop	r27
     3ee:	cf 91       	pop	r28
     3f0:	df 91       	pop	r29
     3f2:	ef 91       	pop	r30
     3f4:	ff 91       	pop	r31
     3f6:	ff bf       	out	0x3f, r31	; 63
     3f8:	ff 91       	pop	r31
     3fa:	fc bf       	out	0x3c, r31	; 60
     3fc:	ff 91       	pop	r31
     3fe:	08 95       	ret

00000400 <OS_Abort>:
     400:	f8 94       	cli
     402:	80 ef       	ldi	r24, 0xF0	; 240
     404:	84 b9       	out	0x04, r24	; 4
     406:	80 91 00 02 	lds	r24, 0x0200
     40a:	81 11       	cpse	r24, r1
     40c:	05 c0       	rjmp	.+10     	; 0x418 <OS_Abort+0x18>
     40e:	30 91 00 02 	lds	r19, 0x0200
     412:	3f 5f       	subi	r19, 0xFF	; 255
     414:	40 e6       	ldi	r20, 0x60	; 96
     416:	03 c0       	rjmp	.+6      	; 0x41e <OS_Abort+0x1e>
     418:	30 91 00 02 	lds	r19, 0x0200
     41c:	40 e9       	ldi	r20, 0x90	; 144
     41e:	70 ef       	ldi	r23, 0xF0	; 240
     420:	64 e6       	ldi	r22, 0x64	; 100
     422:	2a e0       	ldi	r18, 0x0A	; 10
     424:	54 e1       	ldi	r21, 0x14	; 20
     426:	75 b9       	out	0x05, r23	; 5
     428:	86 2f       	mov	r24, r22
     42a:	9f e7       	ldi	r25, 0x7F	; 127
     42c:	a8 e3       	ldi	r26, 0x38	; 56
     42e:	e1 e0       	ldi	r30, 0x01	; 1
     430:	91 50       	subi	r25, 0x01	; 1
     432:	a0 40       	sbci	r26, 0x00	; 0
     434:	e0 40       	sbci	r30, 0x00	; 0
     436:	e1 f7       	brne	.-8      	; 0x430 <OS_Abort+0x30>
     438:	00 c0       	rjmp	.+0      	; 0x43a <OS_Abort+0x3a>
     43a:	00 00       	nop
     43c:	81 50       	subi	r24, 0x01	; 1
     43e:	a9 f7       	brne	.-22     	; 0x42a <OS_Abort+0x2a>
     440:	15 b8       	out	0x05, r1	; 5
     442:	88 e2       	ldi	r24, 0x28	; 40
     444:	ff e7       	ldi	r31, 0x7F	; 127
     446:	98 e3       	ldi	r25, 0x38	; 56
     448:	a1 e0       	ldi	r26, 0x01	; 1
     44a:	f1 50       	subi	r31, 0x01	; 1
     44c:	90 40       	sbci	r25, 0x00	; 0
     44e:	a0 40       	sbci	r26, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <OS_Abort+0x4a>
     452:	00 c0       	rjmp	.+0      	; 0x454 <OS_Abort+0x54>
     454:	00 00       	nop
     456:	81 50       	subi	r24, 0x01	; 1
     458:	a9 f7       	brne	.-22     	; 0x444 <OS_Abort+0x44>
     45a:	33 23       	and	r19, r19
     45c:	59 f1       	breq	.+86     	; 0x4b4 <OS_Abort+0xb4>
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	45 b9       	out	0x05, r20	; 5
     462:	82 2f       	mov	r24, r18
     464:	ef e7       	ldi	r30, 0x7F	; 127
     466:	f8 e3       	ldi	r31, 0x38	; 56
     468:	a1 e0       	ldi	r26, 0x01	; 1
     46a:	e1 50       	subi	r30, 0x01	; 1
     46c:	f0 40       	sbci	r31, 0x00	; 0
     46e:	a0 40       	sbci	r26, 0x00	; 0
     470:	e1 f7       	brne	.-8      	; 0x46a <OS_Abort+0x6a>
     472:	00 c0       	rjmp	.+0      	; 0x474 <OS_Abort+0x74>
     474:	00 00       	nop
     476:	81 50       	subi	r24, 0x01	; 1
     478:	a9 f7       	brne	.-22     	; 0x464 <OS_Abort+0x64>
     47a:	15 b8       	out	0x05, r1	; 5
     47c:	82 2f       	mov	r24, r18
     47e:	ef e7       	ldi	r30, 0x7F	; 127
     480:	f8 e3       	ldi	r31, 0x38	; 56
     482:	a1 e0       	ldi	r26, 0x01	; 1
     484:	e1 50       	subi	r30, 0x01	; 1
     486:	f0 40       	sbci	r31, 0x00	; 0
     488:	a0 40       	sbci	r26, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <OS_Abort+0x84>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <OS_Abort+0x8e>
     48e:	00 00       	nop
     490:	81 50       	subi	r24, 0x01	; 1
     492:	a9 f7       	brne	.-22     	; 0x47e <OS_Abort+0x7e>
     494:	9f 5f       	subi	r25, 0xFF	; 255
     496:	93 13       	cpse	r25, r19
     498:	e3 cf       	rjmp	.-58     	; 0x460 <OS_Abort+0x60>
     49a:	0c c0       	rjmp	.+24     	; 0x4b4 <OS_Abort+0xb4>
     49c:	ef e7       	ldi	r30, 0x7F	; 127
     49e:	f8 e3       	ldi	r31, 0x38	; 56
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	e1 50       	subi	r30, 0x01	; 1
     4a4:	f0 40       	sbci	r31, 0x00	; 0
     4a6:	90 40       	sbci	r25, 0x00	; 0
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <OS_Abort+0xa2>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <OS_Abort+0xac>
     4ac:	00 00       	nop
     4ae:	81 50       	subi	r24, 0x01	; 1
     4b0:	a9 f7       	brne	.-22     	; 0x49c <OS_Abort+0x9c>
     4b2:	b9 cf       	rjmp	.-142    	; 0x426 <OS_Abort+0x26>
     4b4:	85 2f       	mov	r24, r21
     4b6:	f2 cf       	rjmp	.-28     	; 0x49c <OS_Abort+0x9c>

000004b8 <Task_Create_System>:
     4b8:	cf 93       	push	r28
     4ba:	cf b7       	in	r28, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	90 93 1f 02 	sts	0x021F, r25
     4c2:	80 93 1e 02 	sts	0x021E, r24
     4c6:	70 93 21 02 	sts	0x0221, r23
     4ca:	60 93 20 02 	sts	0x0220, r22
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	80 93 22 02 	sts	0x0222, r24
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	80 93 29 02 	sts	0x0229, r24
     4da:	ab de       	rcall	.-682    	; 0x232 <_ZL12enter_kernelv>
     4dc:	80 91 1c 02 	lds	r24, 0x021C
     4e0:	90 91 1d 02 	lds	r25, 0x021D
     4e4:	cf bf       	out	0x3f, r28	; 63
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <Task_Create_RR>:
     4ea:	cf 93       	push	r28
     4ec:	cf b7       	in	r28, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	90 93 1f 02 	sts	0x021F, r25
     4f4:	80 93 1e 02 	sts	0x021E, r24
     4f8:	70 93 21 02 	sts	0x0221, r23
     4fc:	60 93 20 02 	sts	0x0220, r22
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 22 02 	sts	0x0222, r24
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	80 93 29 02 	sts	0x0229, r24
     50c:	92 de       	rcall	.-732    	; 0x232 <_ZL12enter_kernelv>
     50e:	80 91 1c 02 	lds	r24, 0x021C
     512:	90 91 1d 02 	lds	r25, 0x021D
     516:	cf bf       	out	0x3f, r28	; 63
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <Task_Create_Periodic>:
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	cf b7       	in	r28, 0x3f	; 63
     524:	f8 94       	cli
     526:	90 93 1f 02 	sts	0x021F, r25
     52a:	80 93 1e 02 	sts	0x021E, r24
     52e:	70 93 21 02 	sts	0x0221, r23
     532:	60 93 20 02 	sts	0x0220, r22
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	80 93 22 02 	sts	0x0222, r24
     53c:	50 93 24 02 	sts	0x0224, r21
     540:	40 93 23 02 	sts	0x0223, r20
     544:	10 93 28 02 	sts	0x0228, r17
     548:	00 93 27 02 	sts	0x0227, r16
     54c:	30 93 26 02 	sts	0x0226, r19
     550:	20 93 25 02 	sts	0x0225, r18
     554:	80 93 29 02 	sts	0x0229, r24
     558:	6c de       	rcall	.-808    	; 0x232 <_ZL12enter_kernelv>
     55a:	80 91 1c 02 	lds	r24, 0x021C
     55e:	90 91 1d 02 	lds	r25, 0x021D
     562:	cf bf       	out	0x3f, r28	; 63
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	08 95       	ret

0000056c <Now>:

#define CYCLES_IN_MS (TICK_CYCLES/TICK)

uint16_t Now() {
	return ms_counter + ((10000 - (OCR1A - TCNT1))/CYCLES_IN_MS);
     56c:	20 91 84 00 	lds	r18, 0x0084
     570:	30 91 85 00 	lds	r19, 0x0085
     574:	80 91 88 00 	lds	r24, 0x0088
     578:	90 91 89 00 	lds	r25, 0x0089
     57c:	20 5f       	subi	r18, 0xF0	; 240
     57e:	38 4d       	sbci	r19, 0xD8	; 216
     580:	28 1b       	sub	r18, r24
     582:	39 0b       	sbc	r19, r25
     584:	32 95       	swap	r19
     586:	22 95       	swap	r18
     588:	2f 70       	andi	r18, 0x0F	; 15
     58a:	23 27       	eor	r18, r19
     58c:	3f 70       	andi	r19, 0x0F	; 15
     58e:	23 27       	eor	r18, r19
     590:	a3 e6       	ldi	r26, 0x63	; 99
     592:	b0 e1       	ldi	r27, 0x10	; 16
     594:	33 d4       	rcall	.+2150   	; 0xdfc <__umulhisi3>
     596:	96 95       	lsr	r25
     598:	87 95       	ror	r24
     59a:	96 95       	lsr	r25
     59c:	87 95       	ror	r24
     59e:	96 95       	lsr	r25
     5a0:	87 95       	ror	r24
     5a2:	20 91 eb 0b 	lds	r18, 0x0BEB
     5a6:	30 91 ec 0b 	lds	r19, 0x0BEC
}
     5aa:	82 0f       	add	r24, r18
     5ac:	93 1f       	adc	r25, r19
     5ae:	08 95       	ret

000005b0 <_ZL7enqueueP7queue_tP9td_struct>:
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	8c 01       	movw	r16, r24
     5ba:	eb 01       	movw	r28, r22
	task_to_add->next = NULL;
     5bc:	fb 01       	movw	r30, r22
     5be:	ed 5e       	subi	r30, 0xED	; 237
     5c0:	fe 4f       	sbci	r31, 0xFE	; 254
     5c2:	11 82       	std	Z+1, r1	; 0x01
     5c4:	10 82       	st	Z, r1
	
	if(queue_ptr->head == NULL)
     5c6:	dc 01       	movw	r26, r24
     5c8:	8d 91       	ld	r24, X+
     5ca:	9c 91       	ld	r25, X
     5cc:	11 97       	sbiw	r26, 0x01	; 1
     5ce:	89 2b       	or	r24, r25
     5d0:	41 f4       	brne	.+16     	; 0x5e2 <_ZL7enqueueP7queue_tP9td_struct+0x32>
	{
		/* empty queue */
		queue_ptr->head = task_to_add;
     5d2:	11 96       	adiw	r26, 0x01	; 1
     5d4:	7c 93       	st	X, r23
     5d6:	6e 93       	st	-X, r22
		queue_ptr->tail = task_to_add;
     5d8:	13 96       	adiw	r26, 0x03	; 3
     5da:	7c 93       	st	X, r23
     5dc:	6e 93       	st	-X, r22
     5de:	12 97       	sbiw	r26, 0x02	; 2
		return;
     5e0:	73 c0       	rjmp	.+230    	; 0x6c8 <_ZL7enqueueP7queue_tP9td_struct+0x118>
	}
	
	if(task_to_add->level == PERIODIC) 
     5e2:	fb 01       	movw	r30, r22
     5e4:	eb 5f       	subi	r30, 0xFB	; 251
     5e6:	fe 4f       	sbci	r31, 0xFE	; 254
     5e8:	80 81       	ld	r24, Z
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <_ZL7enqueueP7queue_tP9td_struct+0x40>
     5ee:	5f c0       	rjmp	.+190    	; 0x6ae <_ZL7enqueueP7queue_tP9td_struct+0xfe>
	{
		uint16_t now = Now();
     5f0:	bd df       	rcall	.-134    	; 0x56c <Now>
		task_descriptor_t* head_ptr = queue_ptr->head;
     5f2:	f8 01       	movw	r30, r16
     5f4:	20 81       	ld	r18, Z
     5f6:	31 81       	ldd	r19, Z+1	; 0x01
		while(head_ptr != NULL)
     5f8:	21 15       	cp	r18, r1
     5fa:	31 05       	cpc	r19, r1
     5fc:	09 f4       	brne	.+2      	; 0x600 <_ZL7enqueueP7queue_tP9td_struct+0x50>
     5fe:	57 c0       	rjmp	.+174    	; 0x6ae <_ZL7enqueueP7queue_tP9td_struct+0xfe>
		{
			if (((task_to_add->offset + task_to_add->period) - (now - task_to_add->last)) < ((head_ptr->offset + head_ptr->period) - (now - head_ptr->last)))
     600:	fe 01       	movw	r30, r28
     602:	ea 5f       	subi	r30, 0xFA	; 250
     604:	fe 4f       	sbci	r31, 0xFE	; 254
     606:	01 90       	ld	r0, Z+
     608:	f0 81       	ld	r31, Z
     60a:	e0 2d       	mov	r30, r0
     60c:	de 01       	movw	r26, r28
     60e:	a6 5f       	subi	r26, 0xF6	; 246
     610:	be 4f       	sbci	r27, 0xFE	; 254
     612:	4d 91       	ld	r20, X+
     614:	5c 91       	ld	r21, X
     616:	11 97       	sbiw	r26, 0x01	; 1
     618:	e4 0f       	add	r30, r20
     61a:	f5 1f       	adc	r31, r21
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	4d 91       	ld	r20, X+
     620:	5c 91       	ld	r21, X
     622:	e4 0f       	add	r30, r20
     624:	f5 1f       	adc	r31, r21
     626:	e8 1b       	sub	r30, r24
     628:	f9 0b       	sbc	r31, r25
     62a:	d9 01       	movw	r26, r18
     62c:	aa 5f       	subi	r26, 0xFA	; 250
     62e:	be 4f       	sbci	r27, 0xFE	; 254
     630:	6d 91       	ld	r22, X+
     632:	7c 91       	ld	r23, X
     634:	11 97       	sbiw	r26, 0x01	; 1
     636:	14 96       	adiw	r26, 0x04	; 4
     638:	4d 91       	ld	r20, X+
     63a:	5c 91       	ld	r21, X
     63c:	11 97       	sbiw	r26, 0x01	; 1
     63e:	46 0f       	add	r20, r22
     640:	57 1f       	adc	r21, r23
     642:	12 96       	adiw	r26, 0x02	; 2
     644:	6d 91       	ld	r22, X+
     646:	7c 91       	ld	r23, X
     648:	46 0f       	add	r20, r22
     64a:	57 1f       	adc	r21, r23
     64c:	48 1b       	sub	r20, r24
     64e:	59 0b       	sbc	r21, r25
     650:	e4 17       	cp	r30, r20
     652:	f5 07       	cpc	r31, r21
     654:	20 f5       	brcc	.+72     	; 0x69e <_ZL7enqueueP7queue_tP9td_struct+0xee>
     656:	16 c0       	rjmp	.+44     	; 0x684 <_ZL7enqueueP7queue_tP9td_struct+0xd4>
     658:	d9 01       	movw	r26, r18
     65a:	aa 5f       	subi	r26, 0xFA	; 250
     65c:	be 4f       	sbci	r27, 0xFE	; 254
     65e:	6d 91       	ld	r22, X+
     660:	7c 91       	ld	r23, X
     662:	11 97       	sbiw	r26, 0x01	; 1
     664:	14 96       	adiw	r26, 0x04	; 4
     666:	4d 91       	ld	r20, X+
     668:	5c 91       	ld	r21, X
     66a:	11 97       	sbiw	r26, 0x01	; 1
     66c:	46 0f       	add	r20, r22
     66e:	57 1f       	adc	r21, r23
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	6d 91       	ld	r22, X+
     674:	7c 91       	ld	r23, X
     676:	46 0f       	add	r20, r22
     678:	57 1f       	adc	r21, r23
     67a:	48 1b       	sub	r20, r24
     67c:	59 0b       	sbc	r21, r25
     67e:	e4 17       	cp	r30, r20
     680:	f5 07       	cpc	r31, r21
     682:	68 f4       	brcc	.+26     	; 0x69e <_ZL7enqueueP7queue_tP9td_struct+0xee>
			{
				task_to_add->next = head_ptr->next;
     684:	f9 01       	movw	r30, r18
     686:	ed 5e       	subi	r30, 0xED	; 237
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	de 01       	movw	r26, r28
     690:	ad 5e       	subi	r26, 0xED	; 237
     692:	be 4f       	sbci	r27, 0xFE	; 254
     694:	8d 93       	st	X+, r24
     696:	9c 93       	st	X, r25
				head_ptr->next = task_to_add;
     698:	d1 83       	std	Z+1, r29	; 0x01
     69a:	c0 83       	st	Z, r28
				return;
     69c:	15 c0       	rjmp	.+42     	; 0x6c8 <_ZL7enqueueP7queue_tP9td_struct+0x118>
			}
			
			head_ptr = head_ptr->next;
     69e:	d9 01       	movw	r26, r18
     6a0:	ad 5e       	subi	r26, 0xED	; 237
     6a2:	be 4f       	sbci	r27, 0xFE	; 254
     6a4:	2d 91       	ld	r18, X+
     6a6:	3c 91       	ld	r19, X
	
	if(task_to_add->level == PERIODIC) 
	{
		uint16_t now = Now();
		task_descriptor_t* head_ptr = queue_ptr->head;
		while(head_ptr != NULL)
     6a8:	21 15       	cp	r18, r1
     6aa:	31 05       	cpc	r19, r1
     6ac:	a9 f6       	brne	.-86     	; 0x658 <_ZL7enqueueP7queue_tP9td_struct+0xa8>
			head_ptr = head_ptr->next;
		}
	}

	/* put task at the back of the queue */
	queue_ptr->tail->next = task_to_add;
     6ae:	d8 01       	movw	r26, r16
     6b0:	12 96       	adiw	r26, 0x02	; 2
     6b2:	ed 91       	ld	r30, X+
     6b4:	fc 91       	ld	r31, X
     6b6:	13 97       	sbiw	r26, 0x03	; 3
     6b8:	ed 5e       	subi	r30, 0xED	; 237
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	d1 83       	std	Z+1, r29	; 0x01
     6be:	c0 83       	st	Z, r28
	queue_ptr->tail = task_to_add;
     6c0:	13 96       	adiw	r26, 0x03	; 3
     6c2:	dc 93       	st	X, r29
     6c4:	ce 93       	st	-X, r28
     6c6:	12 97       	sbiw	r26, 0x02	; 2
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <_ZL18kernel_create_taskv>:
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;


    if (dead_pool_queue.head == NULL)
     6d2:	80 91 18 02 	lds	r24, 0x0218
     6d6:	90 91 19 02 	lds	r25, 0x0219
     6da:	89 2b       	or	r24, r25
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <_ZL18kernel_create_taskv+0xe>
     6de:	84 c0       	rjmp	.+264    	; 0x7e8 <_ZL18kernel_create_taskv+0x116>
        /* Too many tasks! */
        return 0;
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == 0)//NULL)
     6e0:	80 91 22 02 	lds	r24, 0x0222
     6e4:	88 23       	and	r24, r24
     6e6:	29 f0       	breq	.+10     	; 0x6f2 <_ZL18kernel_create_taskv+0x20>
		p = &task_desc[MAXPROCESS];
	}
	/* Find an unused descriptor. */
	else
	{
	    p = dequeue(&dead_pool_queue);
     6e8:	88 e1       	ldi	r24, 0x18	; 24
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	fb dd       	rcall	.-1034   	; 0x2e4 <_ZL7dequeueP7queue_t>
     6ee:	bc 01       	movw	r22, r24
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <_ZL18kernel_create_taskv+0x24>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == 0)//NULL)
	{
		p = &task_desc[MAXPROCESS];
     6f2:	62 ed       	ldi	r22, 0xD2	; 210
     6f4:	7a e0       	ldi	r23, 0x0A	; 10
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
     6f6:	fb 01       	movw	r30, r22
     6f8:	e7 52       	subi	r30, 0x27	; 39
     6fa:	ff 4f       	sbci	r31, 0xFF	; 255
     6fc:	10 82       	st	Z, r1
    /* stack_top[31] is r30. */
	stack_top[32] = 0xEE;
     6fe:	8e ee       	ldi	r24, 0xEE	; 238
     700:	7e 96       	adiw	r30, 0x1e	; 30
     702:	80 83       	st	Z, r24
    stack_top[33] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	80 83       	st	Z, r24
     * onto the stack in reverse byte order (least significant first, followed
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
	stack_top[35] = (uint8_t)(0);
     70a:	32 96       	adiw	r30, 0x02	; 2
     70c:	10 82       	st	Z, r1
    stack_top[36] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
     70e:	ee e1       	ldi	r30, 0x1E	; 30
     710:	f2 e0       	ldi	r31, 0x02	; 2
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	db 01       	movw	r26, r22
     718:	a5 50       	subi	r26, 0x05	; 5
     71a:	bf 4f       	sbci	r27, 0xFF	; 255
     71c:	9c 93       	st	X, r25
    stack_top[37] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	fb 01       	movw	r30, r22
     724:	e4 50       	subi	r30, 0x04	; 4
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	80 83       	st	Z, r24
    stack_top[38] = (uint8_t)(0);
     72a:	31 96       	adiw	r30, 0x01	; 1
     72c:	10 82       	st	Z, r1
	stack_top[39] = (uint8_t)((uint16_t)Task_Terminate >> 8);
     72e:	82 e8       	ldi	r24, 0x82	; 130
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	31 96       	adiw	r30, 0x01	; 1
     734:	90 83       	st	Z, r25
    stack_top[40] = (uint8_t)(uint16_t)Task_Terminate;
     736:	31 96       	adiw	r30, 0x01	; 1
     738:	80 83       	st	Z, r24

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	cb 01       	movw	r24, r22
     73e:	89 52       	subi	r24, 0x29	; 41
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24

    p->state = READY;
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	32 96       	adiw	r30, 0x02	; 2
     74a:	80 83       	st	Z, r24
    p->arg = kernel_request_create_args.arg;
     74c:	80 91 20 02 	lds	r24, 0x0220
     750:	90 91 21 02 	lds	r25, 0x0221
     754:	31 96       	adiw	r30, 0x01	; 1
     756:	91 83       	std	Z+1, r25	; 0x01
     758:	80 83       	st	Z, r24
    p->level = kernel_request_create_args.level;
     75a:	80 91 22 02 	lds	r24, 0x0222
     75e:	32 96       	adiw	r30, 0x02	; 2
     760:	80 83       	st	Z, r24
	if (p->level == PERIODIC) 
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	31 f5       	brne	.+76     	; 0x7b2 <_ZL18kernel_create_taskv+0xe0>
	{
		p->offset = kernel_request_create_args.start - kernel_request_create_args.period;
     766:	80 91 27 02 	lds	r24, 0x0227
     76a:	90 91 28 02 	lds	r25, 0x0228
     76e:	e3 e2       	ldi	r30, 0x23	; 35
     770:	f2 e0       	ldi	r31, 0x02	; 2
     772:	20 81       	ld	r18, Z
     774:	31 81       	ldd	r19, Z+1	; 0x01
     776:	1f 96       	adiw	r26, 0x0f	; 15
     778:	82 1b       	sub	r24, r18
     77a:	93 0b       	sbc	r25, r19
     77c:	8d 93       	st	X+, r24
     77e:	9c 93       	st	X, r25
		p->period = kernel_request_create_args.period;
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	fb 01       	movw	r30, r22
     786:	ea 5f       	subi	r30, 0xFA	; 250
     788:	fe 4f       	sbci	r31, 0xFE	; 254
     78a:	91 83       	std	Z+1, r25	; 0x01
     78c:	80 83       	st	Z, r24
		p->wcet = kernel_request_create_args.wcet;
     78e:	80 91 25 02 	lds	r24, 0x0225
     792:	90 91 26 02 	lds	r25, 0x0226
     796:	32 96       	adiw	r30, 0x02	; 2
     798:	91 83       	std	Z+1, r25	; 0x01
     79a:	80 83       	st	Z, r24
		p->ticks_running_previous = (uint16_t) 0;
     79c:	37 96       	adiw	r30, 0x07	; 7
     79e:	11 82       	std	Z+1, r1	; 0x01
     7a0:	10 82       	st	Z, r1
		p->ticks_running_no_preemp = (uint16_t) 0;
     7a2:	32 96       	adiw	r30, 0x02	; 2
     7a4:	11 82       	std	Z+1, r1	; 0x01
     7a6:	10 82       	st	Z, r1
		p->last = (uint16_t) 0;
     7a8:	35 97       	sbiw	r30, 0x05	; 5
     7aa:	11 82       	std	Z+1, r1	; 0x01
     7ac:	10 82       	st	Z, r1
		p->ran_once = false;
     7ae:	32 96       	adiw	r30, 0x02	; 2
     7b0:	10 82       	st	Z, r1
	}
	switch(kernel_request_create_args.level)
     7b2:	80 91 22 02 	lds	r24, 0x0222
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <_ZL18kernel_create_taskv+0xf2>
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	49 f0       	breq	.+18     	; 0x7d0 <_ZL18kernel_create_taskv+0xfe>
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	b1 f4       	brne	.+44     	; 0x7ee <_ZL18kernel_create_taskv+0x11c>
     7c2:	0c c0       	rjmp	.+24     	; 0x7dc <_ZL18kernel_create_taskv+0x10a>
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic_queue */
		enqueue(&periodic_queue, p);
     7c4:	8c e0       	ldi	r24, 0x0C	; 12
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	f3 de       	rcall	.-538    	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
	switch(kernel_request_create_args.level)
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic_queue */
		enqueue(&periodic_queue, p);
		break;
     7ce:	08 95       	ret

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
     7d0:	80 e1       	ldi	r24, 0x10	; 16
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	ed de       	rcall	.-550    	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
		break;
     7da:	08 95       	ret

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
     7dc:	84 e1       	ldi	r24, 0x14	; 20
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	e7 de       	rcall	.-562    	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
		break;
     7e6:	08 95       	ret


    if (dead_pool_queue.head == NULL)
    {
        /* Too many tasks! */
        return 0;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	08 95       	ret
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
}
     7f2:	08 95       	ret

000007f4 <_Z7OS_Initv>:
{	
    int i;

    /* Set up the clocks */

    TCCR1B |= (_BV(CS11));
     7f4:	e1 e8       	ldi	r30, 0x81	; 129
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	80 83       	st	Z, r24
     7fe:	ec e2       	ldi	r30, 0x2C	; 44
     800:	f3 e0       	ldi	r31, 0x03	; 3
     802:	2f eb       	ldi	r18, 0xBF	; 191
     804:	3a e0       	ldi	r19, 0x0A	; 10
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    {
        task_desc[i].state = DEAD;
     806:	10 82       	st	Z, r1
     808:	cf 01       	movw	r24, r30
     80a:	43 96       	adiw	r24, 0x13	; 19
/*        name_to_task_ptr[i] = NULL;*/
        task_desc[i].next = &task_desc[i + 1];
     80c:	92 8b       	std	Z+18, r25	; 0x12
     80e:	81 8b       	std	Z+17, r24	; 0x11
     810:	eb 5e       	subi	r30, 0xEB	; 235
     812:	fe 4f       	sbci	r31, 0xFE	; 254
    /*
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
     814:	e2 17       	cp	r30, r18
     816:	f3 07       	cpc	r31, r19
     818:	b1 f7       	brne	.-20     	; 0x806 <_Z7OS_Initv+0x12>
    {
        task_desc[i].state = DEAD;
/*        name_to_task_ptr[i] = NULL;*/
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[MAXPROCESS - 1].next = NULL;
     81a:	10 92 d1 0a 	sts	0x0AD1, r1
     81e:	10 92 d0 0a 	sts	0x0AD0, r1
    dead_pool_queue.head = &task_desc[0];
     822:	0f 2e       	mov	r0, r31
     824:	fa e2       	ldi	r31, 0x2A	; 42
     826:	ef 2e       	mov	r14, r31
     828:	f2 e0       	ldi	r31, 0x02	; 2
     82a:	ff 2e       	mov	r15, r31
     82c:	f0 2d       	mov	r31, r0
     82e:	f0 92 19 02 	sts	0x0219, r15
     832:	e0 92 18 02 	sts	0x0218, r14
    dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
     836:	8d eb       	ldi	r24, 0xBD	; 189
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	90 93 1b 02 	sts	0x021B, r25
     83e:	80 93 1a 02 	sts	0x021A, r24

	/* Create idle "task" */
    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
     842:	0e e1       	ldi	r16, 0x1E	; 30
     844:	12 e0       	ldi	r17, 0x02	; 2
     846:	8f eb       	ldi	r24, 0xBF	; 191
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	f8 01       	movw	r30, r16
     84c:	91 83       	std	Z+1, r25	; 0x01
     84e:	80 83       	st	Z, r24
    kernel_request_create_args.level = IDLE;
     850:	c2 e2       	ldi	r28, 0x22	; 34
     852:	d2 e0       	ldi	r29, 0x02	; 2
     854:	18 82       	st	Y, r1
    kernel_create_task();
     856:	3d df       	rcall	.-390    	; 0x6d2 <_ZL18kernel_create_taskv>

    /* Create "main" task as SYSTEM level. */
    kernel_request_create_args.f = (voidfuncvoid_ptr)r_main;
     858:	80 ea       	ldi	r24, 0xA0	; 160
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	f8 01       	movw	r30, r16
     85e:	91 83       	std	Z+1, r25	; 0x01
     860:	80 83       	st	Z, r24
    kernel_request_create_args.level = SYSTEM;
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	88 83       	st	Y, r24
    kernel_create_task();
     866:	35 df       	rcall	.-406    	; 0x6d2 <_ZL18kernel_create_taskv>

    /* First time through. Select "main" task to run first. */
    cur_task = task_desc;
     868:	f0 92 ea 0b 	sts	0x0BEA, r15
     86c:	e0 92 e9 0b 	sts	0x0BE9, r14
    cur_task->state = RUNNING;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 2c 03 	sts	0x032C, r24
    dequeue(&system_queue);
     876:	80 e1       	ldi	r24, 0x10	; 16
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	34 dd       	rcall	.-1432   	; 0x2e4 <_ZL7dequeueP7queue_t>

    /* Set up Timer 1 Output Compare interrupt,the TICK clock. */
    TIMSK1 |= _BV(OCIE1A);
     87c:	ef e6       	ldi	r30, 0x6F	; 111
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	82 60       	ori	r24, 0x02	; 2
     884:	80 83       	st	Z, r24
    OCR1A = TCNT1 + TICK_CYCLES;
     886:	80 91 84 00 	lds	r24, 0x0084
     88a:	90 91 85 00 	lds	r25, 0x0085
     88e:	80 5f       	subi	r24, 0xF0	; 240
     890:	98 4d       	sbci	r25, 0xD8	; 216
     892:	90 93 89 00 	sts	0x0089, r25
     896:	80 93 88 00 	sts	0x0088, r24
    /* Clear flag. */
    TIFR1 = _BV(OCF1A);
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	86 bb       	out	0x16, r24	; 22
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    {
		uint16_t now = Now();
		if(system_queue.head != NULL)
     89e:	c0 e1       	ldi	r28, 0x10	; 16
     8a0:	d2 e0       	ldi	r29, 0x02	; 2
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }

        cur_task->state = RUNNING;
     8a2:	77 24       	eor	r7, r7
     8a4:	73 94       	inc	r7
		uint16_t now = Now();
		if(system_queue.head != NULL)
        {
            cur_task = dequeue(&system_queue);
        }
        else if (periodic_queue.head != NULL && ((now - periodic_queue.head->last) >= (periodic_queue.head->offset + periodic_queue.head->period)))
     8a6:	0c e0       	ldi	r16, 0x0C	; 12
     8a8:	12 e0       	ldi	r17, 0x02	; 2
			if (periodic_queue.head != NULL && ((now - periodic_queue.head->last) >= (periodic_queue.head->offset + periodic_queue.head->period))) {
				error_msg = ERR_RUN_6_INVALID_PERIODIC_SCHEDULING;
				OS_Abort();
			}
        }
        else if(rr_queue.head != NULL)
     8aa:	0f 2e       	mov	r0, r31
     8ac:	f4 e1       	ldi	r31, 0x14	; 20
     8ae:	ef 2e       	mov	r14, r31
     8b0:	f2 e0       	ldi	r31, 0x02	; 2
     8b2:	ff 2e       	mov	r15, r31
     8b4:	f0 2d       	mov	r31, r0
            cur_task = dequeue(&rr_queue);
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f2 ed       	ldi	r31, 0xD2	; 210
     8ba:	af 2e       	mov	r10, r31
     8bc:	fa e0       	ldi	r31, 0x0A	; 10
     8be:	bf 2e       	mov	r11, r31
     8c0:	f0 2d       	mov	r31, r0
         * making the request.
         */
        if(kernel_request_retval)
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
     8c2:	0f 2e       	mov	r0, r31
     8c4:	f2 e2       	ldi	r31, 0x22	; 34
     8c6:	cf 2e       	mov	r12, r31
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	df 2e       	mov	r13, r31
     8cc:	f0 2d       	mov	r31, r0

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
               kernel_request_create_args.level == PERIODIC)
            {
                cur_task->state = READY;
     8ce:	68 94       	set
     8d0:	66 24       	eor	r6, r6
     8d2:	61 f8       	bld	r6, 1
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
     8d4:	80 91 e9 0b 	lds	r24, 0x0BE9
     8d8:	90 91 ea 0b 	lds	r25, 0x0BEA
     8dc:	fc 01       	movw	r30, r24
     8de:	ee 5f       	subi	r30, 0xFE	; 254
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	20 81       	ld	r18, Z
     8e4:	21 30       	cpi	r18, 0x01	; 1
     8e6:	21 f4       	brne	.+8      	; 0x8f0 <_Z7OS_Initv+0xfc>
     8e8:	82 5d       	subi	r24, 0xD2	; 210
     8ea:	9a 40       	sbci	r25, 0x0A	; 10
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <_Z7OS_Initv+0xfc>
     8ee:	7a c0       	rjmp	.+244    	; 0x9e4 <_Z7OS_Initv+0x1f0>
    {
		uint16_t now = Now();
     8f0:	3d de       	rcall	.-902    	; 0x56c <Now>
     8f2:	4c 01       	movw	r8, r24
		if(system_queue.head != NULL)
     8f4:	88 81       	ld	r24, Y
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	89 2b       	or	r24, r25
     8fa:	39 f0       	breq	.+14     	; 0x90a <_Z7OS_Initv+0x116>
        {
            cur_task = dequeue(&system_queue);
     8fc:	ce 01       	movw	r24, r28
     8fe:	f2 dc       	rcall	.-1564   	; 0x2e4 <_ZL7dequeueP7queue_t>
     900:	90 93 ea 0b 	sts	0x0BEA, r25
     904:	80 93 e9 0b 	sts	0x0BE9, r24
     908:	66 c0       	rjmp	.+204    	; 0x9d6 <_Z7OS_Initv+0x1e2>
        }
        else if (periodic_queue.head != NULL && ((now - periodic_queue.head->last) >= (periodic_queue.head->offset + periodic_queue.head->period)))
     90a:	f8 01       	movw	r30, r16
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	09 f4       	brne	.+2      	; 0x916 <_Z7OS_Initv+0x122>
     914:	50 c0       	rjmp	.+160    	; 0x9b6 <_Z7OS_Initv+0x1c2>
     916:	fc 01       	movw	r30, r24
     918:	e4 5f       	subi	r30, 0xF4	; 244
     91a:	fe 4f       	sbci	r31, 0xFE	; 254
     91c:	20 81       	ld	r18, Z
     91e:	31 81       	ldd	r19, Z+1	; 0x01
     920:	a4 01       	movw	r20, r8
     922:	42 1b       	sub	r20, r18
     924:	53 0b       	sbc	r21, r19
     926:	9a 01       	movw	r18, r20
     928:	36 97       	sbiw	r30, 0x06	; 6
     92a:	dc 01       	movw	r26, r24
     92c:	a6 5f       	subi	r26, 0xF6	; 246
     92e:	be 4f       	sbci	r27, 0xFE	; 254
     930:	40 81       	ld	r20, Z
     932:	51 81       	ldd	r21, Z+1	; 0x01
     934:	8d 91       	ld	r24, X+
     936:	9c 91       	ld	r25, X
     938:	84 0f       	add	r24, r20
     93a:	95 1f       	adc	r25, r21
     93c:	28 17       	cp	r18, r24
     93e:	39 07       	cpc	r19, r25
     940:	d0 f1       	brcs	.+116    	; 0x9b6 <_Z7OS_Initv+0x1c2>
        {
			/* Keep running the current PERIODIC task. */
			cur_task = dequeue(&periodic_queue);
     942:	c8 01       	movw	r24, r16
     944:	cf dc       	rcall	.-1634   	; 0x2e4 <_ZL7dequeueP7queue_t>
     946:	90 93 ea 0b 	sts	0x0BEA, r25
     94a:	80 93 e9 0b 	sts	0x0BE9, r24
			
			cur_task->last += cur_task->period + cur_task->offset;
     94e:	fc 01       	movw	r30, r24
     950:	e4 5f       	subi	r30, 0xF4	; 244
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	dc 01       	movw	r26, r24
     956:	aa 5f       	subi	r26, 0xFA	; 250
     958:	be 4f       	sbci	r27, 0xFE	; 254
     95a:	4d 91       	ld	r20, X+
     95c:	5c 91       	ld	r21, X
     95e:	11 97       	sbiw	r26, 0x01	; 1
     960:	20 81       	ld	r18, Z
     962:	31 81       	ldd	r19, Z+1	; 0x01
     964:	24 0f       	add	r18, r20
     966:	35 1f       	adc	r19, r21
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	4d 91       	ld	r20, X+
     96c:	5c 91       	ld	r21, X
     96e:	24 0f       	add	r18, r20
     970:	35 1f       	adc	r19, r21
     972:	31 83       	std	Z+1, r19	; 0x01
     974:	20 83       	st	Z, r18
			cur_task->ticks_running_no_preemp = now;
     976:	35 96       	adiw	r30, 0x05	; 5
     978:	91 82       	std	Z+1, r9	; 0x01
     97a:	80 82       	st	Z, r8
			
			if (periodic_queue.head != NULL && ((now - periodic_queue.head->last) >= (periodic_queue.head->offset + periodic_queue.head->period))) {
     97c:	f8 01       	movw	r30, r16
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	41 f1       	breq	.+80     	; 0x9d6 <_Z7OS_Initv+0x1e2>
     986:	fc 01       	movw	r30, r24
     988:	e4 5f       	subi	r30, 0xF4	; 244
     98a:	fe 4f       	sbci	r31, 0xFE	; 254
     98c:	20 81       	ld	r18, Z
     98e:	31 81       	ldd	r19, Z+1	; 0x01
     990:	82 1a       	sub	r8, r18
     992:	93 0a       	sbc	r9, r19
     994:	36 97       	sbiw	r30, 0x06	; 6
     996:	dc 01       	movw	r26, r24
     998:	a6 5f       	subi	r26, 0xF6	; 246
     99a:	be 4f       	sbci	r27, 0xFE	; 254
     99c:	20 81       	ld	r18, Z
     99e:	31 81       	ldd	r19, Z+1	; 0x01
     9a0:	8d 91       	ld	r24, X+
     9a2:	9c 91       	ld	r25, X
     9a4:	82 0f       	add	r24, r18
     9a6:	93 1f       	adc	r25, r19
     9a8:	88 16       	cp	r8, r24
     9aa:	99 06       	cpc	r9, r25
     9ac:	a0 f0       	brcs	.+40     	; 0x9d6 <_Z7OS_Initv+0x1e2>
				error_msg = ERR_RUN_6_INVALID_PERIODIC_SCHEDULING;
     9ae:	86 e0       	ldi	r24, 0x06	; 6
     9b0:	80 93 00 02 	sts	0x0200, r24
				OS_Abort();
     9b4:	25 dd       	rcall	.-1462   	; 0x400 <OS_Abort>
			}
        }
        else if(rr_queue.head != NULL)
     9b6:	f7 01       	movw	r30, r14
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	89 2b       	or	r24, r25
     9be:	39 f0       	breq	.+14     	; 0x9ce <_Z7OS_Initv+0x1da>
        {
            cur_task = dequeue(&rr_queue);
     9c0:	c7 01       	movw	r24, r14
     9c2:	90 dc       	rcall	.-1760   	; 0x2e4 <_ZL7dequeueP7queue_t>
     9c4:	90 93 ea 0b 	sts	0x0BEA, r25
     9c8:	80 93 e9 0b 	sts	0x0BE9, r24
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <_Z7OS_Initv+0x1e2>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     9ce:	b0 92 ea 0b 	sts	0x0BEA, r11
     9d2:	a0 92 e9 0b 	sts	0x0BE9, r10
        }

        cur_task->state = RUNNING;
     9d6:	e0 91 e9 0b 	lds	r30, 0x0BE9
     9da:	f0 91 ea 0b 	lds	r31, 0x0BEA
     9de:	ee 5f       	subi	r30, 0xFE	; 254
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	70 82       	st	Z, r7
{
    for(;;)
    {
        kernel_dispatch();

        exit_kernel();
     9e4:	cd db       	rcall	.-2150   	; 0x180 <_ZL11exit_kernelv>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waiting queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
     9e6:	80 91 29 02 	lds	r24, 0x0229
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <_Z7OS_Initv+0x1fc>
     9ee:	4a c0       	rjmp	.+148    	; 0xa84 <_Z7OS_Initv+0x290>
     9f0:	30 f4       	brcc	.+12     	; 0x9fe <_Z7OS_Initv+0x20a>
     9f2:	88 23       	and	r24, r24
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <_Z7OS_Initv+0x204>
     9f6:	ed c0       	rjmp	.+474    	; 0xbd2 <_Z7OS_Initv+0x3de>
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	51 f0       	breq	.+20     	; 0xa10 <_Z7OS_Initv+0x21c>
     9fc:	e6 c0       	rjmp	.+460    	; 0xbca <_Z7OS_Initv+0x3d6>
     9fe:	84 30       	cpi	r24, 0x04	; 4
     a00:	09 f4       	brne	.+2      	; 0xa04 <_Z7OS_Initv+0x210>
     a02:	a0 c0       	rjmp	.+320    	; 0xb44 <_Z7OS_Initv+0x350>
     a04:	08 f4       	brcc	.+2      	; 0xa08 <_Z7OS_Initv+0x214>
     a06:	8d c0       	rjmp	.+282    	; 0xb22 <_Z7OS_Initv+0x32e>
     a08:	85 30       	cpi	r24, 0x05	; 5
     a0a:	09 f4       	brne	.+2      	; 0xa0e <_Z7OS_Initv+0x21a>
     a0c:	e2 c0       	rjmp	.+452    	; 0xbd2 <_Z7OS_Initv+0x3de>
     a0e:	dd c0       	rjmp	.+442    	; 0xbca <_Z7OS_Initv+0x3d6>
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */
	
	/* If Periodic task still running then error more than wcet */
	if(cur_task != NULL && cur_task->level == PERIODIC && cur_task->state == RUNNING)
     a10:	80 90 e9 0b 	lds	r8, 0x0BE9
     a14:	90 90 ea 0b 	lds	r9, 0x0BEA
     a18:	81 14       	cp	r8, r1
     a1a:	91 04       	cpc	r9, r1
     a1c:	11 f1       	breq	.+68     	; 0xa62 <_Z7OS_Initv+0x26e>
     a1e:	f4 01       	movw	r30, r8
     a20:	eb 5f       	subi	r30, 0xFB	; 251
     a22:	fe 4f       	sbci	r31, 0xFE	; 254
     a24:	80 81       	ld	r24, Z
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	e1 f4       	brne	.+56     	; 0xa62 <_Z7OS_Initv+0x26e>
     a2a:	33 97       	sbiw	r30, 0x03	; 3
     a2c:	80 81       	ld	r24, Z
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	09 f0       	breq	.+2      	; 0xa34 <_Z7OS_Initv+0x240>
     a32:	cf c0       	rjmp	.+414    	; 0xbd2 <_Z7OS_Initv+0x3de>
	{
		if(((Now() - cur_task->ticks_running_no_preemp) + cur_task->ticks_running_previous) > cur_task->wcet)
     a34:	9b dd       	rcall	.-1226   	; 0x56c <Now>
     a36:	f4 01       	movw	r30, r8
     a38:	e1 5f       	subi	r30, 0xF1	; 241
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	20 81       	ld	r18, Z
     a3e:	31 81       	ldd	r19, Z+1	; 0x01
     a40:	32 96       	adiw	r30, 0x02	; 2
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	24 1b       	sub	r18, r20
     a48:	35 0b       	sbc	r19, r21
     a4a:	82 0f       	add	r24, r18
     a4c:	93 1f       	adc	r25, r19
     a4e:	39 97       	sbiw	r30, 0x09	; 9
     a50:	40 81       	ld	r20, Z
     a52:	51 81       	ldd	r21, Z+1	; 0x01
     a54:	48 17       	cp	r20, r24
     a56:	59 07       	cpc	r21, r25
     a58:	20 f4       	brcc	.+8      	; 0xa62 <_Z7OS_Initv+0x26e>
		{
			/* error handling */
			error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	80 93 00 02 	sts	0x0200, r24
			OS_Abort();
     a60:	cf dc       	rcall	.-1634   	; 0x400 <OS_Abort>

    case TIMER_EXPIRED:
        kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
     a62:	f4 01       	movw	r30, r8
     a64:	eb 5f       	subi	r30, 0xFB	; 251
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	80 81       	ld	r24, Z
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	09 f0       	breq	.+2      	; 0xa70 <_Z7OS_Initv+0x27c>
     a6e:	b1 c0       	rjmp	.+354    	; 0xbd2 <_Z7OS_Initv+0x3de>
     a70:	33 97       	sbiw	r30, 0x03	; 3
     a72:	80 81       	ld	r24, Z
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	09 f0       	breq	.+2      	; 0xa7a <_Z7OS_Initv+0x286>
     a78:	ac c0       	rjmp	.+344    	; 0xbd2 <_Z7OS_Initv+0x3de>
        {
            cur_task->state = READY;
     a7a:	60 82       	st	Z, r6
            enqueue(&rr_queue, cur_task);
     a7c:	b4 01       	movw	r22, r8
     a7e:	c7 01       	movw	r24, r14
     a80:	97 dd       	rcall	.-1234   	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
     a82:	a7 c0       	rjmp	.+334    	; 0xbd2 <_Z7OS_Initv+0x3de>
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
     a84:	26 de       	rcall	.-948    	; 0x6d2 <_ZL18kernel_create_taskv>
     a86:	90 93 1d 02 	sts	0x021D, r25
     a8a:	80 93 1c 02 	sts	0x021C, r24

        /* Check if new task has higher priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
     a8e:	80 91 1c 02 	lds	r24, 0x021C
     a92:	90 91 1d 02 	lds	r25, 0x021D
     a96:	89 2b       	or	r24, r25
     a98:	09 f4       	brne	.+2      	; 0xa9c <_Z7OS_Initv+0x2a8>
     a9a:	9b c0       	rjmp	.+310    	; 0xbd2 <_Z7OS_Initv+0x3de>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
     a9c:	f6 01       	movw	r30, r12
     a9e:	80 81       	ld	r24, Z
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	59 f5       	brne	.+86     	; 0xafa <_Z7OS_Initv+0x306>
     aa4:	80 90 e9 0b 	lds	r8, 0x0BE9
     aa8:	90 90 ea 0b 	lds	r9, 0x0BEA
     aac:	f4 01       	movw	r30, r8
     aae:	eb 5f       	subi	r30, 0xFB	; 251
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	80 81       	ld	r24, Z
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	09 f0       	breq	.+2      	; 0xaba <_Z7OS_Initv+0x2c6>
     ab8:	8f c0       	rjmp	.+286    	; 0xbd8 <_Z7OS_Initv+0x3e4>
     aba:	8b c0       	rjmp	.+278    	; 0xbd2 <_Z7OS_Initv+0x3de>
            {
				cur_task->state = READY;
				if(cur_task->level == PERIODIC) {
					cur_task->ticks_running_previous += Now() - cur_task->ticks_running_no_preemp;
     abc:	57 dd       	rcall	.-1362   	; 0x56c <Now>
     abe:	f4 01       	movw	r30, r8
     ac0:	e1 5f       	subi	r30, 0xF1	; 241
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	d4 01       	movw	r26, r8
     ac6:	af 5e       	subi	r26, 0xEF	; 239
     ac8:	be 4f       	sbci	r27, 0xFE	; 254
     aca:	20 81       	ld	r18, Z
     acc:	31 81       	ldd	r19, Z+1	; 0x01
     ace:	4d 91       	ld	r20, X+
     ad0:	5c 91       	ld	r21, X
     ad2:	11 97       	sbiw	r26, 0x01	; 1
     ad4:	24 1b       	sub	r18, r20
     ad6:	35 0b       	sbc	r19, r21
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	91 83       	std	Z+1, r25	; 0x01
     ade:	80 83       	st	Z, r24
					cur_task->last -= cur_task->period;
     ae0:	33 97       	sbiw	r30, 0x03	; 3
     ae2:	1b 97       	sbiw	r26, 0x0b	; 11
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	82 1b       	sub	r24, r18
     aee:	93 0b       	sbc	r25, r19
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	80 83       	st	Z, r24
					enqueue(&periodic_queue, cur_task);
     af4:	b4 01       	movw	r22, r8
     af6:	c8 01       	movw	r24, r16
     af8:	5b dd       	rcall	.-1354   	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
				} 
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
     afa:	60 91 e9 0b 	lds	r22, 0x0BE9
     afe:	70 91 ea 0b 	lds	r23, 0x0BEA
     b02:	fb 01       	movw	r30, r22
     b04:	eb 5f       	subi	r30, 0xFB	; 251
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	80 81       	ld	r24, Z
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	09 f0       	breq	.+2      	; 0xb10 <_Z7OS_Initv+0x31c>
     b0e:	61 c0       	rjmp	.+194    	; 0xbd2 <_Z7OS_Initv+0x3de>
               kernel_request_create_args.level == PERIODIC)
     b10:	f6 01       	movw	r30, r12
     b12:	80 81       	ld	r24, Z
					enqueue(&periodic_queue, cur_task);
				} 
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	09 f0       	breq	.+2      	; 0xb1a <_Z7OS_Initv+0x326>
     b18:	6d c0       	rjmp	.+218    	; 0xbf4 <_Z7OS_Initv+0x400>
     b1a:	68 c0       	rjmp	.+208    	; 0xbec <_Z7OS_Initv+0x3f8>
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
            {
                enqueue(&rr_queue, cur_task);
     b1c:	c7 01       	movw	r24, r14
     b1e:	48 dd       	rcall	.-1392   	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
     b20:	58 c0       	rjmp	.+176    	; 0xbd2 <_Z7OS_Initv+0x3de>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
     b22:	60 91 e9 0b 	lds	r22, 0x0BE9
     b26:	70 91 ea 0b 	lds	r23, 0x0BEA
     b2a:	fa e0       	ldi	r31, 0x0A	; 10
     b2c:	62 3d       	cpi	r22, 0xD2	; 210
     b2e:	7f 07       	cpc	r23, r31
     b30:	09 f4       	brne	.+2      	; 0xb34 <_Z7OS_Initv+0x340>
     b32:	4f c0       	rjmp	.+158    	; 0xbd2 <_Z7OS_Initv+0x3de>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
     b34:	fb 01       	movw	r30, r22
     b36:	ee 5f       	subi	r30, 0xFE	; 254
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	10 82       	st	Z, r1
    enqueue(&dead_pool_queue, cur_task);
     b3c:	88 e1       	ldi	r24, 0x18	; 24
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	37 dd       	rcall	.-1426   	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
     b42:	47 c0       	rjmp	.+142    	; 0xbd2 <_Z7OS_Initv+0x3de>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
     b44:	80 90 e9 0b 	lds	r8, 0x0BE9
     b48:	90 90 ea 0b 	lds	r9, 0x0BEA
     b4c:	f4 01       	movw	r30, r8
     b4e:	eb 5f       	subi	r30, 0xFB	; 251
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	80 81       	ld	r24, Z
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	49 f0       	breq	.+18     	; 0xb6a <_Z7OS_Initv+0x376>
     b58:	83 30       	cpi	r24, 0x03	; 3
     b5a:	19 f0       	breq	.+6      	; 0xb62 <_Z7OS_Initv+0x36e>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	81 f5       	brne	.+96     	; 0xbc0 <_Z7OS_Initv+0x3cc>
     b60:	2c c0       	rjmp	.+88     	; 0xbba <_Z7OS_Initv+0x3c6>
		{
	    case SYSTEM:
	        enqueue(&system_queue, cur_task);
     b62:	b4 01       	movw	r22, r8
     b64:	ce 01       	movw	r24, r28
     b66:	24 dd       	rcall	.-1464   	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
     b68:	2b c0       	rjmp	.+86     	; 0xbc0 <_Z7OS_Initv+0x3cc>
			break;

	    case PERIODIC:
			if(((Now() - cur_task->ticks_running_no_preemp) + cur_task->ticks_running_previous) > cur_task->wcet)
     b6a:	00 dd       	rcall	.-1536   	; 0x56c <Now>
     b6c:	f4 01       	movw	r30, r8
     b6e:	e1 5f       	subi	r30, 0xF1	; 241
     b70:	fe 4f       	sbci	r31, 0xFE	; 254
     b72:	20 81       	ld	r18, Z
     b74:	31 81       	ldd	r19, Z+1	; 0x01
     b76:	32 96       	adiw	r30, 0x02	; 2
     b78:	40 81       	ld	r20, Z
     b7a:	51 81       	ldd	r21, Z+1	; 0x01
     b7c:	24 1b       	sub	r18, r20
     b7e:	35 0b       	sbc	r19, r21
     b80:	82 0f       	add	r24, r18
     b82:	93 1f       	adc	r25, r19
     b84:	39 97       	sbiw	r30, 0x09	; 9
     b86:	40 81       	ld	r20, Z
     b88:	51 81       	ldd	r21, Z+1	; 0x01
     b8a:	48 17       	cp	r20, r24
     b8c:	59 07       	cpc	r21, r25
     b8e:	20 f4       	brcc	.+8      	; 0xb98 <_Z7OS_Initv+0x3a4>
			{
				/* error handling */
				error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	80 93 00 02 	sts	0x0200, r24
				OS_Abort();
     b96:	34 dc       	rcall	.-1944   	; 0x400 <OS_Abort>
			} else {
				cur_task->ticks_running_previous = (uint16_t) 0;
     b98:	f4 01       	movw	r30, r8
     b9a:	e1 5f       	subi	r30, 0xF1	; 241
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	11 82       	std	Z+1, r1	; 0x01
     ba0:	10 82       	st	Z, r1
			}
		
			if (!cur_task->ran_once)
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	80 81       	ld	r24, Z
     ba6:	81 11       	cpse	r24, r1
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <_Z7OS_Initv+0x3be>
			{
				cur_task->ran_once = true;
     baa:	70 82       	st	Z, r7
				cur_task->offset = (uint16_t) 0;
     bac:	34 97       	sbiw	r30, 0x04	; 4
     bae:	11 82       	std	Z+1, r1	; 0x01
     bb0:	10 82       	st	Z, r1
			}
			
	        enqueue(&periodic_queue, cur_task);
     bb2:	b4 01       	movw	r22, r8
     bb4:	c8 01       	movw	r24, r16
     bb6:	fc dc       	rcall	.-1544   	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <_Z7OS_Initv+0x3cc>
	        break;

	    case RR:
	        enqueue(&rr_queue, cur_task);
     bba:	b4 01       	movw	r22, r8
     bbc:	c7 01       	movw	r24, r14
     bbe:	f8 dc       	rcall	.-1552   	; 0x5b0 <_ZL7enqueueP7queue_tP9td_struct>

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
     bc0:	f4 01       	movw	r30, r8
     bc2:	ee 5f       	subi	r30, 0xFE	; 254
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	60 82       	st	Z, r6
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <_Z7OS_Initv+0x3de>
        /* Should not happen. Handled in task itself. */
        break;
		
    default:
        /* Should never happen */
        error_msg = ERR_RUN_5_RTOS_INTERNAL_ERROR;
     bca:	85 e0       	ldi	r24, 0x05	; 5
     bcc:	80 93 00 02 	sts	0x0200, r24
        OS_Abort();
     bd0:	17 dc       	rcall	.-2002   	; 0x400 <OS_Abort>
        break;
    }

    kernel_request = NONE;
     bd2:	10 92 29 02 	sts	0x0229, r1
     bd6:	7e ce       	rjmp	.-772    	; 0x8d4 <_Z7OS_Initv+0xe0>
        if(kernel_request_retval)
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
            {
				cur_task->state = READY;
     bd8:	f4 01       	movw	r30, r8
     bda:	ee 5f       	subi	r30, 0xFE	; 254
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	60 82       	st	Z, r6
				if(cur_task->level == PERIODIC) {
     be0:	33 96       	adiw	r30, 0x03	; 3
     be2:	80 81       	ld	r24, Z
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	09 f0       	breq	.+2      	; 0xbea <_Z7OS_Initv+0x3f6>
     be8:	88 cf       	rjmp	.-240    	; 0xafa <_Z7OS_Initv+0x306>
     bea:	68 cf       	rjmp	.-304    	; 0xabc <_Z7OS_Initv+0x2c8>

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
               kernel_request_create_args.level == PERIODIC)
            {
                cur_task->state = READY;
     bec:	fb 01       	movw	r30, r22
     bee:	ee 5f       	subi	r30, 0xFE	; 254
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	60 82       	st	Z, r6
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
     bf4:	fb 01       	movw	r30, r22
     bf6:	ee 5f       	subi	r30, 0xFE	; 254
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	49 f7       	brne	.-46     	; 0xbd2 <_Z7OS_Initv+0x3de>
     c00:	8d cf       	rjmp	.-230    	; 0xb1c <_Z7OS_Initv+0x328>

00000c02 <main>:
/**
 * Runtime entry point into the program; just start the RTOS.  The application layer must define r_main() for its entry point.
 */
int main()
{
	OS_Init();
     c02:	f8 dd       	rcall	.-1040   	; 0x7f4 <_Z7OS_Initv>

00000c04 <_Z11print_tracev>:
/**
 * Dump the entire trace array on UART
 * 
 */
void print_trace()
{
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
    int returned_chars;
    
// 	if (!trace_printed)
// 	{
        /* the test header */
        returned_chars = sprintf((char*)&trace_buffer, "T%03d;", trace_number);
     c14:	80 91 10 0e 	lds	r24, 0x0E10
     c18:	1f 92       	push	r1
     c1a:	8f 93       	push	r24
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	9f 93       	push	r25
     c22:	8f 93       	push	r24
     c24:	8d ee       	ldi	r24, 0xED	; 237
     c26:	9b e0       	ldi	r25, 0x0B	; 11
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	0a d1       	rcall	.+532    	; 0xe42 <sprintf>
        uart_write((uint8_t*)trace_buffer, returned_chars);    
     c2e:	bc 01       	movw	r22, r24
     c30:	8d ee       	ldi	r24, 0xED	; 237
     c32:	9b e0       	ldi	r25, 0x0B	; 11
     c34:	7d d0       	rcall	.+250    	; 0xd30 <_Z10uart_writePhi>

        /* all traces as 5 digit padded decimals 
        for(i = 0; i < TRACE_ARRAY_SIZE; i++)*/
		for(i = 0; i < (int)trace_counter; i++)
     c36:	80 91 0d 0c 	lds	r24, 0x0C0D
     c3a:	90 91 0e 0c 	lds	r25, 0x0C0E
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	18 16       	cp	r1, r24
     c4c:	19 06       	cpc	r1, r25
     c4e:	4c f5       	brge	.+82     	; 0xca2 <_Z11print_tracev+0x9e>
     c50:	cf e0       	ldi	r28, 0x0F	; 15
     c52:	dc e0       	ldi	r29, 0x0C	; 12
     c54:	e1 2c       	mov	r14, r1
     c56:	f1 2c       	mov	r15, r1
        {
            returned_chars = sprintf((char*)&trace_buffer, "%u;", trace_array[i]);
     c58:	0f 2e       	mov	r0, r31
     c5a:	f8 e0       	ldi	r31, 0x08	; 8
     c5c:	cf 2e       	mov	r12, r31
     c5e:	f2 e0       	ldi	r31, 0x02	; 2
     c60:	df 2e       	mov	r13, r31
     c62:	f0 2d       	mov	r31, r0
     c64:	0d ee       	ldi	r16, 0xED	; 237
     c66:	1b e0       	ldi	r17, 0x0B	; 11
     c68:	88 81       	ld	r24, Y
     c6a:	99 81       	ldd	r25, Y+1	; 0x01
     c6c:	22 96       	adiw	r28, 0x02	; 2
     c6e:	9f 93       	push	r25
     c70:	8f 93       	push	r24
     c72:	df 92       	push	r13
     c74:	cf 92       	push	r12
     c76:	1f 93       	push	r17
     c78:	0f 93       	push	r16
     c7a:	e3 d0       	rcall	.+454    	; 0xe42 <sprintf>
            uart_write((uint8_t*)trace_buffer, returned_chars);
     c7c:	bc 01       	movw	r22, r24
     c7e:	c8 01       	movw	r24, r16
     c80:	57 d0       	rcall	.+174    	; 0xd30 <_Z10uart_writePhi>
        returned_chars = sprintf((char*)&trace_buffer, "T%03d;", trace_number);
        uart_write((uint8_t*)trace_buffer, returned_chars);    

        /* all traces as 5 digit padded decimals 
        for(i = 0; i < TRACE_ARRAY_SIZE; i++)*/
		for(i = 0; i < (int)trace_counter; i++)
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	e8 1a       	sub	r14, r24
     c86:	f8 0a       	sbc	r15, r24
     c88:	80 91 0d 0c 	lds	r24, 0x0C0D
     c8c:	90 91 0e 0c 	lds	r25, 0x0C0E
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	e8 16       	cp	r14, r24
     c9e:	f9 06       	cpc	r15, r25
     ca0:	1c f3       	brlt	.-58     	; 0xc68 <_Z11print_tracev+0x64>
            returned_chars = sprintf((char*)&trace_buffer, "%u;", trace_array[i]);
            uart_write((uint8_t*)trace_buffer, returned_chars);
            //_delay_ms(1);
        }

        trace_printed = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 93 0f 0e 	sts	0x0E0F, r24
        trace_counter = 0;
     ca8:	10 92 0e 0c 	sts	0x0C0E, r1
     cac:	10 92 0d 0c 	sts	0x0C0D, r1
//    }
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	08 95       	ret

00000cc2 <_Z12add_to_tracej>:
 * 
 * @param number unsigned integer to add
 */
void add_to_trace(uint16_t number)
{
    if (trace_counter < TRACE_ARRAY_SIZE)
     cc2:	20 91 0d 0c 	lds	r18, 0x0C0D
     cc6:	30 91 0e 0c 	lds	r19, 0x0C0E
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	09 f0       	breq	.+2      	; 0xcd2 <_Z12add_to_tracej+0x10>
     cd0:	98 f4       	brcc	.+38     	; 0xcf8 <_Z12add_to_tracej+0x36>
    {
        trace_array[trace_counter] = number;
     cd2:	e0 91 0d 0c 	lds	r30, 0x0C0D
     cd6:	f0 91 0e 0c 	lds	r31, 0x0C0E
     cda:	ee 0f       	add	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	e1 5f       	subi	r30, 0xF1	; 241
     ce0:	f3 4f       	sbci	r31, 0xF3	; 243
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	80 83       	st	Z, r24
        trace_counter++;
     ce6:	80 91 0d 0c 	lds	r24, 0x0C0D
     cea:	90 91 0e 0c 	lds	r25, 0x0C0E
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	90 93 0e 0c 	sts	0x0C0E, r25
     cf4:	80 93 0d 0c 	sts	0x0C0D, r24
     cf8:	08 95       	ret

00000cfa <_Z14set_trace_testh>:
 * 
 * @param number 
 */
void set_trace_test(uint8_t number)
{
    trace_number = number;
     cfa:	80 93 10 0e 	sts	0x0E10, r24
     cfe:	08 95       	ret

00000d00 <_Z12uart_putcharc>:
	return rxn;
}

void uart_reset_recv(void)
{
	rxn = 0;
     d00:	f8 94       	cli
     d02:	e0 ec       	ldi	r30, 0xC0	; 192
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	90 81       	ld	r25, Z
     d08:	95 ff       	sbrs	r25, 5
     d0a:	fd cf       	rjmp	.-6      	; 0xd06 <_Z12uart_putcharc+0x6>
     d0c:	80 93 c6 00 	sts	0x00C6, r24
     d10:	78 94       	sei
     d12:	08 95       	ret

00000d14 <_Z11uart_putstrPc>:
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ec 01       	movw	r28, r24
     d1a:	88 81       	ld	r24, Y
     d1c:	88 23       	and	r24, r24
     d1e:	29 f0       	breq	.+10     	; 0xd2a <_Z11uart_putstrPc+0x16>
     d20:	21 96       	adiw	r28, 0x01	; 1
     d22:	ee df       	rcall	.-36     	; 0xd00 <_Z12uart_putcharc>
     d24:	89 91       	ld	r24, Y+
     d26:	81 11       	cpse	r24, r1
     d28:	fc cf       	rjmp	.-8      	; 0xd22 <_Z11uart_putstrPc+0xe>
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <_Z10uart_writePhi>:
     d30:	f1 df       	rcall	.-30     	; 0xd14 <_Z11uart_putstrPc>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	08 95       	ret

00000d38 <_Z9uart_initv>:
     d38:	10 92 77 0e 	sts	0x0E77, r1
     d3c:	10 92 76 0e 	sts	0x0E76, r1
     d40:	10 92 11 0e 	sts	0x0E11, r1
     d44:	10 92 c5 00 	sts	0x00C5, r1
     d48:	87 e6       	ldi	r24, 0x67	; 103
     d4a:	80 93 c4 00 	sts	0x00C4, r24
     d4e:	88 e9       	ldi	r24, 0x98	; 152
     d50:	80 93 c1 00 	sts	0x00C1, r24
     d54:	8e e0       	ldi	r24, 0x0E	; 14
     d56:	80 93 c2 00 	sts	0x00C2, r24
     d5a:	08 95       	ret

00000d5c <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	0b b6       	in	r0, 0x3b	; 59
     d68:	0f 92       	push	r0
     d6a:	5f 93       	push	r21
     d6c:	6f 93       	push	r22
     d6e:	7f 93       	push	r23
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	af 93       	push	r26
     d76:	bf 93       	push	r27
     d78:	ef 93       	push	r30
     d7a:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
     d7c:	e0 ec       	ldi	r30, 0xC0	; 192
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 23       	and	r24, r24
     d84:	ec f7       	brge	.-6      	; 0xd80 <__vector_25+0x24>

	//PORTB ^= _BV(PB7);

	rx[rxn] = UDR0;
     d86:	e0 91 76 0e 	lds	r30, 0x0E76
     d8a:	f0 91 77 0e 	lds	r31, 0x0E77
     d8e:	80 91 c6 00 	lds	r24, 0x00C6
     d92:	ee 5e       	subi	r30, 0xEE	; 238
     d94:	f1 4f       	sbci	r31, 0xF1	; 241
     d96:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
     d98:	80 91 76 0e 	lds	r24, 0x0E76
     d9c:	90 91 77 0e 	lds	r25, 0x0E77
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	64 e6       	ldi	r22, 0x64	; 100
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	17 d0       	rcall	.+46     	; 0xdd6 <__divmodhi4>
     da8:	90 93 77 0e 	sts	0x0E77, r25
     dac:	80 93 76 0e 	sts	0x0E76, r24
	uart_rx = 1; // notify main of receipt of data.
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 11 0e 	sts	0x0E11, r24
	//PORTB = PORTB | _BV(PINB1);
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	0f 90       	pop	r0
     dca:	0b be       	out	0x3b, r0	; 59
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__divmodhi4>:
     dd6:	97 fb       	bst	r25, 7
     dd8:	07 2e       	mov	r0, r23
     dda:	16 f4       	brtc	.+4      	; 0xde0 <__divmodhi4+0xa>
     ddc:	00 94       	com	r0
     dde:	06 d0       	rcall	.+12     	; 0xdec <__divmodhi4_neg1>
     de0:	77 fd       	sbrc	r23, 7
     de2:	08 d0       	rcall	.+16     	; 0xdf4 <__divmodhi4_neg2>
     de4:	1a d0       	rcall	.+52     	; 0xe1a <__udivmodhi4>
     de6:	07 fc       	sbrc	r0, 7
     de8:	05 d0       	rcall	.+10     	; 0xdf4 <__divmodhi4_neg2>
     dea:	3e f4       	brtc	.+14     	; 0xdfa <__divmodhi4_exit>

00000dec <__divmodhi4_neg1>:
     dec:	90 95       	com	r25
     dee:	81 95       	neg	r24
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	08 95       	ret

00000df4 <__divmodhi4_neg2>:
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255

00000dfa <__divmodhi4_exit>:
     dfa:	08 95       	ret

00000dfc <__umulhisi3>:
     dfc:	a2 9f       	mul	r26, r18
     dfe:	b0 01       	movw	r22, r0
     e00:	b3 9f       	mul	r27, r19
     e02:	c0 01       	movw	r24, r0
     e04:	a3 9f       	mul	r26, r19
     e06:	70 0d       	add	r23, r0
     e08:	81 1d       	adc	r24, r1
     e0a:	11 24       	eor	r1, r1
     e0c:	91 1d       	adc	r25, r1
     e0e:	b2 9f       	mul	r27, r18
     e10:	70 0d       	add	r23, r0
     e12:	81 1d       	adc	r24, r1
     e14:	11 24       	eor	r1, r1
     e16:	91 1d       	adc	r25, r1
     e18:	08 95       	ret

00000e1a <__udivmodhi4>:
     e1a:	aa 1b       	sub	r26, r26
     e1c:	bb 1b       	sub	r27, r27
     e1e:	51 e1       	ldi	r21, 0x11	; 17
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <__udivmodhi4_ep>

00000e22 <__udivmodhi4_loop>:
     e22:	aa 1f       	adc	r26, r26
     e24:	bb 1f       	adc	r27, r27
     e26:	a6 17       	cp	r26, r22
     e28:	b7 07       	cpc	r27, r23
     e2a:	10 f0       	brcs	.+4      	; 0xe30 <__udivmodhi4_ep>
     e2c:	a6 1b       	sub	r26, r22
     e2e:	b7 0b       	sbc	r27, r23

00000e30 <__udivmodhi4_ep>:
     e30:	88 1f       	adc	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	5a 95       	dec	r21
     e36:	a9 f7       	brne	.-22     	; 0xe22 <__udivmodhi4_loop>
     e38:	80 95       	com	r24
     e3a:	90 95       	com	r25
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	08 95       	ret

00000e42 <sprintf>:
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	2e 97       	sbiw	r28, 0x0e	; 14
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	0e 89       	ldd	r16, Y+22	; 0x16
     e5c:	1f 89       	ldd	r17, Y+23	; 0x17
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	8c 83       	std	Y+4, r24	; 0x04
     e62:	1a 83       	std	Y+2, r17	; 0x02
     e64:	09 83       	std	Y+1, r16	; 0x01
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f e7       	ldi	r25, 0x7F	; 127
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	ae 01       	movw	r20, r28
     e70:	46 5e       	subi	r20, 0xE6	; 230
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	68 8d       	ldd	r22, Y+24	; 0x18
     e76:	79 8d       	ldd	r23, Y+25	; 0x19
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	10 d0       	rcall	.+32     	; 0xe9e <vfprintf>
     e7e:	ef 81       	ldd	r30, Y+7	; 0x07
     e80:	f8 85       	ldd	r31, Y+8	; 0x08
     e82:	e0 0f       	add	r30, r16
     e84:	f1 1f       	adc	r31, r17
     e86:	10 82       	st	Z, r1
     e88:	2e 96       	adiw	r28, 0x0e	; 14
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <vfprintf>:
     e9e:	2f 92       	push	r2
     ea0:	3f 92       	push	r3
     ea2:	4f 92       	push	r4
     ea4:	5f 92       	push	r5
     ea6:	6f 92       	push	r6
     ea8:	7f 92       	push	r7
     eaa:	8f 92       	push	r8
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	2c 97       	sbiw	r28, 0x0c	; 12
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	7c 01       	movw	r14, r24
     ed4:	6b 01       	movw	r12, r22
     ed6:	8a 01       	movw	r16, r20
     ed8:	fc 01       	movw	r30, r24
     eda:	17 82       	std	Z+7, r1	; 0x07
     edc:	16 82       	std	Z+6, r1	; 0x06
     ede:	83 81       	ldd	r24, Z+3	; 0x03
     ee0:	81 ff       	sbrs	r24, 1
     ee2:	b0 c1       	rjmp	.+864    	; 0x1244 <vfprintf+0x3a6>
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	4c 01       	movw	r8, r24
     eea:	f7 01       	movw	r30, r14
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	f6 01       	movw	r30, r12
     ef0:	93 fd       	sbrc	r25, 3
     ef2:	85 91       	lpm	r24, Z+
     ef4:	93 ff       	sbrs	r25, 3
     ef6:	81 91       	ld	r24, Z+
     ef8:	6f 01       	movw	r12, r30
     efa:	88 23       	and	r24, r24
     efc:	09 f4       	brne	.+2      	; 0xf00 <vfprintf+0x62>
     efe:	9e c1       	rjmp	.+828    	; 0x123c <vfprintf+0x39e>
     f00:	85 32       	cpi	r24, 0x25	; 37
     f02:	39 f4       	brne	.+14     	; 0xf12 <vfprintf+0x74>
     f04:	93 fd       	sbrc	r25, 3
     f06:	85 91       	lpm	r24, Z+
     f08:	93 ff       	sbrs	r25, 3
     f0a:	81 91       	ld	r24, Z+
     f0c:	6f 01       	movw	r12, r30
     f0e:	85 32       	cpi	r24, 0x25	; 37
     f10:	21 f4       	brne	.+8      	; 0xf1a <vfprintf+0x7c>
     f12:	b7 01       	movw	r22, r14
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	c7 d1       	rcall	.+910    	; 0x12a6 <fputc>
     f18:	e8 cf       	rjmp	.-48     	; 0xeea <vfprintf+0x4c>
     f1a:	51 2c       	mov	r5, r1
     f1c:	31 2c       	mov	r3, r1
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	20 32       	cpi	r18, 0x20	; 32
     f22:	a0 f4       	brcc	.+40     	; 0xf4c <vfprintf+0xae>
     f24:	8b 32       	cpi	r24, 0x2B	; 43
     f26:	69 f0       	breq	.+26     	; 0xf42 <vfprintf+0xa4>
     f28:	30 f4       	brcc	.+12     	; 0xf36 <vfprintf+0x98>
     f2a:	80 32       	cpi	r24, 0x20	; 32
     f2c:	59 f0       	breq	.+22     	; 0xf44 <vfprintf+0xa6>
     f2e:	83 32       	cpi	r24, 0x23	; 35
     f30:	69 f4       	brne	.+26     	; 0xf4c <vfprintf+0xae>
     f32:	20 61       	ori	r18, 0x10	; 16
     f34:	2c c0       	rjmp	.+88     	; 0xf8e <vfprintf+0xf0>
     f36:	8d 32       	cpi	r24, 0x2D	; 45
     f38:	39 f0       	breq	.+14     	; 0xf48 <vfprintf+0xaa>
     f3a:	80 33       	cpi	r24, 0x30	; 48
     f3c:	39 f4       	brne	.+14     	; 0xf4c <vfprintf+0xae>
     f3e:	21 60       	ori	r18, 0x01	; 1
     f40:	26 c0       	rjmp	.+76     	; 0xf8e <vfprintf+0xf0>
     f42:	22 60       	ori	r18, 0x02	; 2
     f44:	24 60       	ori	r18, 0x04	; 4
     f46:	23 c0       	rjmp	.+70     	; 0xf8e <vfprintf+0xf0>
     f48:	28 60       	ori	r18, 0x08	; 8
     f4a:	21 c0       	rjmp	.+66     	; 0xf8e <vfprintf+0xf0>
     f4c:	27 fd       	sbrc	r18, 7
     f4e:	27 c0       	rjmp	.+78     	; 0xf9e <vfprintf+0x100>
     f50:	30 ed       	ldi	r19, 0xD0	; 208
     f52:	38 0f       	add	r19, r24
     f54:	3a 30       	cpi	r19, 0x0A	; 10
     f56:	78 f4       	brcc	.+30     	; 0xf76 <vfprintf+0xd8>
     f58:	26 ff       	sbrs	r18, 6
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <vfprintf+0xca>
     f5c:	fa e0       	ldi	r31, 0x0A	; 10
     f5e:	5f 9e       	mul	r5, r31
     f60:	30 0d       	add	r19, r0
     f62:	11 24       	eor	r1, r1
     f64:	53 2e       	mov	r5, r19
     f66:	13 c0       	rjmp	.+38     	; 0xf8e <vfprintf+0xf0>
     f68:	8a e0       	ldi	r24, 0x0A	; 10
     f6a:	38 9e       	mul	r3, r24
     f6c:	30 0d       	add	r19, r0
     f6e:	11 24       	eor	r1, r1
     f70:	33 2e       	mov	r3, r19
     f72:	20 62       	ori	r18, 0x20	; 32
     f74:	0c c0       	rjmp	.+24     	; 0xf8e <vfprintf+0xf0>
     f76:	8e 32       	cpi	r24, 0x2E	; 46
     f78:	21 f4       	brne	.+8      	; 0xf82 <vfprintf+0xe4>
     f7a:	26 fd       	sbrc	r18, 6
     f7c:	5f c1       	rjmp	.+702    	; 0x123c <vfprintf+0x39e>
     f7e:	20 64       	ori	r18, 0x40	; 64
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <vfprintf+0xf0>
     f82:	8c 36       	cpi	r24, 0x6C	; 108
     f84:	11 f4       	brne	.+4      	; 0xf8a <vfprintf+0xec>
     f86:	20 68       	ori	r18, 0x80	; 128
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <vfprintf+0xf0>
     f8a:	88 36       	cpi	r24, 0x68	; 104
     f8c:	41 f4       	brne	.+16     	; 0xf9e <vfprintf+0x100>
     f8e:	f6 01       	movw	r30, r12
     f90:	93 fd       	sbrc	r25, 3
     f92:	85 91       	lpm	r24, Z+
     f94:	93 ff       	sbrs	r25, 3
     f96:	81 91       	ld	r24, Z+
     f98:	6f 01       	movw	r12, r30
     f9a:	81 11       	cpse	r24, r1
     f9c:	c1 cf       	rjmp	.-126    	; 0xf20 <vfprintf+0x82>
     f9e:	98 2f       	mov	r25, r24
     fa0:	9f 7d       	andi	r25, 0xDF	; 223
     fa2:	95 54       	subi	r25, 0x45	; 69
     fa4:	93 30       	cpi	r25, 0x03	; 3
     fa6:	28 f4       	brcc	.+10     	; 0xfb2 <vfprintf+0x114>
     fa8:	0c 5f       	subi	r16, 0xFC	; 252
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	ff e3       	ldi	r31, 0x3F	; 63
     fae:	f9 83       	std	Y+1, r31	; 0x01
     fb0:	0d c0       	rjmp	.+26     	; 0xfcc <vfprintf+0x12e>
     fb2:	83 36       	cpi	r24, 0x63	; 99
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <vfprintf+0x124>
     fb6:	83 37       	cpi	r24, 0x73	; 115
     fb8:	71 f0       	breq	.+28     	; 0xfd6 <vfprintf+0x138>
     fba:	83 35       	cpi	r24, 0x53	; 83
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <vfprintf+0x122>
     fbe:	57 c0       	rjmp	.+174    	; 0x106e <vfprintf+0x1d0>
     fc0:	21 c0       	rjmp	.+66     	; 0x1004 <vfprintf+0x166>
     fc2:	f8 01       	movw	r30, r16
     fc4:	80 81       	ld	r24, Z
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	0e 5f       	subi	r16, 0xFE	; 254
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	44 24       	eor	r4, r4
     fce:	43 94       	inc	r4
     fd0:	51 2c       	mov	r5, r1
     fd2:	54 01       	movw	r10, r8
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <vfprintf+0x160>
     fd6:	38 01       	movw	r6, r16
     fd8:	f2 e0       	ldi	r31, 0x02	; 2
     fda:	6f 0e       	add	r6, r31
     fdc:	71 1c       	adc	r7, r1
     fde:	f8 01       	movw	r30, r16
     fe0:	a0 80       	ld	r10, Z
     fe2:	b1 80       	ldd	r11, Z+1	; 0x01
     fe4:	26 ff       	sbrs	r18, 6
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <vfprintf+0x150>
     fe8:	65 2d       	mov	r22, r5
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <vfprintf+0x154>
     fee:	6f ef       	ldi	r22, 0xFF	; 255
     ff0:	7f ef       	ldi	r23, 0xFF	; 255
     ff2:	c5 01       	movw	r24, r10
     ff4:	2c 87       	std	Y+12, r18	; 0x0c
     ff6:	4c d1       	rcall	.+664    	; 0x1290 <strnlen>
     ff8:	2c 01       	movw	r4, r24
     ffa:	83 01       	movw	r16, r6
     ffc:	2c 85       	ldd	r18, Y+12	; 0x0c
     ffe:	2f 77       	andi	r18, 0x7F	; 127
    1000:	22 2e       	mov	r2, r18
    1002:	16 c0       	rjmp	.+44     	; 0x1030 <vfprintf+0x192>
    1004:	38 01       	movw	r6, r16
    1006:	f2 e0       	ldi	r31, 0x02	; 2
    1008:	6f 0e       	add	r6, r31
    100a:	71 1c       	adc	r7, r1
    100c:	f8 01       	movw	r30, r16
    100e:	a0 80       	ld	r10, Z
    1010:	b1 80       	ldd	r11, Z+1	; 0x01
    1012:	26 ff       	sbrs	r18, 6
    1014:	03 c0       	rjmp	.+6      	; 0x101c <vfprintf+0x17e>
    1016:	65 2d       	mov	r22, r5
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <vfprintf+0x182>
    101c:	6f ef       	ldi	r22, 0xFF	; 255
    101e:	7f ef       	ldi	r23, 0xFF	; 255
    1020:	c5 01       	movw	r24, r10
    1022:	2c 87       	std	Y+12, r18	; 0x0c
    1024:	2a d1       	rcall	.+596    	; 0x127a <strnlen_P>
    1026:	2c 01       	movw	r4, r24
    1028:	2c 85       	ldd	r18, Y+12	; 0x0c
    102a:	20 68       	ori	r18, 0x80	; 128
    102c:	22 2e       	mov	r2, r18
    102e:	83 01       	movw	r16, r6
    1030:	23 fc       	sbrc	r2, 3
    1032:	19 c0       	rjmp	.+50     	; 0x1066 <vfprintf+0x1c8>
    1034:	83 2d       	mov	r24, r3
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	48 16       	cp	r4, r24
    103a:	59 06       	cpc	r5, r25
    103c:	a0 f4       	brcc	.+40     	; 0x1066 <vfprintf+0x1c8>
    103e:	b7 01       	movw	r22, r14
    1040:	80 e2       	ldi	r24, 0x20	; 32
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	30 d1       	rcall	.+608    	; 0x12a6 <fputc>
    1046:	3a 94       	dec	r3
    1048:	f5 cf       	rjmp	.-22     	; 0x1034 <vfprintf+0x196>
    104a:	f5 01       	movw	r30, r10
    104c:	27 fc       	sbrc	r2, 7
    104e:	85 91       	lpm	r24, Z+
    1050:	27 fe       	sbrs	r2, 7
    1052:	81 91       	ld	r24, Z+
    1054:	5f 01       	movw	r10, r30
    1056:	b7 01       	movw	r22, r14
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	25 d1       	rcall	.+586    	; 0x12a6 <fputc>
    105c:	31 10       	cpse	r3, r1
    105e:	3a 94       	dec	r3
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	4f 1a       	sub	r4, r31
    1064:	51 08       	sbc	r5, r1
    1066:	41 14       	cp	r4, r1
    1068:	51 04       	cpc	r5, r1
    106a:	79 f7       	brne	.-34     	; 0x104a <vfprintf+0x1ac>
    106c:	de c0       	rjmp	.+444    	; 0x122a <vfprintf+0x38c>
    106e:	84 36       	cpi	r24, 0x64	; 100
    1070:	11 f0       	breq	.+4      	; 0x1076 <vfprintf+0x1d8>
    1072:	89 36       	cpi	r24, 0x69	; 105
    1074:	31 f5       	brne	.+76     	; 0x10c2 <vfprintf+0x224>
    1076:	f8 01       	movw	r30, r16
    1078:	27 ff       	sbrs	r18, 7
    107a:	07 c0       	rjmp	.+14     	; 0x108a <vfprintf+0x1ec>
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	0c 5f       	subi	r16, 0xFC	; 252
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	08 c0       	rjmp	.+16     	; 0x109a <vfprintf+0x1fc>
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	88 27       	eor	r24, r24
    1090:	77 fd       	sbrc	r23, 7
    1092:	80 95       	com	r24
    1094:	98 2f       	mov	r25, r24
    1096:	0e 5f       	subi	r16, 0xFE	; 254
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
    109a:	2f 76       	andi	r18, 0x6F	; 111
    109c:	b2 2e       	mov	r11, r18
    109e:	97 ff       	sbrs	r25, 7
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <vfprintf+0x216>
    10a2:	90 95       	com	r25
    10a4:	80 95       	com	r24
    10a6:	70 95       	com	r23
    10a8:	61 95       	neg	r22
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	20 68       	ori	r18, 0x80	; 128
    10b2:	b2 2e       	mov	r11, r18
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	a4 01       	movw	r20, r8
    10ba:	27 d1       	rcall	.+590    	; 0x130a <__ultoa_invert>
    10bc:	a8 2e       	mov	r10, r24
    10be:	a8 18       	sub	r10, r8
    10c0:	43 c0       	rjmp	.+134    	; 0x1148 <vfprintf+0x2aa>
    10c2:	85 37       	cpi	r24, 0x75	; 117
    10c4:	29 f4       	brne	.+10     	; 0x10d0 <vfprintf+0x232>
    10c6:	2f 7e       	andi	r18, 0xEF	; 239
    10c8:	b2 2e       	mov	r11, r18
    10ca:	2a e0       	ldi	r18, 0x0A	; 10
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	25 c0       	rjmp	.+74     	; 0x111a <vfprintf+0x27c>
    10d0:	f2 2f       	mov	r31, r18
    10d2:	f9 7f       	andi	r31, 0xF9	; 249
    10d4:	bf 2e       	mov	r11, r31
    10d6:	8f 36       	cpi	r24, 0x6F	; 111
    10d8:	c1 f0       	breq	.+48     	; 0x110a <vfprintf+0x26c>
    10da:	18 f4       	brcc	.+6      	; 0x10e2 <vfprintf+0x244>
    10dc:	88 35       	cpi	r24, 0x58	; 88
    10de:	79 f0       	breq	.+30     	; 0x10fe <vfprintf+0x260>
    10e0:	ad c0       	rjmp	.+346    	; 0x123c <vfprintf+0x39e>
    10e2:	80 37       	cpi	r24, 0x70	; 112
    10e4:	19 f0       	breq	.+6      	; 0x10ec <vfprintf+0x24e>
    10e6:	88 37       	cpi	r24, 0x78	; 120
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <vfprintf+0x254>
    10ea:	a8 c0       	rjmp	.+336    	; 0x123c <vfprintf+0x39e>
    10ec:	2f 2f       	mov	r18, r31
    10ee:	20 61       	ori	r18, 0x10	; 16
    10f0:	b2 2e       	mov	r11, r18
    10f2:	b4 fe       	sbrs	r11, 4
    10f4:	0d c0       	rjmp	.+26     	; 0x1110 <vfprintf+0x272>
    10f6:	8b 2d       	mov	r24, r11
    10f8:	84 60       	ori	r24, 0x04	; 4
    10fa:	b8 2e       	mov	r11, r24
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <vfprintf+0x272>
    10fe:	24 ff       	sbrs	r18, 4
    1100:	0a c0       	rjmp	.+20     	; 0x1116 <vfprintf+0x278>
    1102:	9f 2f       	mov	r25, r31
    1104:	96 60       	ori	r25, 0x06	; 6
    1106:	b9 2e       	mov	r11, r25
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0x278>
    110a:	28 e0       	ldi	r18, 0x08	; 8
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	05 c0       	rjmp	.+10     	; 0x111a <vfprintf+0x27c>
    1110:	20 e1       	ldi	r18, 0x10	; 16
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x27c>
    1116:	20 e1       	ldi	r18, 0x10	; 16
    1118:	32 e0       	ldi	r19, 0x02	; 2
    111a:	f8 01       	movw	r30, r16
    111c:	b7 fe       	sbrs	r11, 7
    111e:	07 c0       	rjmp	.+14     	; 0x112e <vfprintf+0x290>
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	0c 5f       	subi	r16, 0xFC	; 252
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	06 c0       	rjmp	.+12     	; 0x113a <vfprintf+0x29c>
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 5f       	subi	r16, 0xFE	; 254
    1138:	1f 4f       	sbci	r17, 0xFF	; 255
    113a:	a4 01       	movw	r20, r8
    113c:	e6 d0       	rcall	.+460    	; 0x130a <__ultoa_invert>
    113e:	a8 2e       	mov	r10, r24
    1140:	a8 18       	sub	r10, r8
    1142:	fb 2d       	mov	r31, r11
    1144:	ff 77       	andi	r31, 0x7F	; 127
    1146:	bf 2e       	mov	r11, r31
    1148:	b6 fe       	sbrs	r11, 6
    114a:	0b c0       	rjmp	.+22     	; 0x1162 <vfprintf+0x2c4>
    114c:	2b 2d       	mov	r18, r11
    114e:	2e 7f       	andi	r18, 0xFE	; 254
    1150:	a5 14       	cp	r10, r5
    1152:	50 f4       	brcc	.+20     	; 0x1168 <vfprintf+0x2ca>
    1154:	b4 fe       	sbrs	r11, 4
    1156:	0a c0       	rjmp	.+20     	; 0x116c <vfprintf+0x2ce>
    1158:	b2 fc       	sbrc	r11, 2
    115a:	08 c0       	rjmp	.+16     	; 0x116c <vfprintf+0x2ce>
    115c:	2b 2d       	mov	r18, r11
    115e:	2e 7e       	andi	r18, 0xEE	; 238
    1160:	05 c0       	rjmp	.+10     	; 0x116c <vfprintf+0x2ce>
    1162:	7a 2c       	mov	r7, r10
    1164:	2b 2d       	mov	r18, r11
    1166:	03 c0       	rjmp	.+6      	; 0x116e <vfprintf+0x2d0>
    1168:	7a 2c       	mov	r7, r10
    116a:	01 c0       	rjmp	.+2      	; 0x116e <vfprintf+0x2d0>
    116c:	75 2c       	mov	r7, r5
    116e:	24 ff       	sbrs	r18, 4
    1170:	0d c0       	rjmp	.+26     	; 0x118c <vfprintf+0x2ee>
    1172:	fe 01       	movw	r30, r28
    1174:	ea 0d       	add	r30, r10
    1176:	f1 1d       	adc	r31, r1
    1178:	80 81       	ld	r24, Z
    117a:	80 33       	cpi	r24, 0x30	; 48
    117c:	11 f4       	brne	.+4      	; 0x1182 <vfprintf+0x2e4>
    117e:	29 7e       	andi	r18, 0xE9	; 233
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <vfprintf+0x2f6>
    1182:	22 ff       	sbrs	r18, 2
    1184:	06 c0       	rjmp	.+12     	; 0x1192 <vfprintf+0x2f4>
    1186:	73 94       	inc	r7
    1188:	73 94       	inc	r7
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <vfprintf+0x2f6>
    118c:	82 2f       	mov	r24, r18
    118e:	86 78       	andi	r24, 0x86	; 134
    1190:	09 f0       	breq	.+2      	; 0x1194 <vfprintf+0x2f6>
    1192:	73 94       	inc	r7
    1194:	23 fd       	sbrc	r18, 3
    1196:	12 c0       	rjmp	.+36     	; 0x11bc <vfprintf+0x31e>
    1198:	20 ff       	sbrs	r18, 0
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <vfprintf+0x30a>
    119c:	5a 2c       	mov	r5, r10
    119e:	73 14       	cp	r7, r3
    11a0:	18 f4       	brcc	.+6      	; 0x11a8 <vfprintf+0x30a>
    11a2:	53 0c       	add	r5, r3
    11a4:	57 18       	sub	r5, r7
    11a6:	73 2c       	mov	r7, r3
    11a8:	73 14       	cp	r7, r3
    11aa:	60 f4       	brcc	.+24     	; 0x11c4 <vfprintf+0x326>
    11ac:	b7 01       	movw	r22, r14
    11ae:	80 e2       	ldi	r24, 0x20	; 32
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	2c 87       	std	Y+12, r18	; 0x0c
    11b4:	78 d0       	rcall	.+240    	; 0x12a6 <fputc>
    11b6:	73 94       	inc	r7
    11b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ba:	f6 cf       	rjmp	.-20     	; 0x11a8 <vfprintf+0x30a>
    11bc:	73 14       	cp	r7, r3
    11be:	10 f4       	brcc	.+4      	; 0x11c4 <vfprintf+0x326>
    11c0:	37 18       	sub	r3, r7
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <vfprintf+0x328>
    11c4:	31 2c       	mov	r3, r1
    11c6:	24 ff       	sbrs	r18, 4
    11c8:	11 c0       	rjmp	.+34     	; 0x11ec <vfprintf+0x34e>
    11ca:	b7 01       	movw	r22, r14
    11cc:	80 e3       	ldi	r24, 0x30	; 48
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	2c 87       	std	Y+12, r18	; 0x0c
    11d2:	69 d0       	rcall	.+210    	; 0x12a6 <fputc>
    11d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11d6:	22 ff       	sbrs	r18, 2
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <vfprintf+0x368>
    11da:	21 ff       	sbrs	r18, 1
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <vfprintf+0x346>
    11de:	88 e5       	ldi	r24, 0x58	; 88
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0x34a>
    11e4:	88 e7       	ldi	r24, 0x78	; 120
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	b7 01       	movw	r22, r14
    11ea:	0c c0       	rjmp	.+24     	; 0x1204 <vfprintf+0x366>
    11ec:	82 2f       	mov	r24, r18
    11ee:	86 78       	andi	r24, 0x86	; 134
    11f0:	51 f0       	breq	.+20     	; 0x1206 <vfprintf+0x368>
    11f2:	21 fd       	sbrc	r18, 1
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <vfprintf+0x35c>
    11f6:	80 e2       	ldi	r24, 0x20	; 32
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <vfprintf+0x35e>
    11fa:	8b e2       	ldi	r24, 0x2B	; 43
    11fc:	27 fd       	sbrc	r18, 7
    11fe:	8d e2       	ldi	r24, 0x2D	; 45
    1200:	b7 01       	movw	r22, r14
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	50 d0       	rcall	.+160    	; 0x12a6 <fputc>
    1206:	a5 14       	cp	r10, r5
    1208:	30 f4       	brcc	.+12     	; 0x1216 <vfprintf+0x378>
    120a:	b7 01       	movw	r22, r14
    120c:	80 e3       	ldi	r24, 0x30	; 48
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	4a d0       	rcall	.+148    	; 0x12a6 <fputc>
    1212:	5a 94       	dec	r5
    1214:	f8 cf       	rjmp	.-16     	; 0x1206 <vfprintf+0x368>
    1216:	aa 94       	dec	r10
    1218:	f4 01       	movw	r30, r8
    121a:	ea 0d       	add	r30, r10
    121c:	f1 1d       	adc	r31, r1
    121e:	80 81       	ld	r24, Z
    1220:	b7 01       	movw	r22, r14
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	40 d0       	rcall	.+128    	; 0x12a6 <fputc>
    1226:	a1 10       	cpse	r10, r1
    1228:	f6 cf       	rjmp	.-20     	; 0x1216 <vfprintf+0x378>
    122a:	33 20       	and	r3, r3
    122c:	09 f4       	brne	.+2      	; 0x1230 <vfprintf+0x392>
    122e:	5d ce       	rjmp	.-838    	; 0xeea <vfprintf+0x4c>
    1230:	b7 01       	movw	r22, r14
    1232:	80 e2       	ldi	r24, 0x20	; 32
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	37 d0       	rcall	.+110    	; 0x12a6 <fputc>
    1238:	3a 94       	dec	r3
    123a:	f7 cf       	rjmp	.-18     	; 0x122a <vfprintf+0x38c>
    123c:	f7 01       	movw	r30, r14
    123e:	86 81       	ldd	r24, Z+6	; 0x06
    1240:	97 81       	ldd	r25, Z+7	; 0x07
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x3aa>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	9f ef       	ldi	r25, 0xFF	; 255
    1248:	2c 96       	adiw	r28, 0x0c	; 12
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	bf 90       	pop	r11
    1266:	af 90       	pop	r10
    1268:	9f 90       	pop	r9
    126a:	8f 90       	pop	r8
    126c:	7f 90       	pop	r7
    126e:	6f 90       	pop	r6
    1270:	5f 90       	pop	r5
    1272:	4f 90       	pop	r4
    1274:	3f 90       	pop	r3
    1276:	2f 90       	pop	r2
    1278:	08 95       	ret

0000127a <strnlen_P>:
    127a:	fc 01       	movw	r30, r24
    127c:	05 90       	lpm	r0, Z+
    127e:	61 50       	subi	r22, 0x01	; 1
    1280:	70 40       	sbci	r23, 0x00	; 0
    1282:	01 10       	cpse	r0, r1
    1284:	d8 f7       	brcc	.-10     	; 0x127c <strnlen_P+0x2>
    1286:	80 95       	com	r24
    1288:	90 95       	com	r25
    128a:	8e 0f       	add	r24, r30
    128c:	9f 1f       	adc	r25, r31
    128e:	08 95       	ret

00001290 <strnlen>:
    1290:	fc 01       	movw	r30, r24
    1292:	61 50       	subi	r22, 0x01	; 1
    1294:	70 40       	sbci	r23, 0x00	; 0
    1296:	01 90       	ld	r0, Z+
    1298:	01 10       	cpse	r0, r1
    129a:	d8 f7       	brcc	.-10     	; 0x1292 <strnlen+0x2>
    129c:	80 95       	com	r24
    129e:	90 95       	com	r25
    12a0:	8e 0f       	add	r24, r30
    12a2:	9f 1f       	adc	r25, r31
    12a4:	08 95       	ret

000012a6 <fputc>:
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	18 2f       	mov	r17, r24
    12b0:	09 2f       	mov	r16, r25
    12b2:	eb 01       	movw	r28, r22
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 fd       	sbrc	r24, 1
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <fputc+0x1a>
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	20 c0       	rjmp	.+64     	; 0x1300 <fputc+0x5a>
    12c0:	82 ff       	sbrs	r24, 2
    12c2:	10 c0       	rjmp	.+32     	; 0x12e4 <fputc+0x3e>
    12c4:	4e 81       	ldd	r20, Y+6	; 0x06
    12c6:	5f 81       	ldd	r21, Y+7	; 0x07
    12c8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ca:	3d 81       	ldd	r19, Y+5	; 0x05
    12cc:	42 17       	cp	r20, r18
    12ce:	53 07       	cpc	r21, r19
    12d0:	7c f4       	brge	.+30     	; 0x12f0 <fputc+0x4a>
    12d2:	e8 81       	ld	r30, Y
    12d4:	f9 81       	ldd	r31, Y+1	; 0x01
    12d6:	9f 01       	movw	r18, r30
    12d8:	2f 5f       	subi	r18, 0xFF	; 255
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	39 83       	std	Y+1, r19	; 0x01
    12de:	28 83       	st	Y, r18
    12e0:	10 83       	st	Z, r17
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <fputc+0x4a>
    12e4:	e8 85       	ldd	r30, Y+8	; 0x08
    12e6:	f9 85       	ldd	r31, Y+9	; 0x09
    12e8:	81 2f       	mov	r24, r17
    12ea:	19 95       	eicall
    12ec:	89 2b       	or	r24, r25
    12ee:	29 f7       	brne	.-54     	; 0x12ba <fputc+0x14>
    12f0:	2e 81       	ldd	r18, Y+6	; 0x06
    12f2:	3f 81       	ldd	r19, Y+7	; 0x07
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	3f 83       	std	Y+7, r19	; 0x07
    12fa:	2e 83       	std	Y+6, r18	; 0x06
    12fc:	81 2f       	mov	r24, r17
    12fe:	90 2f       	mov	r25, r16
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <__ultoa_invert>:
    130a:	fa 01       	movw	r30, r20
    130c:	aa 27       	eor	r26, r26
    130e:	28 30       	cpi	r18, 0x08	; 8
    1310:	51 f1       	breq	.+84     	; 0x1366 <__ultoa_invert+0x5c>
    1312:	20 31       	cpi	r18, 0x10	; 16
    1314:	81 f1       	breq	.+96     	; 0x1376 <__ultoa_invert+0x6c>
    1316:	e8 94       	clt
    1318:	6f 93       	push	r22
    131a:	6e 7f       	andi	r22, 0xFE	; 254
    131c:	6e 5f       	subi	r22, 0xFE	; 254
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	8f 4f       	sbci	r24, 0xFF	; 255
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	af 4f       	sbci	r26, 0xFF	; 255
    1326:	b1 e0       	ldi	r27, 0x01	; 1
    1328:	3e d0       	rcall	.+124    	; 0x13a6 <__ultoa_invert+0x9c>
    132a:	b4 e0       	ldi	r27, 0x04	; 4
    132c:	3c d0       	rcall	.+120    	; 0x13a6 <__ultoa_invert+0x9c>
    132e:	67 0f       	add	r22, r23
    1330:	78 1f       	adc	r23, r24
    1332:	89 1f       	adc	r24, r25
    1334:	9a 1f       	adc	r25, r26
    1336:	a1 1d       	adc	r26, r1
    1338:	68 0f       	add	r22, r24
    133a:	79 1f       	adc	r23, r25
    133c:	8a 1f       	adc	r24, r26
    133e:	91 1d       	adc	r25, r1
    1340:	a1 1d       	adc	r26, r1
    1342:	6a 0f       	add	r22, r26
    1344:	71 1d       	adc	r23, r1
    1346:	81 1d       	adc	r24, r1
    1348:	91 1d       	adc	r25, r1
    134a:	a1 1d       	adc	r26, r1
    134c:	20 d0       	rcall	.+64     	; 0x138e <__ultoa_invert+0x84>
    134e:	09 f4       	brne	.+2      	; 0x1352 <__ultoa_invert+0x48>
    1350:	68 94       	set
    1352:	3f 91       	pop	r19
    1354:	2a e0       	ldi	r18, 0x0A	; 10
    1356:	26 9f       	mul	r18, r22
    1358:	11 24       	eor	r1, r1
    135a:	30 19       	sub	r19, r0
    135c:	30 5d       	subi	r19, 0xD0	; 208
    135e:	31 93       	st	Z+, r19
    1360:	de f6       	brtc	.-74     	; 0x1318 <__ultoa_invert+0xe>
    1362:	cf 01       	movw	r24, r30
    1364:	08 95       	ret
    1366:	46 2f       	mov	r20, r22
    1368:	47 70       	andi	r20, 0x07	; 7
    136a:	40 5d       	subi	r20, 0xD0	; 208
    136c:	41 93       	st	Z+, r20
    136e:	b3 e0       	ldi	r27, 0x03	; 3
    1370:	0f d0       	rcall	.+30     	; 0x1390 <__ultoa_invert+0x86>
    1372:	c9 f7       	brne	.-14     	; 0x1366 <__ultoa_invert+0x5c>
    1374:	f6 cf       	rjmp	.-20     	; 0x1362 <__ultoa_invert+0x58>
    1376:	46 2f       	mov	r20, r22
    1378:	4f 70       	andi	r20, 0x0F	; 15
    137a:	40 5d       	subi	r20, 0xD0	; 208
    137c:	4a 33       	cpi	r20, 0x3A	; 58
    137e:	18 f0       	brcs	.+6      	; 0x1386 <__ultoa_invert+0x7c>
    1380:	49 5d       	subi	r20, 0xD9	; 217
    1382:	31 fd       	sbrc	r19, 1
    1384:	40 52       	subi	r20, 0x20	; 32
    1386:	41 93       	st	Z+, r20
    1388:	02 d0       	rcall	.+4      	; 0x138e <__ultoa_invert+0x84>
    138a:	a9 f7       	brne	.-22     	; 0x1376 <__ultoa_invert+0x6c>
    138c:	ea cf       	rjmp	.-44     	; 0x1362 <__ultoa_invert+0x58>
    138e:	b4 e0       	ldi	r27, 0x04	; 4
    1390:	a6 95       	lsr	r26
    1392:	97 95       	ror	r25
    1394:	87 95       	ror	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	ba 95       	dec	r27
    139c:	c9 f7       	brne	.-14     	; 0x1390 <__ultoa_invert+0x86>
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 05       	cpc	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	08 95       	ret
    13a6:	9b 01       	movw	r18, r22
    13a8:	ac 01       	movw	r20, r24
    13aa:	0a 2e       	mov	r0, r26
    13ac:	06 94       	lsr	r0
    13ae:	57 95       	ror	r21
    13b0:	47 95       	ror	r20
    13b2:	37 95       	ror	r19
    13b4:	27 95       	ror	r18
    13b6:	ba 95       	dec	r27
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__ultoa_invert+0xa2>
    13ba:	62 0f       	add	r22, r18
    13bc:	73 1f       	adc	r23, r19
    13be:	84 1f       	adc	r24, r20
    13c0:	95 1f       	adc	r25, r21
    13c2:	a0 1d       	adc	r26, r0
    13c4:	08 95       	ret

000013c6 <_exit>:
    13c6:	f8 94       	cli

000013c8 <__stop_program>:
    13c8:	ff cf       	rjmp	.-2      	; 0x13c8 <__stop_program>
